//! Autogenerated proof cases for benchmarking `pallet_file_system`.
//!
//! THIS FILE WAS AUTO-GENERATED USING THE `generateFileSystemBenchmarkProofs.ts` SCRIPT FROM STORAGE HUB.
//! DATE: {{date}}.
//!
//! To regenerate this file, follow these steps:
//! 1. Clone the `storage-hub` repo if you haven't already.
//! 2. Make sure you're able to run BSPNet integration tests locally. You can see the steps in the [testing README](https://github.com/Moonsong-Labs/storage-hub/blob/main/test/README.md).
//!     Usually this involves just:
//!     a. Building the node. Be careful to build with the `runtime-benchmarks` feature enabled. If you're building in a Mac for instance, run `pnpm crossbuild:mac --features runtime-benchmarks`.
//!     b. Building docker images. Run `pnpm docker:build`.
//! 3. Run the script with `pnpm docker:start:generateFileSystemBenchmarkProofs`.
//!
//! The `generateFileSystemBenchmarkProofs.ts` script should run, and it should automatically regenerate this file.

use sp_core::crypto::Ss58Codec;
use sp_runtime::AccountId32;
use sp_std::{vec, vec::Vec};

#[rustfmt::skip]
pub fn get_msp_id() -> Vec<u8> {
    {{msp_id}}
}

#[rustfmt::skip]
pub fn get_bucket_root() -> Vec<u8> {
    {{bucket_root}}
}

#[rustfmt::skip]
pub fn get_user_account() -> AccountId32 {
	{{user_account}}
}

#[rustfmt::skip]
pub fn fetch_non_inclusion_proof(number_of_file_keys_to_accept: u32) -> Vec<u8> {
	match number_of_file_keys_to_accept {
		{{non_inclusion_proofs}}
		_ => panic!(
			"Number of file keys to accept ({}) is not supported",
			number_of_file_keys_to_accept
		),
	}
}

#[rustfmt::skip]
pub fn fetch_file_keys_to_accept(number_of_file_keys_to_accept: u32) -> Vec<Vec<u8>> {
	match number_of_file_keys_to_accept {
		{{file_keys_to_accept}}
		_ => panic!(
			"Number of file keys to accept ({}) is not supported",
			number_of_file_keys_to_accept
		),
	}
}

#[rustfmt::skip]
pub fn fetch_file_key_proof(file_key_index: u32) -> Vec<u8> {
	match file_key_index {
		{{file_key_proofs}}
		_ => panic!(
			"File key index ({}) is not supported",
			file_key_index
		),
	}
}

#[rustfmt::skip]
pub fn get_bsp_id() -> Vec<u8> {
    {{bsp_id}}
}

#[rustfmt::skip]
pub fn get_bsp_root() -> Vec<u8> {
    {{bsp_root}}
}

#[rustfmt::skip]
pub fn fetch_inclusion_proof() -> Vec<u8> {
	{{inclusion_proof}}
}

#[rustfmt::skip]
pub fn fetch_file_key_for_inclusion_proof() -> Vec<u8> {
	{{file_key_inclusion_proof}}
}

