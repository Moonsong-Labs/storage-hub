[
  1635018093,
  {
    "V15": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Nonce",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 10,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 10,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "compact": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 16,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "sequence": {
                  "type": 17
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "def": {
                "sequence": {
                  "type": 20
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 21
                },
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 210,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 21,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 133,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "storage_hub_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 22,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 33,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 35,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_collator_selection::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 119,
                          "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "pallet_message_queue::Event<Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Providers",
                      "fields": [
                        {
                          "type": 124,
                          "typeName": "pallet_storage_providers::Event<Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "FileSystem",
                      "fields": [
                        {
                          "type": 134,
                          "typeName": "pallet_file_system::Event<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "ProofsDealer",
                      "fields": [
                        {
                          "type": 141,
                          "typeName": "pallet_proofs_dealer::Event<Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Randomness",
                      "fields": [
                        {
                          "type": 161,
                          "typeName": "pallet_randomness::Event<Runtime>"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "PaymentStreams",
                      "fields": [
                        {
                          "type": 162,
                          "typeName": "pallet_payment_streams::Event<Runtime>"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "BucketNfts",
                      "fields": [
                        {
                          "type": 164,
                          "typeName": "pallet_bucket_nfts::Event<Runtime>"
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 165,
                          "typeName": "pallet_nfts::Event<Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Parameters",
                      "fields": [
                        {
                          "type": 174,
                          "typeName": "pallet_parameters::Event<Runtime>"
                        }
                      ],
                      "index": 51
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 26,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 23,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upgrade was authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 24,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 25,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 18,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidationFunctionStored",
                      "index": 0,
                      "docs": [
                        "The validation function has been scheduled to apply."
                      ]
                    },
                    {
                      "name": "ValidationFunctionApplied",
                      "fields": [
                        {
                          "name": "relay_chain_block_num",
                          "type": 4,
                          "typeName": "RelayChainBlockNumber"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The validation function was applied as of the contained relay chain block number."
                      ]
                    },
                    {
                      "name": "ValidationFunctionDiscarded",
                      "index": 2,
                      "docs": [
                        "The relay-chain aborted the upgrade process."
                      ]
                    },
                    {
                      "name": "DownwardMessagesReceived",
                      "fields": [
                        {
                          "name": "count",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some downward messages have been received and will be processed."
                      ]
                    },
                    {
                      "name": "DownwardMessagesProcessed",
                      "fields": [
                        {
                          "name": "weight_used",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "dmq_head",
                          "type": 13,
                          "typeName": "relay_chain::Hash"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Downward messages were processed using the given weight."
                      ]
                    },
                    {
                      "name": "UpwardMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 32,
                          "typeName": "Option<XcmHash>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An upward message was sent to the relay chain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 1
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 34,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    },
                    {
                      "name": "TotalIssuanceForced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "The `TotalIssuance` was forcefully changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 37,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo call just took place."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old",
                          "type": 39,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "The old sudo key (if one was previously set)."
                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The new sudo key (if one was set)."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The sudo key has been updated."
                      ]
                    },
                    {
                      "name": "KeyRemoved",
                      "index": 2,
                      "docs": [
                        "The key was permanently removed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 37,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A [sudo_as](Pallet::sudo_as) call just took place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                },
                {
                  "name": "E",
                  "type": 26
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 38
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 26
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewInvulnerables",
                      "fields": [
                        {
                          "name": "invulnerables",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New Invulnerables were set."
                      ]
                    },
                    {
                      "name": "InvulnerableAdded",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A new Invulnerable was added."
                      ]
                    },
                    {
                      "name": "InvulnerableRemoved",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An Invulnerable was removed."
                      ]
                    },
                    {
                      "name": "NewDesiredCandidates",
                      "fields": [
                        {
                          "name": "desired_candidates",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The number of desired candidates was set."
                      ]
                    },
                    {
                      "name": "NewCandidacyBond",
                      "fields": [
                        {
                          "name": "bond_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The candidacy bond was set."
                      ]
                    },
                    {
                      "name": "CandidateAdded",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A new candidate joined."
                      ]
                    },
                    {
                      "name": "CandidateBondUpdated",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Bond of a candidate updated."
                      ]
                    },
                    {
                      "name": "CandidateRemoved",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A candidate was removed."
                      ]
                    },
                    {
                      "name": "CandidateReplaced",
                      "fields": [
                        {
                          "name": "old",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "An account was replaced in the candidate list by another one."
                      ]
                    },
                    {
                      "name": "InvalidInvulnerableSkipped",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "An account was unable to be added to the Invulnerables because they did not have keys",
                        "registered. Other Invulnerables may have been set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XcmpMessageSent",
                      "fields": [
                        {
                          "name": "message_hash",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An HRMP message was sent to a sibling parachain."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Attempted",
                      "fields": [
                        {
                          "name": "outcome",
                          "type": 45,
                          "typeName": "xcm::latest::Outcome"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Execution of an XCM message was attempted."
                      ]
                    },
                    {
                      "name": "Sent",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "destination",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "message",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A XCM message was sent."
                      ]
                    },
                    {
                      "name": "UnexpectedResponse",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Query response received which does not match a registered query. This may be because a",
                        "matching query was never registered, it may be because it is a duplicate response, or",
                        "because the query timed out."
                      ]
                    },
                    {
                      "name": "ResponseReady",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 76,
                          "typeName": "Response"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Query response has been received and is ready for taking with `take_response`. There is",
                        "no registered notification call."
                      ]
                    },
                    {
                      "name": "Notified",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification has",
                        "been dispatched and executed successfully."
                      ]
                    },
                    {
                      "name": "NotifyOverweight",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "actual_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "max_budgeted_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Query response has been received and query is removed. The registered notification",
                        "could not be dispatched because the dispatch weight is greater than the maximum weight",
                        "originally budgeted by this runtime for the query result."
                      ]
                    },
                    {
                      "name": "NotifyDispatchError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Query response has been received and query is removed. There was a general error with",
                        "dispatching the notification call."
                      ]
                    },
                    {
                      "name": "NotifyDecodeFailed",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "pallet_index",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "call_index",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Query response has been received and query is removed. The dispatch was unable to be",
                        "decoded into a `Call`; this might be due to dispatch function having a signature which",
                        "is not `(origin, QueryId, Response)`."
                      ]
                    },
                    {
                      "name": "InvalidResponder",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "expected_location",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Expected query response has been received but the origin location of the response does",
                        "not match that expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon."
                      ]
                    },
                    {
                      "name": "InvalidResponderVersion",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Expected query response has been received but the expected origin location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed."
                      ]
                    },
                    {
                      "name": "ResponseTaken",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Received query response has been read and removed."
                      ]
                    },
                    {
                      "name": "AssetsTrapped",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H256"
                        },
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "VersionedAssets"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some assets have been placed in an asset trap."
                      ]
                    },
                    {
                      "name": "VersionChangeNotified",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "result",
                          "type": 4,
                          "typeName": "XcmVersion"
                        },
                        {
                          "name": "cost",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An XCM version change notification message has been attempted to be sent.",
                        "",
                        "The cost of sending it (borne by the chain) is included."
                      ]
                    },
                    {
                      "name": "SupportedVersionChanged",
                      "fields": [
                        {
                          "name": "location",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "The supported version of a location has been changed. This might be through an",
                        "automatic notification or a manual intervention."
                      ]
                    },
                    {
                      "name": "NotifyTargetSendFail",
                      "fields": [
                        {
                          "name": "location",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "error",
                          "type": 46,
                          "typeName": "XcmError"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "sending the notification to it."
                      ]
                    },
                    {
                      "name": "NotifyTargetMigrationFail",
                      "fields": [
                        {
                          "name": "location",
                          "type": 118,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A given location which had a version change subscription was dropped owing to an error",
                        "migrating the location to our new XCM format."
                      ]
                    },
                    {
                      "name": "InvalidQuerierVersion",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Expected query response has been received but the expected querier location placed in",
                        "storage by this runtime previously cannot be decoded. The query remains registered.",
                        "",
                        "This is unexpected (since a location placed in storage in a previously executing",
                        "runtime should be readable prior to query timeout) and dangerous since the possibly",
                        "valid response will be dropped. Manual governance intervention is probably going to be",
                        "needed."
                      ]
                    },
                    {
                      "name": "InvalidQuerier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "query_id",
                          "type": 12,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "expected_querier",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "maybe_actual_querier",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Expected query response has been received but the querier location of the response does",
                        "not match the expected. The query remains registered for a later, valid, response to",
                        "be received and acted upon."
                      ]
                    },
                    {
                      "name": "VersionNotifyStarted",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "A remote has requested XCM version change notification from us and we have honored it.",
                        "A version information message is sent to them and its cost is included."
                      ]
                    },
                    {
                      "name": "VersionNotifyRequested",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "We have requested that a remote chain send us XCM version change notifications."
                      ]
                    },
                    {
                      "name": "VersionNotifyUnrequested",
                      "fields": [
                        {
                          "name": "destination",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "cost",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "message_id",
                          "type": 1,
                          "typeName": "XcmHash"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "We have requested that a remote chain stops sending us XCM version change",
                        "notifications."
                      ]
                    },
                    {
                      "name": "FeesPaid",
                      "fields": [
                        {
                          "name": "paying",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "fees",
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Fees were paid from a location for an operation (often for using `SendXcm`)."
                      ]
                    },
                    {
                      "name": "AssetsClaimed",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 13,
                          "typeName": "H256"
                        },
                        {
                          "name": "origin",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "VersionedAssets"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Some assets have been claimed from an asset trap"
                      ]
                    },
                    {
                      "name": "VersionMigrationFinished",
                      "fields": [
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "A XCM version migration finished."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "traits",
                "Outcome"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "fields": [
                        {
                          "name": "used",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Incomplete",
                      "fields": [
                        {
                          "name": "used",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "error",
                          "type": 46,
                          "typeName": "Error"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "name": "error",
                          "type": 46,
                          "typeName": "Error"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "LocationFull",
                      "index": 4
                    },
                    {
                      "name": "LocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "ExpectationFalse",
                      "index": 22
                    },
                    {
                      "name": "PalletNotFound",
                      "index": 23
                    },
                    {
                      "name": "NameMismatch",
                      "index": 24
                    },
                    {
                      "name": "VersionIncompatible",
                      "index": 25
                    },
                    {
                      "name": "HoldingWouldOverflow",
                      "index": 26
                    },
                    {
                      "name": "ExportError",
                      "index": 27
                    },
                    {
                      "name": "ReanchorFailed",
                      "index": 28
                    },
                    {
                      "name": "NoDeal",
                      "index": 29
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 30
                    },
                    {
                      "name": "LockError",
                      "index": 31
                    },
                    {
                      "name": "NoPermission",
                      "index": 32
                    },
                    {
                      "name": "Unanchored",
                      "index": 33
                    },
                    {
                      "name": "NotDepositable",
                      "index": 34
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 35
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Barrier",
                      "index": 37
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 38
                    },
                    {
                      "name": "ExceedsStackLimit",
                      "index": 39
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "location",
                "Location"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 48,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 49,
                          "typeName": "Arc<[Junction; 1]>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 58,
                          "typeName": "Arc<[Junction; 2]>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "Arc<[Junction; 3]>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "Arc<[Junction; 4]>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 61,
                          "typeName": "Arc<[Junction; 5]>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 62,
                          "typeName": "Arc<[Junction; 6]>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 63,
                          "typeName": "Arc<[Junction; 7]>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "Arc<[Junction; 8]>"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "def": {
                "array": {
                  "len": 1,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 52,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 52,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 52,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 54,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 56,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 57,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 53
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 53
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 12,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    },
                    {
                      "name": "PolkadotBulletin",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Moniker",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "def": {
                "array": {
                  "len": 2,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "def": {
                "array": {
                  "len": 3,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "array": {
                  "len": 5,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "def": {
                "array": {
                  "len": 6,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "def": {
                "array": {
                  "len": 7,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 50
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 66,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "def": {
                "sequence": {
                  "type": 67
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 76,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 86,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 87,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "InteriorLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "ticket",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 53,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 48,
                          "typeName": "InteriorLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "unlocker",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "target",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "owner",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "locker",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Assets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 69,
                      "typeName": "Vec<Asset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "def": {
                "sequence": {
                  "type": 70
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Asset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 71,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 72,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 47,
                      "typeName": "Location"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 79,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 78
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 78
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "def": {
                "tuple": [
                  4,
                  46
                ]
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 80
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 82,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 81,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 81,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 51,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "def": {
                "sequence": {
                  "type": 80
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Success",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "TruncatedError",
                      "fields": [
                        {
                          "type": 84,
                          "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 47
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 47
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "xcm",
                "v3",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 47,
                      "typeName": "Location"
                    },
                    {
                      "name": "query_id",
                      "type": 11,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "WildAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 71,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 91,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 71,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 91,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "xcm",
                "v3",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "xcm",
                "VersionedAssets"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "v2::MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "v3::MultiAssets"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "v4::Assets"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 95,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "def": {
                "sequence": {
                  "type": 96
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 97,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 105,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 99,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        },
                        {
                          "type": 100,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 101,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "key",
                          "type": 54,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 103,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 104,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "xcm",
                "v2",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Any",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unit",
                      "index": 0
                    },
                    {
                      "name": "Named",
                      "fields": [
                        {
                          "type": 102,
                          "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Executive",
                      "index": 3
                    },
                    {
                      "name": "Technical",
                      "index": 4
                    },
                    {
                      "name": "Legislative",
                      "index": 5
                    },
                    {
                      "name": "Judicial",
                      "index": 6
                    },
                    {
                      "name": "Defense",
                      "index": 7
                    },
                    {
                      "name": "Administration",
                      "index": 8
                    },
                    {
                      "name": "Treasury",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "xcm",
                "v2",
                "BodyPart"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voice",
                      "index": 0
                    },
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "name": "count",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Fraction",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AtLeastProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MoreThanProportion",
                      "fields": [
                        {
                          "name": "nom",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "denom",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Blob",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 108,
                      "typeName": "Vec<MultiAsset>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "def": {
                "sequence": {
                  "type": 109
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 110,
                      "typeName": "AssetId"
                    },
                    {
                      "name": "fun",
                      "type": 116,
                      "typeName": "Fungibility"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Concrete",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Abstract",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "staging_xcm",
                "v3",
                "multilocation",
                "MultiLocation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parents",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "interior",
                      "type": 112,
                      "typeName": "Junctions"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "X1",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "X2",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "X3",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "X4",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "X5",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "X6",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "X7",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "X8",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        },
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Parachain",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "name": "network",
                          "type": 114,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIndex64",
                      "fields": [
                        {
                          "name": "network",
                          "type": 114,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "index",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountKey20",
                      "fields": [
                        {
                          "name": "network",
                          "type": 114,
                          "typeName": "Option<NetworkId>"
                        },
                        {
                          "name": "key",
                          "type": 54,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletInstance",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "GeneralIndex",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "GeneralKey",
                      "fields": [
                        {
                          "name": "length",
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "name": "data",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OnlyChild",
                      "index": 7
                    },
                    {
                      "name": "Plurality",
                      "fields": [
                        {
                          "name": "id",
                          "type": 56,
                          "typeName": "BodyId"
                        },
                        {
                          "name": "part",
                          "type": 57,
                          "typeName": "BodyPart"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "GlobalConsensus",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "NetworkId"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 115
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 115
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ByGenesis",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ByFork",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 12,
                          "typeName": "u64"
                        },
                        {
                          "name": "block_hash",
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Polkadot",
                      "index": 2
                    },
                    {
                      "name": "Kusama",
                      "index": 3
                    },
                    {
                      "name": "Westend",
                      "index": 4
                    },
                    {
                      "name": "Rococo",
                      "index": 5
                    },
                    {
                      "name": "Wococo",
                      "index": 6
                    },
                    {
                      "name": "Ethereum",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BitcoinCore",
                      "index": 8
                    },
                    {
                      "name": "BitcoinCash",
                      "index": 9
                    },
                    {
                      "name": "PolkadotBulletin",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "fields": [
                        {
                          "type": 117,
                          "typeName": "AssetInstance"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Undefined",
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "u128"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Array4",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "[u8; 4]"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Array8",
                      "fields": [
                        {
                          "type": 74,
                          "typeName": "[u8; 8]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Array16",
                      "fields": [
                        {
                          "type": 75,
                          "typeName": "[u8; 16]"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Array32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "xcm",
                "VersionedLocation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "v2::MultiLocation"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "v3::MultiLocation"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "v4::Location"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidFormat",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Downward message is invalid XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "UnsupportedVersion",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Downward message is unsupported version of XCM.",
                        "\\[ id \\]"
                      ]
                    },
                    {
                      "name": "ExecutedDownward",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        },
                        {
                          "type": 45,
                          "typeName": "Outcome"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Downward message executed with the given outcome.",
                        "\\[ id, outcome \\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProcessingFailed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 13,
                          "typeName": "H256",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "error",
                          "type": 123,
                          "typeName": "ProcessMessageError",
                          "docs": [
                            "The error that occurred.",
                            "",
                            "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                            "by the `MessageProcessor`."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                      ]
                    },
                    {
                      "name": "Processed",
                      "fields": [
                        {
                          "name": "id",
                          "type": 13,
                          "typeName": "H256",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "weight_used",
                          "type": 10,
                          "typeName": "Weight",
                          "docs": [
                            "How much weight was used to process the message."
                          ]
                        },
                        {
                          "name": "success",
                          "type": 8,
                          "typeName": "bool",
                          "docs": [
                            "Whether the message was processed.",
                            "",
                            "Note that this does not mean that the underlying `MessageProcessor` was internally",
                            "successful. It *solely* means that the MQ pallet will treat this as a success",
                            "condition and discard the message. Any internal error needs to be emitted as events",
                            "by the `MessageProcessor`."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Message is processed."
                      ]
                    },
                    {
                      "name": "OverweightEnqueued",
                      "fields": [
                        {
                          "name": "id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": [
                            "The `blake2_256` hash of the message."
                          ]
                        },
                        {
                          "name": "origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the message."
                          ]
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex",
                          "docs": [
                            "The page of the message."
                          ]
                        },
                        {
                          "name": "message_index",
                          "type": 4,
                          "typeName": "T::Size",
                          "docs": [
                            "The index of the message within the page."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Message placed in overweight queue."
                      ]
                    },
                    {
                      "name": "PageReaped",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>",
                          "docs": [
                            "The queue of the page."
                          ]
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "PageIndex",
                          "docs": [
                            "The index of the page."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This page was reaped."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "cumulus_primitives_core",
                "AggregateMessageOrigin"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Here",
                      "index": 0
                    },
                    {
                      "name": "Parent",
                      "index": 1
                    },
                    {
                      "name": "Sibling",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "ParaId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "Id"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "messages",
                "ProcessMessageError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadFormat",
                      "index": 0
                    },
                    {
                      "name": "Corrupt",
                      "index": 1
                    },
                    {
                      "name": "Unsupported",
                      "index": 2
                    },
                    {
                      "name": "Overweight",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Yield",
                      "index": 4
                    },
                    {
                      "name": "StackLimitReached",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "pallet_storage_providers",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MspRequestSignUpSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when a Main Storage Provider has requested to sign up successfully. Provides information about",
                        "that MSP's account id, its multiaddresses, the total data it can store according to its stake, and its value proposition."
                      ]
                    },
                    {
                      "name": "MspSignUpSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "value_prop",
                          "type": 128,
                          "typeName": "ValuePropositionWithId<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event emitted when a Main Storage Provider has confirmed its sign up successfully. Provides information about",
                        "that MSP's account id, the total data it can store according to its stake, its multiaddress, and its value proposition."
                      ]
                    },
                    {
                      "name": "BspRequestSignUpSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event emitted when a Backup Storage Provider has requested to sign up successfully. Provides information about",
                        "that BSP's account id, its multiaddresses, and the total data it can store according to its stake."
                      ]
                    },
                    {
                      "name": "BspSignUpSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "BackupStorageProviderId<T>"
                        },
                        {
                          "name": "root",
                          "type": 13,
                          "typeName": "MerklePatriciaRoot<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Event emitted when a Backup Storage Provider has confirmed its sign up successfully. Provides information about",
                        "that BSP's account id, the initial root of the Merkle Patricia Trie that it stores, the total data it can store",
                        "according to its stake, and its multiaddress."
                      ]
                    },
                    {
                      "name": "SignUpRequestCanceled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Event emitted when a sign up request has been canceled successfully. Provides information about",
                        "the account id of the user that canceled the request."
                      ]
                    },
                    {
                      "name": "MspSignOffSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Event emitted when a Main Storage Provider has signed off successfully. Provides information about",
                        "that MSP's account id."
                      ]
                    },
                    {
                      "name": "BspSignOffSuccess",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "BackupStorageProviderId<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Event emitted when a Backup Storage Provider has signed off successfully. Provides information about",
                        "that BSP's account id."
                      ]
                    },
                    {
                      "name": "CapacityChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 131,
                          "typeName": "StorageProviderId<T>"
                        },
                        {
                          "name": "old_capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "new_capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "next_block_when_change_allowed",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Event emitted when a SP has changed its capacity successfully. Provides information about",
                        "that SP's account id, its old total data that could store, and the new total data."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Event emitted when a SP has been slashed."
                      ]
                    },
                    {
                      "name": "AwaitingTopUp",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "top_up_metadata",
                          "type": 132,
                          "typeName": "TopUpMetadata<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Event emitted when a provider has been slashed and they have reached a capacity deficit (i.e. the provider's capacity fell below their used capacity)",
                        "signalling the end of the grace period since an automatic top up could not be performed due to insufficient free balance."
                      ]
                    },
                    {
                      "name": "TopUpFulfilled",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount that the provider has added to the held `StorageProviderDeposit` to pay for the outstanding slash amount."
                          ]
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Event emitted when an SP has topped up its deposit based on slash amount."
                      ]
                    },
                    {
                      "name": "FailedToGetOwnerAccountOfInsolventProvider",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Event emitted when the account ID of a provider that has just been marked as insolvent can't be found in storage."
                      ]
                    },
                    {
                      "name": "FailedToSlashInsolventProvider",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "amount_to_slash",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Event emitted when there's an error slashing the now insolvent provider."
                      ]
                    },
                    {
                      "name": "FailedToStopAllCyclesForInsolventBsp",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Event emitted when there's an error stopping all cycles for an insolvent Backup Storage Provider."
                      ]
                    },
                    {
                      "name": "ProviderInsolvent",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Event emitted when a provider has been marked as insolvent.",
                        "",
                        "This happens when the provider hasn't topped up their deposit within the grace period after being slashed",
                        "and they have a capacity deficit (i.e. their capacity based on their stake is below their used capacity by the files it stores)."
                      ]
                    },
                    {
                      "name": "BucketsOfInsolventMsp",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "buckets",
                          "type": 133,
                          "typeName": "Vec<BucketId<T>>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Event emitted when the provider that has been marked as insolvent was a MSP. It notifies the users of that MSP",
                        "the buckets that it was holding, so they can take appropriate measures."
                      ]
                    },
                    {
                      "name": "BucketRootChanged",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketId<T>"
                        },
                        {
                          "name": "old_root",
                          "type": 13,
                          "typeName": "MerklePatriciaRoot<T>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "MerklePatriciaRoot<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Event emitted when a bucket's root has been changed."
                      ]
                    },
                    {
                      "name": "MultiAddressAdded",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "new_multiaddress",
                          "type": 126,
                          "typeName": "MultiAddress<T>"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Event emitted when a Provider has added a new MultiAddress to its account."
                      ]
                    },
                    {
                      "name": "MultiAddressRemoved",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "removed_multiaddress",
                          "type": 126,
                          "typeName": "MultiAddress<T>"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Event emitted when a Provider has removed a MultiAddress from its account."
                      ]
                    },
                    {
                      "name": "ValuePropAdded",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        },
                        {
                          "name": "value_prop_id",
                          "type": 13,
                          "typeName": "ValuePropIdFor<T>"
                        },
                        {
                          "name": "value_prop",
                          "type": 129,
                          "typeName": "ValueProposition<T>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Event emitted when an MSP adds a new value proposition."
                      ]
                    },
                    {
                      "name": "ValuePropUnavailable",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        },
                        {
                          "name": "value_prop_id",
                          "type": 13,
                          "typeName": "ValuePropIdFor<T>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Event emitted when an MSP's value proposition is made unavailable."
                      ]
                    },
                    {
                      "name": "MspDeleted",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Event emitted when an MSP has been deleted."
                      ]
                    },
                    {
                      "name": "BspDeleted",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Event emitted when a BSP has been deleted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The events that can be emitted by this pallet"
              ]
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 126
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 127,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "def": {
                "sequence": {
                  "type": 126
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "ValuePropositionWithId"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 13,
                      "typeName": "ValuePropIdFor<T>"
                    },
                    {
                      "name": "value_prop",
                      "type": 129,
                      "typeName": "ValueProposition<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "ValueProposition"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "price_per_giga_unit_of_data_per_block",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "commitment",
                      "type": 130,
                      "typeName": "Commitment<T>"
                    },
                    {
                      "name": "bucket_data_limit",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "available",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "StorageProviderId"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BackupStorageProvider",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "BackupStorageProviderId<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "MainStorageProvider",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "TopUpMetadata"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "started_at",
                      "type": 4,
                      "typeName": "PaymentStreamsTickNumber<T>"
                    },
                    {
                      "name": "end_block_grace_period",
                      "type": 4,
                      "typeName": "StorageHubTickNumber<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "pallet_file_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewBucket",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "name",
                          "type": 126,
                          "typeName": "BucketNameFor<T>"
                        },
                        {
                          "name": "root",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "collection_id",
                          "type": 135,
                          "typeName": "Option<CollectionIdFor<T>>"
                        },
                        {
                          "name": "private",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "value_prop_id",
                          "type": 136,
                          "typeName": "Option<ValuePropId<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Notifies that a new bucket has been created."
                      ]
                    },
                    {
                      "name": "BucketDeleted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "maybe_collection_id",
                          "type": 135,
                          "typeName": "Option<CollectionIdFor<T>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Notifies that an empty bucket has been deleted."
                      ]
                    },
                    {
                      "name": "MoveBucketRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "new_msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Notifies that a bucket is being moved to a new MSP."
                      ]
                    },
                    {
                      "name": "BucketPrivacyUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "collection_id",
                          "type": 135,
                          "typeName": "Option<CollectionIdFor<T>>"
                        },
                        {
                          "name": "private",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Notifies that a bucket's privacy has been updated."
                      ]
                    },
                    {
                      "name": "NewCollectionAndAssociation",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "collection_id",
                          "type": 4,
                          "typeName": "CollectionIdFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Notifies that a new collection has been created and associated with a bucket."
                      ]
                    },
                    {
                      "name": "NewStorageRequest",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "peer_ids",
                          "type": 125,
                          "typeName": "PeerIds<T>"
                        },
                        {
                          "name": "expires_at",
                          "type": 4,
                          "typeName": "TickNumber<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Notifies that a new file has been requested to be stored."
                      ]
                    },
                    {
                      "name": "MspAcceptedStorageRequest",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Notifies that a Main Storage Provider (MSP) has accepted a storage request for a specific file key.",
                        "",
                        "This event is emitted when an MSP agrees to store a file, but the storage request",
                        "is not yet fully fulfilled (i.e., the required number of Backup Storage Providers",
                        "have not yet confirmed storage).",
                        "",
                        "# Note",
                        "This event is not emitted when the storage request is immediately fulfilled upon",
                        "MSP acceptance. In such cases, a [`StorageRequestFulfilled`] event is emitted instead."
                      ]
                    },
                    {
                      "name": "AcceptedBspVolunteer",
                      "fields": [
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "MultiAddresses<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Notifies that a BSP has been accepted to store a given file."
                      ]
                    },
                    {
                      "name": "BspConfirmedStoring",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "confirmed_file_keys",
                          "type": 138,
                          "typeName": "BoundedVec<MerkleHash<T>, T::MaxBatchConfirmStorageRequests>"
                        },
                        {
                          "name": "skipped_file_keys",
                          "type": 138,
                          "typeName": "BoundedVec<MerkleHash<T>, T::MaxBatchConfirmStorageRequests>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Notifies that a BSP confirmed storing a file(s)."
                      ]
                    },
                    {
                      "name": "StorageRequestFulfilled",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Notifies that a storage request for a file key has been fulfilled.",
                        "This means that the storage request has been accepted by the MSP and the BSP target",
                        "has been reached."
                      ]
                    },
                    {
                      "name": "StorageRequestExpired",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Notifies the expiration of a storage request. This means that the storage request has",
                        "been accepted by the MSP but the BSP target has not been reached (possibly 0 BSPs).",
                        "Note: This is a valid storage outcome, the user being responsible to track the number",
                        "of BSPs and choose to either delete the file and re-issue a storage request or continue."
                      ]
                    },
                    {
                      "name": "StorageRequestRevoked",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Notifies that a storage request has been revoked by the user who initiated it.",
                        "Note: the BSPs who confirmed the file are also issued a priority challenge to delete the",
                        "file."
                      ]
                    },
                    {
                      "name": "StorageRequestRejected",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "reason",
                          "type": 139,
                          "typeName": "RejectedStorageRequestReason"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Notifies that a storage request has either been directly rejected by the MSP or",
                        "the MSP did not respond to the storage request in time.",
                        "Note: There might be BSPs that have volunteered and confirmed the file already, for",
                        "which a priority challenge to delete the file will be issued."
                      ]
                    },
                    {
                      "name": "BspRequestedToStopStoring",
                      "fields": [
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "BspConfirmStoppedStoring",
                      "fields": [
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Notifies that a BSP has stopped storing a file."
                      ]
                    },
                    {
                      "name": "PriorityChallengeForFileDeletionQueued",
                      "fields": [
                        {
                          "name": "issuer",
                          "type": 140,
                          "typeName": "EitherAccountIdOrMspId<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Notifies that a file key has been queued for a priority challenge for file deletion."
                      ]
                    },
                    {
                      "name": "SpStopStoringInsolventUser",
                      "fields": [
                        {
                          "name": "sp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Notifies that a SP has stopped storing a file because its owner has become insolvent."
                      ]
                    },
                    {
                      "name": "FailedToQueuePriorityChallenge",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Notifies that a priority challenge with a trie remove mutation failed to be queued in the `on_idle` hook.",
                        "This can happen if the priority challenge queue is full, and the failed challenge should be manually",
                        "queued at a later time."
                      ]
                    },
                    {
                      "name": "FileDeletionRequest",
                      "fields": [
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "file_size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "proof_of_inclusion",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Notifies that a file will be deleted."
                      ]
                    },
                    {
                      "name": "ProofSubmittedForPendingFileDeletionRequest",
                      "fields": [
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "file_size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "proof_of_inclusion",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Notifies that a proof has been submitted for a pending file deletion request."
                      ]
                    },
                    {
                      "name": "BspChallengeCycleInitialised",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Notifies that a BSP's challenge cycle has been initialised, adding the first file",
                        "key(s) to the BSP's Merkle Patricia Forest."
                      ]
                    },
                    {
                      "name": "MoveBucketRequestExpired",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Notifies that a move bucket request has expired."
                      ]
                    },
                    {
                      "name": "MoveBucketAccepted",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Notifies that a bucket has been moved to a new MSP."
                      ]
                    },
                    {
                      "name": "MoveBucketRejected",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Notifies that a bucket move request has been rejected by the MSP."
                      ]
                    },
                    {
                      "name": "MspStoppedStoringBucket",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Notifies that a MSP has stopped storing a bucket."
                      ]
                    },
                    {
                      "name": "FailedToGetMspOfBucket",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Failed to get the MSP owner of the bucket for an expired file deletion request",
                        "This is different from the bucket not having a MSP, which is allowed and won't error"
                      ]
                    },
                    {
                      "name": "FailedToDecreaseMspUsedCapacity",
                      "fields": [
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "file_size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Failed to decrease MSP's used capacity for expired file deletion request"
                      ]
                    },
                    {
                      "name": "UsedCapacityShouldBeZero",
                      "fields": [
                        {
                          "name": "actual_used_capacity",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Event to notify of incoherencies in used capacity."
                      ]
                    },
                    {
                      "name": "FailedToReleaseStorageRequestCreationDeposit",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount_to_return",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "error",
                          "type": 26,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Event to notify if, in the `on_idle` hook when cleaning up an expired storage request,",
                        "the return of that storage request's deposit to the user failed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 133,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "RejectedStorageRequestReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReachedMaximumCapacity",
                      "index": 0
                    },
                    {
                      "name": "ReceivedInvalidProof",
                      "index": 1
                    },
                    {
                      "name": "FileKeyAlreadyStored",
                      "index": 2
                    },
                    {
                      "name": "RequestExpired",
                      "index": 3
                    },
                    {
                      "name": "InternalError",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "EitherAccountIdOrMspId"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccountId",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "MspId",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewChallenge",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "AccountIdFor<T>"
                        },
                        {
                          "name": "key_challenged",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A manual challenge was submitted."
                      ]
                    },
                    {
                      "name": "ProofAccepted",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "proof",
                          "type": 142,
                          "typeName": "Proof<T>"
                        },
                        {
                          "name": "last_tick_proven",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A proof was accepted."
                      ]
                    },
                    {
                      "name": "NewChallengeSeed",
                      "fields": [
                        {
                          "name": "challenges_ticker",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "seed",
                          "type": 13,
                          "typeName": "RandomnessOutputFor<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A new challenge seed was generated."
                      ]
                    },
                    {
                      "name": "NewCheckpointChallenge",
                      "fields": [
                        {
                          "name": "challenges_ticker",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "challenges",
                          "type": 152,
                          "typeName": "BoundedVec<CustomChallenge<T>, MaxCustomChallengesPerBlockFor<T>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new checkpoint challenge was generated."
                      ]
                    },
                    {
                      "name": "SlashableProvider",
                      "fields": [
                        {
                          "name": "provider",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "next_challenge_deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A provider was marked as slashable and their challenge deadline was forcefully pushed."
                      ]
                    },
                    {
                      "name": "NoRecordOfLastSubmittedProof",
                      "fields": [
                        {
                          "name": "provider",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "No record of the last tick the Provider submitted a proof for."
                      ]
                    },
                    {
                      "name": "NewChallengeCycleInitialised",
                      "fields": [
                        {
                          "name": "current_tick",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "next_challenge_deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "provider",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "maybe_provider_account",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A provider's challenge cycle was initialised."
                      ]
                    },
                    {
                      "name": "MutationsAppliedForProvider",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "mutations",
                          "type": 155,
                          "typeName": "Vec<(KeyFor<T>, TrieMutation)>"
                        },
                        {
                          "name": "old_root",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A set of mutations has been applied to the Forest of a given Provider."
                      ]
                    },
                    {
                      "name": "MutationsApplied",
                      "fields": [
                        {
                          "name": "mutations",
                          "type": 155,
                          "typeName": "Vec<(KeyFor<T>, TrieMutation)>"
                        },
                        {
                          "name": "old_root",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        },
                        {
                          "name": "new_root",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A set of mutations has been applied to a given Forest.",
                        "This is the generic version of [`MutationsAppliedForProvider`](Event::MutationsAppliedForProvider)",
                        "when [`generic_apply_delta`](ProofsDealerInterface::generic_apply_delta) is used",
                        "and the root is not necessarily linked to a specific Provider."
                      ]
                    },
                    {
                      "name": "ChallengesTickerSet",
                      "fields": [
                        {
                          "name": "paused",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "The [`ChallengesTicker`] has been paused or unpaused."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "types",
                "Proof"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "forest_proof",
                      "type": 143,
                      "typeName": "ForestVerifierProofFor<T>"
                    },
                    {
                      "name": "key_proofs",
                      "type": 145,
                      "typeName": "BTreeMap<KeyFor<T>, KeyProof<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "CompactProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded_nodes",
                      "type": 144,
                      "typeName": "Vec<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "def": {
                "sequence": {
                  "type": 14
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 13
                },
                {
                  "name": "V",
                  "type": 146
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 150
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "types",
                "KeyProof"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proof",
                      "type": 147,
                      "typeName": "KeyVerifierProofFor<T>"
                    },
                    {
                      "name": "challenge_count",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "shp_file_key_verifier",
                "types",
                "FileKeyProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "file_metadata",
                      "type": 148,
                      "typeName": "FileMetadata<H_LENGTH, CHUNK_SIZE, SIZE_TO_CHALLENGES>"
                    },
                    {
                      "name": "proof",
                      "type": 143,
                      "typeName": "CompactProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "shp_file_metadata",
                "FileMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "bucket_id",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "location",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "file_size",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "fingerprint",
                      "type": 149,
                      "typeName": "Fingerprint<H_LENGTH>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "shp_file_metadata",
                "Fingerprint"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "Hash<H_LENGTH>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "def": {
                "sequence": {
                  "type": 151
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "def": {
                "tuple": [
                  13,
                  146
                ]
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 153
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "types",
                "CustomChallenge"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "key",
                      "type": 13,
                      "typeName": "KeyFor<T>"
                    },
                    {
                      "name": "should_remove_key",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "def": {
                "sequence": {
                  "type": 153
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "sequence": {
                  "type": 156
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "def": {
                "tuple": [
                  13,
                  157
                ]
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "shp_traits",
                "TrieMutation"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Add",
                      "fields": [
                        {
                          "type": 158,
                          "typeName": "TrieAddMutation"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Remove",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "TrieRemoveMutation"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "shp_traits",
                "TrieAddMutation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "shp_traits",
                "TrieRemoveMutation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_value",
                      "type": 160,
                      "typeName": "Option<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 14
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 14
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "pallet_randomness",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewOneEpochAgoRandomnessAvailable",
                      "fields": [
                        {
                          "name": "randomness_seed",
                          "type": 13,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "from_epoch",
                          "type": 12,
                          "typeName": "u64"
                        },
                        {
                          "name": "valid_until_block",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when a new random seed is available from the relay chain"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "pallet_payment_streams",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FixedRatePaymentStreamCreated",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "rate",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event emitted when a fixed-rate payment stream is created. Provides information about the Provider and User of the stream",
                        "and its initial rate."
                      ]
                    },
                    {
                      "name": "FixedRatePaymentStreamUpdated",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "new_rate",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event emitted when a fixed-rate payment stream is updated. Provides information about the User and Provider of the stream",
                        "and the new rate of the stream."
                      ]
                    },
                    {
                      "name": "FixedRatePaymentStreamDeleted",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event emitted when a fixed-rate payment stream is removed. Provides information about the User and Provider of the stream."
                      ]
                    },
                    {
                      "name": "DynamicRatePaymentStreamCreated",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "amount_provided",
                          "type": 12,
                          "typeName": "UnitsProvidedFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Event emitted when a dynamic-rate payment stream is created. Provides information about the User and Provider of the stream",
                        "and the initial amount provided."
                      ]
                    },
                    {
                      "name": "DynamicRatePaymentStreamUpdated",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "new_amount_provided",
                          "type": 12,
                          "typeName": "UnitsProvidedFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Event emitted when a dynamic-rate payment stream is updated. Provides information about the User and Provider of the stream",
                        "and the new amount provided."
                      ]
                    },
                    {
                      "name": "DynamicRatePaymentStreamDeleted",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Event emitted when a dynamic-rate payment stream is removed. Provides information about the User and Provider of the stream."
                      ]
                    },
                    {
                      "name": "PaymentStreamCharged",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "last_tick_charged",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "charged_at_tick",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Event emitted when a payment is charged. Provides information about the user that was charged,",
                        "the Provider that received the funds, the tick up to which it was charged and the amount that was charged."
                      ]
                    },
                    {
                      "name": "UsersCharged",
                      "fields": [
                        {
                          "name": "user_accounts",
                          "type": 163,
                          "typeName": "BoundedVec<T::AccountId, T::MaxUsersToCharge>"
                        },
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "charged_at_tick",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Event emitted when multiple payment streams have been charged from a Provider. Provides information about",
                        "the charged users, the Provider that received the funds and the tick when the charge happened."
                      ]
                    },
                    {
                      "name": "LastChargeableInfoUpdated",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "last_chargeable_tick",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "last_chargeable_price_index",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Event emitted when a Provider's last chargeable tick and price index are updated. Provides information about the Provider of the stream,",
                        "the tick number of the last chargeable tick and the price index at that tick."
                      ]
                    },
                    {
                      "name": "UserWithoutFunds",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Event emitted when a Provider is correctly trying to charge a User and that User does not have enough funds to pay for their services.",
                        "This event is emitted to flag the user and let the network know that the user is not paying for the requested services, so other Providers can",
                        "stop providing services to that user."
                      ]
                    },
                    {
                      "name": "UserPaidAllDebts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Event emitted when a User that has been flagged as not having enough funds to pay for their contracted services has paid all its outstanding debt."
                      ]
                    },
                    {
                      "name": "UserPaidSomeDebts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Event emitted when a User that has been flagged as not having enough funds to pay for their contracted services has paid some (but not all) of its outstanding debt."
                      ]
                    },
                    {
                      "name": "UserSolvent",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Event emitted when a User that has been flagged as not having enough funds to pay for their contracted services has waited the cooldown period,",
                        "correctly paid all their outstanding debt and can now contract new services again."
                      ]
                    },
                    {
                      "name": "InconsistentTickProcessing",
                      "fields": [
                        {
                          "name": "last_processed_tick",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "tick_to_process",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Event emitted when the `on_poll` hook detects that the tick of the proof submitters that needs to process is not the one immediately after the last processed tick."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The events that can be emitted by this pallet"
              ]
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_bucket_nfts",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccessShared",
                      "fields": [
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "recipient",
                          "type": 0,
                          "typeName": "AccountIdLookupTargetOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Notifies that access to a bucket has been shared with another account."
                      ]
                    },
                    {
                      "name": "ItemReadAccessUpdated",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Notifies that the read access for an item has been updated."
                      ]
                    },
                    {
                      "name": "ItemBurned",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bucket",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Notifies that an item has been burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A `collection` was created."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A `collection` was force-created."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A `collection` was destroyed."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An `item` was issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An `item` was transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An `item` was destroyed."
                      ]
                    },
                    {
                      "name": "ItemTransferLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An `item` became non-transferable."
                      ]
                    },
                    {
                      "name": "ItemTransferUnlocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "An `item` became transferable."
                      ]
                    },
                    {
                      "name": "ItemPropertiesLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "lock_metadata",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "lock_attributes",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "`item` metadata or attributes were locked."
                      ]
                    },
                    {
                      "name": "CollectionLocked",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some `collection` was locked."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "admin",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "freezer",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "TransferApproved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "deadline",
                          "type": 135,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An `item` of a `collection` has been approved by the `owner` for transfer by",
                        "a `delegate`."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval for a `delegate` account to transfer the `item` of an item",
                        "`collection` was cancelled by its `owner`."
                      ]
                    },
                    {
                      "name": "AllApprovalsCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "All approvals of an item got cancelled."
                      ]
                    },
                    {
                      "name": "CollectionConfigChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "A `collection` has had its config changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "CollectionMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "New metadata has been set for a `collection`."
                      ]
                    },
                    {
                      "name": "CollectionMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Metadata has been cleared for a `collection`."
                      ]
                    },
                    {
                      "name": "ItemMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "New metadata has been set for an item."
                      ]
                    },
                    {
                      "name": "ItemMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "Redeposited",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "successful_items",
                          "type": 167,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "The deposit for a set of `item`s within a `collection` has been updated."
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 168,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "New attribute metadata has been set for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "AttributeCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "key",
                          "type": 168,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Attribute metadata has been cleared for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "ItemAttributesApprovalAdded",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "A new approval to modify item attributes was added."
                      ]
                    },
                    {
                      "name": "ItemAttributesApprovalRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "A new approval to modify item attributes was removed."
                      ]
                    },
                    {
                      "name": "OwnershipAcceptanceChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "maybe_collection",
                          "type": 135,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Ownership acceptance has changed for an account."
                      ]
                    },
                    {
                      "name": "CollectionMaxSupplySet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Max supply has been set for a collection."
                      ]
                    },
                    {
                      "name": "CollectionMintSettingsUpdated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Mint settings for a collection had changed."
                      ]
                    },
                    {
                      "name": "NextCollectionIdIncremented",
                      "fields": [
                        {
                          "name": "next_id",
                          "type": 135,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Event gets emitted when the `NextCollectionId` gets incremented."
                      ]
                    },
                    {
                      "name": "ItemPriceSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "The price was set for the item."
                      ]
                    },
                    {
                      "name": "ItemPriceRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "The price for the item was removed."
                      ]
                    },
                    {
                      "name": "ItemBought",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        },
                        {
                          "name": "seller",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "buyer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "An item was bought."
                      ]
                    },
                    {
                      "name": "TipSent",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "receiver",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "DepositBalanceOf<T, I>"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "A tip was sent."
                      ]
                    },
                    {
                      "name": "SwapCreated",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "desired_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "price",
                          "type": 170,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "An `item` swap intent was created."
                      ]
                    },
                    {
                      "name": "SwapCancelled",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "desired_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "price",
                          "type": 170,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "The swap was cancelled."
                      ]
                    },
                    {
                      "name": "SwapClaimed",
                      "fields": [
                        {
                          "name": "sent_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "sent_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "sent_item_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "received_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "received_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "received_item_owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "price",
                          "type": 170,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "deadline",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "The swap has been claimed."
                      ]
                    },
                    {
                      "name": "PreSignedAttributesSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "New attributes have been set for an `item` of the `collection`."
                      ]
                    },
                    {
                      "name": "PalletAttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "attribute",
                          "type": 173,
                          "typeName": "PalletAttributes<T::CollectionId>"
                        },
                        {
                          "name": "value",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
                        "within that `collection`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "AttributeNamespace"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pallet",
                      "index": 0
                    },
                    {
                      "name": "CollectionOwner",
                      "index": 1
                    },
                    {
                      "name": "ItemOwner",
                      "index": 2
                    },
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 171
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 171
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PriceWithDirection"
              ],
              "params": [
                {
                  "name": "Amount",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Amount"
                    },
                    {
                      "name": "direction",
                      "type": 172,
                      "typeName": "PriceDirection"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PriceDirection"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Send",
                      "index": 0
                    },
                    {
                      "name": "Receive",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PalletAttributes"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UsedToClaim",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "CollectionId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "TransferDisabled",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "pallet_parameters",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Updated",
                      "fields": [
                        {
                          "name": "key",
                          "type": 175,
                          "typeName": "<T::RuntimeParameters as AggregatedKeyValue>::Key",
                          "docs": [
                            "The key that was updated."
                          ]
                        },
                        {
                          "name": "old_value",
                          "type": 206,
                          "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                          "docs": [
                            "The old value before this call."
                          ]
                        },
                        {
                          "name": "new_value",
                          "type": 206,
                          "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                          "docs": [
                            "The new value after this call."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A Parameter was set.",
                        "",
                        "Is also emitted when the value was not changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "RuntimeParametersKey"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RuntimeConfig",
                      "fields": [
                        {
                          "type": 176,
                          "typeName": "<dynamic_params::runtime_config::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Key"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "ParametersKey"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SlashAmountPerMaxFileSize",
                      "fields": [
                        {
                          "type": 177,
                          "typeName": "SlashAmountPerMaxFileSize"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "StakeToChallengePeriod",
                      "fields": [
                        {
                          "type": 178,
                          "typeName": "StakeToChallengePeriod"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "CheckpointChallengePeriod",
                      "fields": [
                        {
                          "type": 179,
                          "typeName": "CheckpointChallengePeriod"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MinChallengePeriod",
                      "fields": [
                        {
                          "type": 180,
                          "typeName": "MinChallengePeriod"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "SystemUtilisationLowerThresholdPercentage",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "SystemUtilisationLowerThresholdPercentage"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "SystemUtilisationUpperThresholdPercentage",
                      "fields": [
                        {
                          "type": 182,
                          "typeName": "SystemUtilisationUpperThresholdPercentage"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "MostlyStablePrice",
                      "fields": [
                        {
                          "type": 183,
                          "typeName": "MostlyStablePrice"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "MaxPrice",
                      "fields": [
                        {
                          "type": 184,
                          "typeName": "MaxPrice"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "MinPrice",
                      "fields": [
                        {
                          "type": 185,
                          "typeName": "MinPrice"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "UpperExponentFactor",
                      "fields": [
                        {
                          "type": 186,
                          "typeName": "UpperExponentFactor"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "LowerExponentFactor",
                      "fields": [
                        {
                          "type": 187,
                          "typeName": "LowerExponentFactor"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ZeroSizeBucketFixedRate",
                      "fields": [
                        {
                          "type": 188,
                          "typeName": "ZeroSizeBucketFixedRate"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "IdealUtilisationRate",
                      "fields": [
                        {
                          "type": 189,
                          "typeName": "IdealUtilisationRate"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DecayRate",
                      "fields": [
                        {
                          "type": 190,
                          "typeName": "DecayRate"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "MinimumTreasuryCut",
                      "fields": [
                        {
                          "type": 191,
                          "typeName": "MinimumTreasuryCut"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "MaximumTreasuryCut",
                      "fields": [
                        {
                          "type": 192,
                          "typeName": "MaximumTreasuryCut"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "BspStopStoringFilePenalty",
                      "fields": [
                        {
                          "type": 193,
                          "typeName": "BspStopStoringFilePenalty"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "ProviderTopUpTtl",
                      "fields": [
                        {
                          "type": 194,
                          "typeName": "ProviderTopUpTtl"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "BasicReplicationTarget",
                      "fields": [
                        {
                          "type": 195,
                          "typeName": "BasicReplicationTarget"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "StandardReplicationTarget",
                      "fields": [
                        {
                          "type": 196,
                          "typeName": "StandardReplicationTarget"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "HighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "HighSecurityReplicationTarget"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "SuperHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 198,
                          "typeName": "SuperHighSecurityReplicationTarget"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UltraHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 199,
                          "typeName": "UltraHighSecurityReplicationTarget"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "MaxReplicationTarget",
                      "fields": [
                        {
                          "type": 200,
                          "typeName": "MaxReplicationTarget"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "TickRangeToMaximumThreshold",
                      "fields": [
                        {
                          "type": 201,
                          "typeName": "TickRangeToMaximumThreshold"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "StorageRequestTtl",
                      "fields": [
                        {
                          "type": 202,
                          "typeName": "StorageRequestTtl"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "MinWaitForStopStoring",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "MinWaitForStopStoring"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "MinSeedPeriod",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "MinSeedPeriod"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "StakeToSeedPeriod",
                      "fields": [
                        {
                          "type": 205,
                          "typeName": "StakeToSeedPeriod"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "SlashAmountPerMaxFileSize"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "StakeToChallengePeriod"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "CheckpointChallengePeriod"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MinChallengePeriod"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "SystemUtilisationLowerThresholdPercentage"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "SystemUtilisationUpperThresholdPercentage"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MostlyStablePrice"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MaxPrice"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MinPrice"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "UpperExponentFactor"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "LowerExponentFactor"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "ZeroSizeBucketFixedRate"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "IdealUtilisationRate"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "DecayRate"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MinimumTreasuryCut"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MaximumTreasuryCut"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "BspStopStoringFilePenalty"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "ProviderTopUpTtl"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "BasicReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "StandardReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "HighSecurityReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "SuperHighSecurityReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "UltraHighSecurityReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MaxReplicationTarget"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "TickRangeToMaximumThreshold"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "StorageRequestTtl"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MinWaitForStopStoring"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "MinSeedPeriod"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "StakeToSeedPeriod"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 207
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 207
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "RuntimeParametersValue"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RuntimeConfig",
                      "fields": [
                        {
                          "type": 208,
                          "typeName": "<dynamic_params::runtime_config::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Value"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "ParametersValue"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SlashAmountPerMaxFileSize",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "StakeToChallengePeriod",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "CheckpointChallengePeriod",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MinChallengePeriod",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "SystemUtilisationLowerThresholdPercentage",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "SystemUtilisationUpperThresholdPercentage",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "MostlyStablePrice",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "MaxPrice",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "MinPrice",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "UpperExponentFactor",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "LowerExponentFactor",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ZeroSizeBucketFixedRate",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "IdealUtilisationRate",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DecayRate",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "MinimumTreasuryCut",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "MaximumTreasuryCut",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "BspStopStoringFilePenalty",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "ProviderTopUpTtl",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "BasicReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "StandardReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "HighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "SuperHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UltraHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "MaxReplicationTarget",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "TickRangeToMaximumThreshold",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "StorageRequestTtl",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "MinWaitForStopStoring",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "MinSeedPeriod",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "StakeToSeedPeriod",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "Balance"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "def": {
                "sequence": {
                  "type": 212
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 51,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 214,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 13,
                      "typeName": "T::Hash"
                    },
                    {
                      "name": "check_version",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "Can be executed by every `origin`."
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                        "version!"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 217,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 144,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 14,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "authorize_upgrade_without_checks",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 13,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                        "later.",
                        "",
                        "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                        "example that the spec name remains the same and that the version number increases. Not",
                        "recommended for normal use. Use `authorize_upgrade` instead.",
                        "",
                        "This call requires Root origin."
                      ]
                    },
                    {
                      "name": "apply_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                        "",
                        "If the authorization required a version check, this call will ensure the spec name",
                        "remains unchanged and that the spec version has increased.",
                        "",
                        "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                        "the new `code` in the same block or attempt to schedule the upgrade.",
                        "",
                        "All origins are allowed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 217,
            "type": {
              "def": {
                "sequence": {
                  "type": 218
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "def": {
                "tuple": [
                  14,
                  14
                ]
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 220,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 221
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 221,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 221,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 221,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 10,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 222,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 222,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 222,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 224,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 12,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 214,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 214,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 227,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 228
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 228
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "def": {
                "sequence": {
                  "type": 229
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "def": {
                "tuple": [
                  74,
                  4
                ]
              }
            }
          },
          {
            "id": 230,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    },
                    {
                      "name": "MultiBlockMigrationsOngoing",
                      "index": 6,
                      "docs": [
                        "A multi-block migration is ongoing and prevents the current code from being replaced."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 7,
                      "docs": [
                        "No upgrade authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 8,
                      "docs": [
                        "The submitted code is not authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 232,
            "type": {
              "def": {
                "sequence": {
                  "type": 233
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "Ancestor"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "used_bandwidth",
                      "type": 234,
                      "typeName": "UsedBandwidth"
                    },
                    {
                      "name": "para_head_hash",
                      "type": 136,
                      "typeName": "Option<H>"
                    },
                    {
                      "name": "consumed_go_ahead_signal",
                      "type": 239,
                      "typeName": "Option<relay_chain::UpgradeGoAhead>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "UsedBandwidth"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ump_msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ump_total_bytes",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_outgoing",
                      "type": 235,
                      "typeName": "BTreeMap<ParaId, HrmpChannelUpdate>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 122
                },
                {
                  "name": "V",
                  "type": 236
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 237
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "HrmpChannelUpdate"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_bytes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "def": {
                "sequence": {
                  "type": 238
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "def": {
                "tuple": [
                  122,
                  236
                ]
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 240
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 240
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "UpgradeGoAhead"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Abort",
                      "index": 0
                    },
                    {
                      "name": "GoAhead",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "unincluded_segment",
                "SegmentTracker"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "used_bandwidth",
                      "type": 234,
                      "typeName": "UsedBandwidth"
                    },
                    {
                      "name": "hrmp_watermark",
                      "type": 135,
                      "typeName": "Option<relay_chain::BlockNumber>"
                    },
                    {
                      "name": "consumed_go_ahead_signal",
                      "type": 239,
                      "typeName": "Option<relay_chain::UpgradeGoAhead>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "PersistedValidationData"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 13
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_head",
                      "type": 243,
                      "typeName": "HeadData"
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "relay_parent_storage_root",
                      "type": 13,
                      "typeName": "H"
                    },
                    {
                      "name": "max_pov_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "HeadData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 245
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 245
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "UpgradeRestriction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Present",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 247,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 14
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 144
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "MessagingStateSnapshot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "dmq_mqc_head",
                      "type": 13,
                      "typeName": "relay_chain::Hash"
                    },
                    {
                      "name": "relay_dispatch_queue_remaining_capacity",
                      "type": 249,
                      "typeName": "RelayDispatchQueueRemainingCapacity"
                    },
                    {
                      "name": "ingress_channels",
                      "type": 250,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    },
                    {
                      "name": "egress_channels",
                      "type": 250,
                      "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "relay_state_snapshot",
                "RelayDispatchQueueRemainingCapacity"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "def": {
                "sequence": {
                  "type": 251
                }
              }
            }
          },
          {
            "id": 251,
            "type": {
              "def": {
                "tuple": [
                  122,
                  252
                ]
              }
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "AbridgedHrmpChannel"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "msg_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "total_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "mqc_head",
                      "type": 136,
                      "typeName": "Option<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "AbridgedHostConfiguration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_code_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_head_data_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_queue_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_upward_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hrmp_max_message_num_per_candidate",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "validation_upgrade_cooldown",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "validation_upgrade_delay",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "async_backing_params",
                      "type": 254,
                      "typeName": "AsyncBackingParams"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "polkadot_primitives",
                "v8",
                "async_backing",
                "AsyncBackingParams"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_candidate_depth",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "allowed_ancestry_len",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "MessageQueueChain"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "RelayHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 122
                },
                {
                  "name": "V",
                  "type": 255
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 257
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "def": {
                "sequence": {
                  "type": 258
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "tuple": [
                  122,
                  255
                ]
              }
            }
          },
          {
            "id": 259,
            "type": {
              "def": {
                "sequence": {
                  "type": 260
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 122
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 122,
                      "typeName": "Id"
                    },
                    {
                      "name": "data",
                      "type": 14,
                      "typeName": "alloc::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_validation_data",
                      "fields": [
                        {
                          "name": "data",
                          "type": 263,
                          "typeName": "ParachainInherentData"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current validation data.",
                        "",
                        "This should be invoked exactly once per block. It will panic at the finalization",
                        "phase if the call was not invoked.",
                        "",
                        "The dispatch origin for this call must be `Inherent`",
                        "",
                        "As a side effect, this function upgrades the current validation function",
                        "if the appropriate time has come."
                      ]
                    },
                    {
                      "name": "sudo_send_upward_message",
                      "fields": [
                        {
                          "name": "message",
                          "type": 14,
                          "typeName": "UpwardMessage"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "cumulus_primitives_parachain_inherent",
                "ParachainInherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validation_data",
                      "type": 242,
                      "typeName": "PersistedValidationData"
                    },
                    {
                      "name": "relay_chain_state",
                      "type": 246,
                      "typeName": "sp_trie::StorageProof"
                    },
                    {
                      "name": "downward_messages",
                      "type": 264,
                      "typeName": "Vec<InboundDownwardMessage>"
                    },
                    {
                      "name": "horizontal_messages",
                      "type": 266,
                      "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "def": {
                "sequence": {
                  "type": 265
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "msg",
                      "type": 14,
                      "typeName": "DownwardMessage"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 122
                },
                {
                  "name": "V",
                  "type": 267
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 269
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "def": {
                "sequence": {
                  "type": 268
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sent_at",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "data",
                      "type": 14,
                      "typeName": "alloc::vec::Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "def": {
                "sequence": {
                  "type": 270
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "def": {
                "tuple": [
                  122,
                  267
                ]
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "cumulus_pallet_parachain_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OverlappingUpgrades",
                      "index": 0,
                      "docs": [
                        "Attempt to upgrade validation function while existing upgrade pending."
                      ]
                    },
                    {
                      "name": "ProhibitedByPolkadot",
                      "index": 1,
                      "docs": [
                        "Polkadot currently prohibits this parachain from upgrading its validation function."
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 2,
                      "docs": [
                        "The supplied validation function has compiled into a blob larger than Polkadot is",
                        "willing to run."
                      ]
                    },
                    {
                      "name": "ValidationDataNotAvailable",
                      "index": 3,
                      "docs": [
                        "The inherent which supplies the validation data did not run this block."
                      ]
                    },
                    {
                      "name": "HostConfigurationNotAvailable",
                      "index": 4,
                      "docs": [
                        "The inherent which supplies the host configuration did not run this block."
                      ]
                    },
                    {
                      "name": "NotScheduled",
                      "index": 5,
                      "docs": [
                        "No validation function upgrade is currently scheduled."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No code upgrade has been authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The given code upgrade has not been authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 11,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "[`Config::MinimumPeriod`].",
                        "",
                        "The dispatch origin for this call must be _None_.",
                        "",
                        "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                        "that changing the complexity of this call could result exhausting the resources in a",
                        "block to execute any other calls.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "staging_parachain_info",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 275
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 277,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 74,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 276,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "def": {
                "sequence": {
                  "type": 275
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 280,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 74
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 74,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "def": {
                "sequence": {
                  "type": 279
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 282
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 287,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 283
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 283,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "storage_hub_runtime",
                "RuntimeHoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Providers",
                      "fields": [
                        {
                          "type": 284,
                          "typeName": "pallet_storage_providers::HoldReason"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "FileSystem",
                      "fields": [
                        {
                          "type": 285,
                          "typeName": "pallet_file_system::HoldReason"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "PaymentStreams",
                      "fields": [
                        {
                          "type": 286,
                          "typeName": "pallet_payment_streams::HoldReason"
                        }
                      ],
                      "index": 44
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "pallet_storage_providers",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StorageProviderDeposit",
                      "index": 0
                    },
                    {
                      "name": "BucketDeposit",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "pallet_file_system",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StorageRequestCreationHold",
                      "index": 0
                    },
                    {
                      "name": "FileDeletionRequestHold",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "pallet_payment_streams",
                "pallet",
                "HoldReason"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PaymentStreamDeposit",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "def": {
                "sequence": {
                  "type": 282
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 289
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 290,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 38
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 38,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "sequence": {
                  "type": 289
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 55,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 55,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                        "may be specified."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 55,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                        "kill the origin account.",
                        "",
                        "99% of the time you want [`transfer_allow_death`] instead.",
                        "",
                        "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Upgrade a specified account.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `who`: The account to be upgraded.",
                        "",
                        "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                        "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                        "possibility of churn)."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 55,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the regular balance of a given account.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_adjust_total_issuance",
                      "fields": [
                        {
                          "name": "direction",
                          "type": 294,
                          "typeName": "AdjustmentDirection"
                        },
                        {
                          "name": "delta",
                          "type": 55,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Adjust the total issuance in a saturating way.",
                        "",
                        "Can only be called by root and always needs a positive `delta`.",
                        "",
                        "# Example"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "value",
                          "type": 55,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "keep_alive",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Burn the specified liquid free balance from the origin account.",
                        "",
                        "If the origin's account ends up below the existential deposit as a result",
                        "of the burn and `keep_alive` is false, the account will be reaped.",
                        "",
                        "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                        "this `burn` operation will reduce total issuance by the amount _burned_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 38
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 293,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 54,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "def": {
                "compact": {
                  "type": 38
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AdjustmentDirection"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Increase",
                      "index": 0
                    },
                    {
                      "name": "Decrease",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    },
                    {
                      "name": "IssuanceDeactivated",
                      "index": 10,
                      "docs": [
                        "The issuance cannot be modified since it is already deactivated."
                      ]
                    },
                    {
                      "name": "DeltaZero",
                      "index": 11,
                      "docs": [
                        "The delta cannot be zero."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 298,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 298,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 298,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "remove_key",
                      "index": 4,
                      "docs": [
                        "Permanently removes the sudo key.",
                        "",
                        "**This cannot be un-done.**"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "storage_hub_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 216,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 262,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 272,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ParachainInfo",
                      "fields": [
                        {
                          "type": 273,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 291,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 297,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 299,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 300,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 303,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 304,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "CumulusXcm",
                      "fields": [
                        {
                          "type": 344,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 345,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Providers",
                      "fields": [
                        {
                          "type": 346,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Providers, Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "FileSystem",
                      "fields": [
                        {
                          "type": 347,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FileSystem, Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "ProofsDealer",
                      "fields": [
                        {
                          "type": 360,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ProofsDealer, Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Randomness",
                      "fields": [
                        {
                          "type": 361,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Randomness, Runtime>"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "PaymentStreams",
                      "fields": [
                        {
                          "type": 362,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PaymentStreams, Runtime>"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "BucketNfts",
                      "fields": [
                        {
                          "type": 363,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BucketNfts, Runtime>"
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 365,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>"
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Parameters",
                      "fields": [
                        {
                          "type": 388,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Parameters, Runtime>"
                        }
                      ],
                      "index": 51
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_invulnerables",
                      "fields": [
                        {
                          "name": "new",
                          "type": 41,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the list of invulnerable (fixed) collators. These collators must do some",
                        "preparation, namely to have registered session keys.",
                        "",
                        "The call will remove any accounts that have not registered keys from the set. That is,",
                        "it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as",
                        "acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.",
                        "",
                        "This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It",
                        "is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A",
                        "`batch_all` can also be used to enforce atomicity. If any candidates are included in",
                        "`new`, they should be removed with `remove_invulnerable_candidate` after execution.",
                        "",
                        "Must be called by the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "set_desired_candidates",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the ideal number of non-invulnerable collators. If lowering this number, then the",
                        "number of running collators could be higher than this figure. Aside from that edge case,",
                        "there should be no other way to have more candidates than the desired number.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "set_candidacy_bond",
                      "fields": [
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the candidacy bond amount.",
                        "",
                        "If the candidacy bond is increased by this call, all current candidates which have a",
                        "deposit lower than the new bond will be kicked from the list and get their deposits",
                        "back.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "register_as_candidate",
                      "index": 3,
                      "docs": [
                        "Register this account as a collator candidate. The account must (a) already have",
                        "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                        "",
                        "This call is not available to `Invulnerable` collators."
                      ]
                    },
                    {
                      "name": "leave_intent",
                      "index": 4,
                      "docs": [
                        "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                        "session change. The `CandidacyBond` will be unreserved immediately.",
                        "",
                        "This call will fail if the total number of candidates would drop below",
                        "`MinEligibleCollators`."
                      ]
                    },
                    {
                      "name": "add_invulnerable",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
                        "registered session keys. If `who` is a candidate, they will be removed.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "remove_invulnerable",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
                        "be sorted.",
                        "",
                        "The origin for this call must be the `UpdateOrigin`."
                      ]
                    },
                    {
                      "name": "update_bond",
                      "fields": [
                        {
                          "name": "new_deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.",
                        "",
                        "Setting a `new_deposit` that is lower than the current deposit while `origin` is",
                        "occupying a top-`DesiredCandidates` slot is not allowed.",
                        "",
                        "This call will fail if `origin` is not a collator candidate, the updated bond is lower",
                        "than the minimum candidacy bond, and/or the amount cannot be reserved."
                      ]
                    },
                    {
                      "name": "take_candidate_slot",
                      "fields": [
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The caller `origin` replaces a candidate `target` in the collator candidate list by",
                        "reserving `deposit`. The amount `deposit` reserved by the caller must be greater than",
                        "the existing bond of the target it is trying to replace.",
                        "",
                        "This call will fail if the caller is already a collator candidate or invulnerable, the",
                        "caller does not have registered session keys, the target is not a collator candidate,",
                        "and/or the `deposit` amount cannot be reserved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 301,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "## Complexity",
                        "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                        "  fixed."
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "## Complexity",
                        "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "storage_hub_runtime",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 302,
                      "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "suspend_xcm_execution",
                      "index": 1,
                      "docs": [
                        "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "resume_xcm_execution",
                      "index": 2,
                      "docs": [
                        "Resumes all XCM executions for the XCMP queue.",
                        "",
                        "Note that this function doesn't change the status of the in/out bound channels.",
                        "",
                        "- `origin`: Must pass `ControllerOrigin`."
                      ]
                    },
                    {
                      "name": "update_suspend_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Overwrites the number of pages which must be in the queue for the other side to be",
                        "told to suspend their sending.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.suspend_value`"
                      ]
                    },
                    {
                      "name": "update_drop_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Overwrites the number of pages which must be in the queue after which we drop any",
                        "further messages from the channel.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                      ]
                    },
                    {
                      "name": "update_resume_threshold",
                      "fields": [
                        {
                          "name": "new",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Overwrites the number of pages which the queue must be reduced to before it signals",
                        "that message sending may recommence after it has been suspended.",
                        "",
                        "- `origin`: Must pass `Root`.",
                        "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "send",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "message",
                          "type": 305,
                          "typeName": "Box<VersionedXcm<()>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` chain.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve.",
                        "",
                        "`assets` must have same reserve location and may not be teleportable to `dest`.",
                        " - `assets` have local reserve: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `assets` have destination reserve: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                        "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                        "   to mint and deposit reserve-based assets to `beneficiary`.",
                        "",
                        "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                        "with all fees taken as needed from the asset.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees."
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "message",
                          "type": 331,
                          "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute an XCM message from a local, signed, origin.",
                        "",
                        "An event is deposited indicating whether `msg` could be executed completely or only",
                        "partially.",
                        "",
                        "No more than `max_weight` will be used in its attempted execution. If this is less than",
                        "the maximum amount of weight that the message could take to be executed, then no",
                        "execution attempt will be made."
                      ]
                    },
                    {
                      "name": "force_xcm_version",
                      "fields": [
                        {
                          "name": "location",
                          "type": 47,
                          "typeName": "Box<Location>"
                        },
                        {
                          "name": "version",
                          "type": 4,
                          "typeName": "XcmVersion"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Extoll that a particular destination can be communicated with through a particular",
                        "version of XCM.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The destination that is being described.",
                        "- `xcm_version`: The latest version of XCM that `location` supports."
                      ]
                    },
                    {
                      "name": "force_default_xcm_version",
                      "fields": [
                        {
                          "name": "maybe_xcm_version",
                          "type": 135,
                          "typeName": "Option<XcmVersion>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                        "version a destination can accept is unknown).",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                      ]
                    },
                    {
                      "name": "force_subscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Ask a location to notify us regarding their XCM version and any changes to it.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we should subscribe for XCM version notifications."
                      ]
                    },
                    {
                      "name": "force_unsubscribe_version_notify",
                      "fields": [
                        {
                          "name": "location",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Require that a particular destination should no longer notify us regarding any XCM",
                        "version changes.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `location`: The location to which we are currently subscribed for XCM version",
                        "  notifications which we no longer desire."
                      ]
                    },
                    {
                      "name": "limited_reserve_transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve.",
                        "",
                        "`assets` must have same reserve location and may not be teleportable to `dest`.",
                        " - `assets` have local reserve: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `assets` have destination reserve: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                        "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                        "   to mint and deposit reserve-based assets to `beneficiary`.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "limited_teleport_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Teleport some assets from the local chain to some destination chain.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` chain.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "force_suspension",
                      "fields": [
                        {
                          "name": "suspended",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Set or unset the global suspension state of the XCM executor.",
                        "",
                        "- `origin`: Must be an origin specified by AdminOrigin.",
                        "- `suspended`: `true` to suspend, `false` to resume."
                      ]
                    },
                    {
                      "name": "transfer_assets",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "fee_asset_item",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Transfer some assets from the local chain to the destination chain through their local,",
                        "destination or remote reserve, or through teleports.",
                        "",
                        "Fee payment on the destination side is made from the asset in the `assets` vector of",
                        "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                        "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                        "operation will fail and the sent assets may be at risk.",
                        "",
                        "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                        "to `dest`, no limitations imposed on `fees`.",
                        " - for local reserve: transfer assets to sovereign account of destination chain and",
                        "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                        "   `beneficiary`.",
                        " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                        "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                        "   to `beneficiary`.",
                        " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                        "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                        "   and deposit reserve-based assets to `beneficiary`.",
                        " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                        "   assets and deposit them to `beneficiary`.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                        "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                        "  from relay to parachain.",
                        "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                        "  generally be an `AccountId32` value.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                        "  fees.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    },
                    {
                      "name": "claim_assets",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "beneficiary",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                        "",
                        "- `origin`: Anyone can call this extrinsic.",
                        "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                        "was the latest when they were trapped.",
                        "- `beneficiary`: The location/account where the claimed assets will be deposited."
                      ]
                    },
                    {
                      "name": "transfer_assets_using_type_and_then",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 118,
                          "typeName": "Box<VersionedLocation>"
                        },
                        {
                          "name": "assets",
                          "type": 93,
                          "typeName": "Box<VersionedAssets>"
                        },
                        {
                          "name": "assets_transfer_type",
                          "type": 342,
                          "typeName": "Box<TransferType>"
                        },
                        {
                          "name": "remote_fees_id",
                          "type": 343,
                          "typeName": "Box<VersionedAssetId>"
                        },
                        {
                          "name": "fees_transfer_type",
                          "type": 342,
                          "typeName": "Box<TransferType>"
                        },
                        {
                          "name": "custom_xcm_on_dest",
                          "type": 305,
                          "typeName": "Box<VersionedXcm<()>>"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Transfer assets from the local chain to the destination chain using explicit transfer",
                        "types for assets and fees.",
                        "",
                        "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                        "provide the `assets_transfer_type` to be used for `assets`:",
                        " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                        "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                        "   assets to `beneficiary`.",
                        " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                        "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                        "   deposit them to `beneficiary`.",
                        " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                        "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                        "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                        "   the remote `reserve` is Asset Hub.",
                        " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                        "   mint/teleport assets and deposit them to `beneficiary`.",
                        "",
                        "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                        "buy execution using transferred `assets` identified by `remote_fees_id`.",
                        "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                        "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                        "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                        "at risk.",
                        "",
                        "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                        "specified through `fees_transfer_type`.",
                        "",
                        "The caller needs to specify what should happen to the transferred assets once they reach",
                        "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                        "contains the instructions to execute on `dest` as a final step.",
                        "  This is usually as simple as:",
                        "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                        "  but could be something more exotic like sending the `assets` even further.",
                        "",
                        "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                        "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                        "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                        "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                        "  parachain across a bridge to another ecosystem destination.",
                        "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                        "  fee on the `dest` (and possibly reserve) chains.",
                        "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                        "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                        "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                        "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                        "  transfer, which also determines what happens to the assets on the destination chain.",
                        "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 306,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 318,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 65,
                          "typeName": "v4::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 307,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 307,
            "type": {
              "def": {
                "sequence": {
                  "type": 308
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 309,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 313,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 87,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 96,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 317,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 306,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 306,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 310,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 311
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 311
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "def": {
                "tuple": [
                  4,
                  312
                ]
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Overflow",
                      "index": 0
                    },
                    {
                      "name": "Unimplemented",
                      "index": 1
                    },
                    {
                      "name": "UntrustedReserveLocation",
                      "index": 2
                    },
                    {
                      "name": "UntrustedTeleportLocation",
                      "index": 3
                    },
                    {
                      "name": "MultiLocationFull",
                      "index": 4
                    },
                    {
                      "name": "MultiLocationNotInvertible",
                      "index": 5
                    },
                    {
                      "name": "BadOrigin",
                      "index": 6
                    },
                    {
                      "name": "InvalidLocation",
                      "index": 7
                    },
                    {
                      "name": "AssetNotFound",
                      "index": 8
                    },
                    {
                      "name": "FailedToTransactAsset",
                      "index": 9
                    },
                    {
                      "name": "NotWithdrawable",
                      "index": 10
                    },
                    {
                      "name": "LocationCannotHold",
                      "index": 11
                    },
                    {
                      "name": "ExceedsMaxMessageSize",
                      "index": 12
                    },
                    {
                      "name": "DestinationUnsupported",
                      "index": 13
                    },
                    {
                      "name": "Transport",
                      "index": 14
                    },
                    {
                      "name": "Unroutable",
                      "index": 15
                    },
                    {
                      "name": "UnknownClaim",
                      "index": 16
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 17
                    },
                    {
                      "name": "MaxWeightInvalid",
                      "index": 18
                    },
                    {
                      "name": "NotHoldingFees",
                      "index": 19
                    },
                    {
                      "name": "TooExpensive",
                      "index": 20
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "u64"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UnhandledXcmVersion",
                      "index": 22
                    },
                    {
                      "name": "WeightLimitReached",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Barrier",
                      "index": 24
                    },
                    {
                      "name": "WeightNotComputable",
                      "index": 25
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "xcm",
                "v2",
                "OriginKind"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "SovereignAccount",
                      "index": 1
                    },
                    {
                      "name": "Superuser",
                      "index": 2
                    },
                    {
                      "name": "Xcm",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 315,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 97,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 316,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "xcm",
                "v2",
                "WeightLimit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unlimited",
                      "index": 0
                    },
                    {
                      "name": "Limited",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 319,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "def": {
                "sequence": {
                  "type": 320
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 321,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 86,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 87,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 318,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 318,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 115,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 112,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Response"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Null",
                      "index": 0
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecutionResult",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Version",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "super::Version"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "PalletsInfo",
                      "fields": [
                        {
                          "type": 322,
                          "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "DispatchResult",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 323
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 325,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "xcm",
                "v3",
                "PalletInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 324,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "module_name",
                      "type": 324,
                      "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                    },
                    {
                      "name": "major",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "minor",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "patch",
                      "type": 51,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 325,
            "type": {
              "def": {
                "sequence": {
                  "type": 323
                }
              }
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 111
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 111
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "destination",
                      "type": 111,
                      "typeName": "MultiLocation"
                    },
                    {
                      "name": "query_id",
                      "type": 11,
                      "typeName": "QueryId"
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Definite",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Wild",
                      "fields": [
                        {
                          "type": 329,
                          "typeName": "WildMultiAsset"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "All",
                      "index": 0
                    },
                    {
                      "name": "AllOf",
                      "fields": [
                        {
                          "name": "id",
                          "type": 110,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 330,
                          "typeName": "WildFungibility"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AllCounted",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AllOfCounted",
                      "fields": [
                        {
                          "name": "id",
                          "type": 110,
                          "typeName": "AssetId"
                        },
                        {
                          "name": "fun",
                          "type": 330,
                          "typeName": "WildFungibility"
                        },
                        {
                          "name": "count",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fungible",
                      "index": 0
                    },
                    {
                      "name": "NonFungible",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "xcm",
                "VersionedXcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 332,
                          "typeName": "v2::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 336,
                          "typeName": "v3::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 339,
                          "typeName": "v4::Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Xcm"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 333,
                      "typeName": "Vec<Instruction<RuntimeCall>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "def": {
                "sequence": {
                  "type": 334
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "path": [
                "xcm",
                "v2",
                "Instruction"
              ],
              "params": [
                {
                  "name": "RuntimeCall",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 309,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_type",
                          "type": 313,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 11,
                          "typeName": "u64"
                        },
                        {
                          "name": "call",
                          "type": 335,
                          "typeName": "DoubleEncoded<RuntimeCall>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 99,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "beneficiary",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_assets",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "receive",
                          "type": 94,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 306,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "QueryHolding",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "dest",
                          "type": 98,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "assets",
                          "type": 314,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 96,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 317,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 332,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 332,
                          "typeName": "Xcm<RuntimeCall>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 94,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 98,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "encoded",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 337,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 337,
            "type": {
              "def": {
                "sequence": {
                  "type": 338
                }
              }
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "xcm",
                "v3",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 321,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 86,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 335,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "InteriorMultiLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 111,
                          "typeName": "MultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 328,
                          "typeName": "MultiAssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 336,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 336,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 107,
                          "typeName": "MultiAssets"
                        },
                        {
                          "name": "ticket",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "MultiAssets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 327,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 113,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 115,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 112,
                          "typeName": "InteriorMultiLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 318,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "unlocker",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "target",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "owner",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 109,
                          "typeName": "MultiAsset"
                        },
                        {
                          "name": "locker",
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "MultiLocation"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 326,
                          "typeName": "Option<MultiLocation>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Xcm"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 340,
                      "typeName": "Vec<Instruction<Call>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 340,
            "type": {
              "def": {
                "sequence": {
                  "type": 341
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "staging_xcm",
                "v4",
                "Instruction"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "WithdrawAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ReserveAssetDeposited",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ReceiveTeleportedAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "QueryResponse",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "response",
                          "type": 76,
                          "typeName": "Response"
                        },
                        {
                          "name": "max_weight",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "querier",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "TransferAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "beneficiary",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "TransferReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Transact",
                      "fields": [
                        {
                          "name": "origin_kind",
                          "type": 86,
                          "typeName": "OriginKind"
                        },
                        {
                          "name": "require_weight_at_most",
                          "type": 10,
                          "typeName": "Weight"
                        },
                        {
                          "name": "call",
                          "type": 335,
                          "typeName": "DoubleEncoded<Call>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "HrmpNewChannelOpenRequest",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_message_size",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "max_capacity",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "HrmpChannelAccepted",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "HrmpChannelClosing",
                      "fields": [
                        {
                          "name": "initiator",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "sender",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "recipient",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "ClearOrigin",
                      "index": 10
                    },
                    {
                      "name": "DescendOrigin",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "InteriorLocation"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "ReportError",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DepositAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "beneficiary",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DepositReserveAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "ExchangeAsset",
                      "fields": [
                        {
                          "name": "give",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "want",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "maximal",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "InitiateReserveWithdraw",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "reserve",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "InitiateTeleport",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        },
                        {
                          "name": "dest",
                          "type": 47,
                          "typeName": "Location"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "ReportHolding",
                      "fields": [
                        {
                          "name": "response_info",
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        },
                        {
                          "name": "assets",
                          "type": 89,
                          "typeName": "AssetFilter"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BuyExecution",
                      "fields": [
                        {
                          "name": "fees",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RefundSurplus",
                      "index": 20
                    },
                    {
                      "name": "SetErrorHandler",
                      "fields": [
                        {
                          "type": 339,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "SetAppendix",
                      "fields": [
                        {
                          "type": 339,
                          "typeName": "Xcm<Call>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "ClearError",
                      "index": 23
                    },
                    {
                      "name": "ClaimAsset",
                      "fields": [
                        {
                          "name": "assets",
                          "type": 68,
                          "typeName": "Assets"
                        },
                        {
                          "name": "ticket",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Trap",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "SubscribeVersion",
                      "fields": [
                        {
                          "name": "query_id",
                          "type": 11,
                          "typeName": "QueryId"
                        },
                        {
                          "name": "max_response_weight",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "UnsubscribeVersion",
                      "index": 27
                    },
                    {
                      "name": "BurnAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "ExpectAsset",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "Assets"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ExpectOrigin",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "ExpectError",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "Option<(u32, Error)>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "ExpectTransactStatus",
                      "fields": [
                        {
                          "type": 83,
                          "typeName": "MaybeErrorCode"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "QueryPallet",
                      "fields": [
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "response_info",
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "ExpectPallet",
                      "fields": [
                        {
                          "name": "index",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "module_name",
                          "type": 14,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "crate_major",
                          "type": 51,
                          "typeName": "u32"
                        },
                        {
                          "name": "min_crate_minor",
                          "type": 51,
                          "typeName": "u32"
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "ReportTransactStatus",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "QueryResponseInfo"
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "ClearTransactStatus",
                      "index": 36
                    },
                    {
                      "name": "UniversalOrigin",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "Junction"
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "ExportMessage",
                      "fields": [
                        {
                          "name": "network",
                          "type": 53,
                          "typeName": "NetworkId"
                        },
                        {
                          "name": "destination",
                          "type": 48,
                          "typeName": "InteriorLocation"
                        },
                        {
                          "name": "xcm",
                          "type": 65,
                          "typeName": "Xcm<()>"
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "LockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "unlocker",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "UnlockAsset",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "target",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "NoteUnlockable",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "owner",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "RequestUnlock",
                      "fields": [
                        {
                          "name": "asset",
                          "type": 70,
                          "typeName": "Asset"
                        },
                        {
                          "name": "locker",
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "SetFeesMode",
                      "fields": [
                        {
                          "name": "jit_withdraw",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "SetTopic",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "ClearTopic",
                      "index": 45
                    },
                    {
                      "name": "AliasOrigin",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "Location"
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "UnpaidExecution",
                      "fields": [
                        {
                          "name": "weight_limit",
                          "type": 92,
                          "typeName": "WeightLimit"
                        },
                        {
                          "name": "check_origin",
                          "type": 85,
                          "typeName": "Option<Location>"
                        }
                      ],
                      "index": 47
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "staging_xcm_executor",
                "traits",
                "asset_transfer",
                "TransferType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Teleport",
                      "index": 0
                    },
                    {
                      "name": "LocalReserve",
                      "index": 1
                    },
                    {
                      "name": "DestinationReserve",
                      "index": 2
                    },
                    {
                      "name": "RemoteReserve",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "VersionedLocation"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "xcm",
                "VersionedAssetId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "v3::AssetId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "v4::AssetId"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "cumulus_pallet_xcm",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "reap_page",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page_index",
                          "type": 4,
                          "typeName": "PageIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Remove a page which has no more messages remaining to be processed or is stale."
                      ]
                    },
                    {
                      "name": "execute_overweight",
                      "fields": [
                        {
                          "name": "message_origin",
                          "type": 121,
                          "typeName": "MessageOriginOf<T>"
                        },
                        {
                          "name": "page",
                          "type": 4,
                          "typeName": "PageIndex"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::Size"
                        },
                        {
                          "name": "weight_limit",
                          "type": 10,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Execute an overweight message.",
                        "",
                        "Temporary processing errors will be propagated whereas permanent errors are treated",
                        "as success condition.",
                        "",
                        "- `origin`: Must be `Signed`.",
                        "- `message_origin`: The origin from which the message to be executed arrived.",
                        "- `page`: The page in the queue in which the message to be executed is sitting.",
                        "- `index`: The index into the queue of the message to be executed.",
                        "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                        "  of the message.",
                        "",
                        "Benchmark complexity considerations: O(index + weight_limit)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "pallet_storage_providers",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_msp_sign_up",
                      "fields": [
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "value_prop_price_per_giga_unit_of_data_per_block",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "commitment",
                          "type": 130,
                          "typeName": "Commitment<T>"
                        },
                        {
                          "name": "value_prop_max_data_limit",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "payment_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatchable extrinsic that allows users to request to sign up as a Main Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to sign up as a Main Storage Provider.",
                        "",
                        "Funds proportional to the capacity requested are reserved (held) from the account.",
                        "",
                        "Parameters:",
                        "- `capacity`: The total amount of data that the Main Storage Provider will be able to store.",
                        "- `multiaddresses`: The vector of multiaddresses that the signer wants to register (according to the",
                        "[Multiaddr spec](https://github.com/multiformats/multiaddr))",
                        "- `value_prop`: The value proposition that the signer will provide as a Main Storage Provider to",
                        "users and wants to register on-chain. It could be data limits, communication protocols to access the user's",
                        "data, and more.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is not already registered as either a MSP or BSP",
                        "3. Check that the multiaddress is valid",
                        "4. Check that the data to be stored is greater than the minimum required by the runtime.",
                        "5. Calculate how much deposit will the signer have to pay using the amount of data it wants to store",
                        "6. Check that the signer has enough funds to pay the deposit",
                        "7. Hold the deposit from the signer",
                        "8. Update the Sign Up Requests storage to add the signer as requesting to sign up as a MSP",
                        "",
                        "Emits `MspRequestSignUpSuccess` event when successful."
                      ]
                    },
                    {
                      "name": "request_bsp_sign_up",
                      "fields": [
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "payment_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatchable extrinsic that allows users to sign up as a Backup Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to sign up as a Backup Storage Provider.",
                        "",
                        "Funds proportional to the capacity requested are reserved (held) from the account.",
                        "",
                        "Parameters:",
                        "- `capacity`: The total amount of data that the Backup Storage Provider will be able to store.",
                        "- `multiaddresses`: The vector of multiaddresses that the signer wants to register (according to the",
                        "[Multiaddr spec](https://github.com/multiformats/multiaddr))",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is not already registered as either a MSP or BSP",
                        "3. Check that the multiaddress is valid",
                        "4. Check that the data to be stored is greater than the minimum required by the runtime",
                        "5. Calculate how much deposit will the signer have to pay using the amount of data it wants to store",
                        "6. Check that the signer has enough funds to pay the deposit",
                        "7. Hold the deposit from the signer",
                        "8. Update the Sign Up Requests storage to add the signer as requesting to sign up as a BSP",
                        "",
                        "Emits `BspRequestSignUpSuccess` event when successful."
                      ]
                    },
                    {
                      "name": "confirm_sign_up",
                      "fields": [
                        {
                          "name": "provider_account",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatchable extrinsic that allows users to confirm their sign up as a Storage Provider, either MSP or BSP.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that requested to sign up as a Storage Provider, except when providing a",
                        "`provider_account` parameter, in which case the origin can be any account.",
                        "",
                        "Parameters:",
                        "- `provider_account`: The account that requested to sign up as a Storage Provider. If not provided, the signer",
                        "will be considered the account that requested to sign up.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed",
                        "2. Check that the account received has requested to register as a SP",
                        "3. Check that the current randomness is sufficiently fresh to be used as a salt for that request",
                        "4. Check that the request has not expired",
                        "5. Register the signer as a MSP or BSP with the data provided in the request",
                        "",
                        "Emits `MspSignUpSuccess` or `BspSignUpSuccess` event when successful, depending on the type of sign up.",
                        "",
                        "Notes:",
                        "- This extrinsic could be called by the user itself or by a third party",
                        "- The deposit that the user has to pay to register as a SP is held when the user requests to register as a SP",
                        "- If this extrinsic is successful, it will be free for the caller, to incentive state debloating"
                      ]
                    },
                    {
                      "name": "cancel_sign_up",
                      "index": 3,
                      "docs": [
                        "Dispatchable extrinsic that allows a user with a pending Sign Up Request to cancel it, getting the deposit back.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that requested to sign up as a Storage Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer has requested to sign up as a SP",
                        "3. Delete the request from the Sign Up Requests storage",
                        "4. Return the deposit to the signer",
                        "",
                        "Emits `SignUpRequestCanceled` event when successful."
                      ]
                    },
                    {
                      "name": "msp_sign_off",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Dispatchable extrinsic that allows users to sign off as a Main Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to sign off as a Main Storage Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is registered as a MSP",
                        "3. Check that the MSP has no storage assigned to it (no buckets or data used by it)",
                        "4. Update the MSPs storage, removing the signer as an MSP",
                        "5. Return the deposit to the signer",
                        "6. Decrement the storage that holds total amount of MSPs currently in the system",
                        "",
                        "Emits `MspSignOffSuccess` event when successful."
                      ]
                    },
                    {
                      "name": "bsp_sign_off",
                      "index": 5,
                      "docs": [
                        "Dispatchable extrinsic that allows users to sign off as a Backup Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to sign off as a Backup Storage Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is registered as a BSP",
                        "3. Check that the BSP has no storage assigned to it",
                        "4. Update the BSPs storage, removing the signer as an BSP",
                        "5. Update the total capacity of all BSPs, removing the capacity of the signer",
                        "6. Return the deposit to the signer",
                        "7. Decrement the storage that holds total amount of BSPs currently in the system",
                        "",
                        "Emits `BspSignOffSuccess` event when successful."
                      ]
                    },
                    {
                      "name": "change_capacity",
                      "fields": [
                        {
                          "name": "new_capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Dispatchable extrinsic that allows users to change their amount of stored data",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to change its capacity.",
                        "",
                        "Parameters:",
                        "- `new_capacity`: The new total amount of data that the Storage Provider wants to be able to store.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is registered as a SP",
                        "3. Check that enough time has passed since the last time the SP changed its capacity",
                        "4. Check that the new capacity is greater than the minimum required by the runtime",
                        "5. Check that the new capacity is greater than the data used by this SP",
                        "6. Calculate the new deposit needed for this new capacity",
                        "7. Check to see if the new deposit needed is greater or less than the current deposit",
                        "\ta. If the new deposit is greater than the current deposit:",
                        "\t\ti. Check that the signer has enough funds to pay this extra deposit",
                        "\t\tii. Hold the extra deposit from the signer",
                        "\tb. If the new deposit is less than the current deposit, return the held difference to the signer",
                        "7. Update the SPs storage to change the total data",
                        "8. If user is a BSP, update the total capacity of the network (sum of all capacities of BSPs)",
                        "",
                        "Emits `CapacityChanged` event when successful."
                      ]
                    },
                    {
                      "name": "add_value_prop",
                      "fields": [
                        {
                          "name": "price_per_giga_unit_of_data_per_block",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "commitment",
                          "type": 130,
                          "typeName": "Commitment<T>"
                        },
                        {
                          "name": "bucket_data_limit",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Dispatchable extrinsic only callable by an MSP that allows it to add a value proposition to its service",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to add a value proposition.",
                        "",
                        "Emits `ValuePropAdded` event when successful."
                      ]
                    },
                    {
                      "name": "make_value_prop_unavailable",
                      "fields": [
                        {
                          "name": "value_prop_id",
                          "type": 13,
                          "typeName": "ValuePropIdFor<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Dispatchable extrinsic only callable by an MSP that allows it to make a value proposition unavailable.",
                        "",
                        "This operation cannot be reversed. You can only add new value propositions.",
                        "This will not affect existing buckets which are using this value proposition."
                      ]
                    },
                    {
                      "name": "add_multiaddress",
                      "fields": [
                        {
                          "name": "new_multiaddress",
                          "type": 126,
                          "typeName": "MultiAddress<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Dispatchable extrinsic that allows BSPs and MSPs to add a new multiaddress to their account.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to add a new multiaddress.",
                        "",
                        "Parameters:",
                        "- `new_multiaddress`: The new multiaddress that the signer wants to add to its account.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is registered as a MSP or BSP.",
                        "3. Check that the Provider has not reached the maximum amount of multiaddresses.",
                        "4. Check that the multiaddress is valid (size and any other relevant checks). TODO: Implement this.",
                        "5. Update the Provider's storage to add the multiaddress.",
                        "",
                        "Emits `MultiAddressAdded` event when successful."
                      ]
                    },
                    {
                      "name": "remove_multiaddress",
                      "fields": [
                        {
                          "name": "multiaddress",
                          "type": 126,
                          "typeName": "MultiAddress<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Dispatchable extrinsic that allows BSPs and MSPs to remove an existing multiaddress from their account.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the account that wants to remove a multiaddress.",
                        "",
                        "Parameters:",
                        "- `multiaddress`: The multiaddress that the signer wants to remove from its account.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the signer is registered as a MSP or BSP.",
                        "3. Check that the multiaddress exists in the Provider's account.",
                        "4. Update the Provider's storage to remove the multiaddress.",
                        "",
                        "Emits `MultiAddressRemoved` event when successful."
                      ]
                    },
                    {
                      "name": "force_msp_sign_up",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "MainStorageProviderId<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "value_prop_price_per_giga_unit_of_data_per_block",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "commitment",
                          "type": 130,
                          "typeName": "Commitment<T>"
                        },
                        {
                          "name": "value_prop_max_data_limit",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "payment_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Dispatchable extrinsic that allows to forcefully and automatically sign up a Main Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Root.",
                        "The `who` parameter is the account that wants to sign up as a Main Storage Provider.",
                        "",
                        "Funds proportional to the capacity requested are reserved (held) from the account passed as the `who` parameter.",
                        "",
                        "Parameters:",
                        "- `who`: The account that wants to sign up as a Main Storage Provider.",
                        "- `msp_id`: The Main Storage Provider ID that the account passed as the `who` parameter is requesting to sign up as.",
                        "- `capacity`: The total amount of data that the Main Storage Provider will be able to store.",
                        "- `multiaddresses`: The vector of multiaddresses that the signer wants to register (according to the",
                        "[Multiaddr spec](https://github.com/multiformats/multiaddr))",
                        "- `value_prop`: The value proposition that the signer will provide as a Main Storage Provider to",
                        "users and wants to register on-chain. It could be data limits, communication protocols to access the user's",
                        "data, and more.",
                        "",
                        "This extrinsic will perform the steps of:",
                        "1. [request_msp_sign_up](crate::dispatchables::request_msp_sign_up)",
                        "2. [confirm_sign_up](crate::dispatchables::confirm_sign_up)",
                        "",
                        "Emits `MspRequestSignUpSuccess` and `MspSignUpSuccess` events when successful."
                      ]
                    },
                    {
                      "name": "force_bsp_sign_up",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "bsp_id",
                          "type": 13,
                          "typeName": "BackupStorageProviderId<T>"
                        },
                        {
                          "name": "capacity",
                          "type": 12,
                          "typeName": "StorageDataUnit<T>"
                        },
                        {
                          "name": "multiaddresses",
                          "type": 125,
                          "typeName": "Multiaddresses<T>"
                        },
                        {
                          "name": "payment_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "weight",
                          "type": 135,
                          "typeName": "Option<ReputationWeightType<T>>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Dispatchable extrinsic that allows to forcefully and automatically sing up a Backup Storage Provider.",
                        "",
                        "The dispatch origin for this call must be Root.",
                        "The `who` parameter is the account that wants to sign up as a Backup Storage Provider.",
                        "",
                        "Funds proportional to the capacity requested are reserved (held) from the account passed as the `who` parameter.",
                        "",
                        "Parameters:",
                        "- `who`: The account that wants to sign up as a Backup Storage Provider.",
                        "- `bsp_id`: The Backup Storage Provider ID that the account passed as the `who` parameter is requesting to sign up as.",
                        "- `capacity`: The total amount of data that the Backup Storage Provider will be able to store.",
                        "- `multiaddresses`: The vector of multiaddresses that the signer wants to register (according to the",
                        "[Multiaddr spec](https://github.com/multiformats/multiaddr))",
                        "",
                        "This extrinsic will perform the steps of:",
                        "1. [request_bsp_sign_up](crate::dispatchables::request_bsp_sign_up)",
                        "2. [confirm_sign_up](crate::dispatchables::confirm_sign_up)",
                        "",
                        "Emits `BspRequestSignUpSuccess` and `BspSignUpSuccess` events when successful."
                      ]
                    },
                    {
                      "name": "slash",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Dispatchable extrinsic to slash a _slashable_ Storage Provider.",
                        "",
                        "A Storage Provider is _slashable_ iff it has failed to respond to challenges for providing proofs of storage.",
                        "In the context of the StorageHub protocol, the proofs-dealer pallet marks a Storage Provider as _slashable_ when it fails to respond to challenges.",
                        "",
                        "This is a free operation to incentivise the community to slash misbehaving providers."
                      ]
                    },
                    {
                      "name": "top_up_deposit",
                      "index": 14,
                      "docs": [
                        "Dispatchable extrinsic to top-up the deposit of a Storage Provider.",
                        "",
                        "The dispatch origin for this call must be signed."
                      ]
                    },
                    {
                      "name": "delete_provider",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Delete a provider from the system.",
                        "",
                        "This can only be done if the following conditions are met:",
                        "- The provider is insolvent.",
                        "- The provider has no active payment streams.",
                        "",
                        "This is a free operation and can be called by anyone with a signed transaction.",
                        "",
                        "You can utilize the runtime API `can_delete_provider` to check if a provider can be deleted",
                        "to automate the process.",
                        "",
                        "Emits `MspDeleted` or `BspDeleted` event when successful.",
                        "",
                        "This operation is free if successful to encourage the community to delete insolvent providers,",
                        "debloating the state."
                      ]
                    },
                    {
                      "name": "stop_all_cycles",
                      "index": 16,
                      "docs": [
                        "BSP operation to stop all of your automatic cycles.",
                        "",
                        "This includes:",
                        "",
                        "- Commit reveal randomness cycle",
                        "- Proof challenge cycle",
                        "",
                        "If you are an BSP, the only requirement that must be met is that your root is the default one (an empty root)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchables (extrinsics) exposed by this pallet"
              ]
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "pallet_file_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_bucket",
                      "fields": [
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "name",
                          "type": 126,
                          "typeName": "BucketNameFor<T>"
                        },
                        {
                          "name": "private",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "value_prop_id",
                          "type": 136,
                          "typeName": "Option<ValuePropId<T>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "request_move_bucket",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "new_msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "msp_respond_move_bucket_request",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "response",
                          "type": 348,
                          "typeName": "BucketMoveRequestResponse"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "update_bucket_privacy",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "private",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "create_and_associate_collection_with_bucket",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Create and associate a collection with a bucket."
                      ]
                    },
                    {
                      "name": "delete_bucket",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatchable extrinsic that allows a User to delete any of their buckets if it is currently empty.",
                        "This way, the User is allowed to remove now unused buckets to recover their deposit for them.",
                        "",
                        "The User must provide the BucketId of the bucket they want to delete, which should correspond to a",
                        "bucket that is both theirs and currently empty.",
                        "",
                        "To check if a bucket is empty, we compare its current root with the one of an empty trie."
                      ]
                    },
                    {
                      "name": "issue_storage_request",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "msp_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "peer_ids",
                          "type": 125,
                          "typeName": "PeerIds<T>"
                        },
                        {
                          "name": "replication_target",
                          "type": 349,
                          "typeName": "ReplicationTarget<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Issue a new storage request for a file"
                      ]
                    },
                    {
                      "name": "revoke_storage_request",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Revoke storage request"
                      ]
                    },
                    {
                      "name": "msp_respond_storage_requests_multiple_buckets",
                      "fields": [
                        {
                          "name": "storage_request_msp_response",
                          "type": 350,
                          "typeName": "StorageRequestMspResponse<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Used by a MSP to accept or decline storage requests in batches, grouped by bucket.",
                        "",
                        "This follows a best-effort strategy, meaning that all file keys will be processed and declared to have successfully be",
                        "accepted, rejected or have failed to be processed in the results of the event emitted.",
                        "",
                        "The MSP has to provide a file proof for all the file keys that are being accepted and a non-inclusion proof for the file keys",
                        "in the bucket's Merkle Patricia Forest. The file proofs for the file keys is necessary to verify that",
                        "the MSP actually has the files, while the non-inclusion proof is necessary to verify that the MSP",
                        "wasn't storing it before."
                      ]
                    },
                    {
                      "name": "msp_stop_storing_bucket",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "bsp_volunteer",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Used by a BSP to volunteer for storing a file.",
                        "",
                        "The transaction will fail if the XOR between the file ID and the BSP ID is not below the threshold,",
                        "so a BSP is strongly advised to check beforehand. Another reason for failure is",
                        "if the maximum number of BSPs has been reached. A successful assignment as BSP means",
                        "that some of the collateral tokens of that MSP are frozen."
                      ]
                    },
                    {
                      "name": "bsp_confirm_storing",
                      "fields": [
                        {
                          "name": "non_inclusion_forest_proof",
                          "type": 143,
                          "typeName": "ForestProof<T>"
                        },
                        {
                          "name": "file_keys_and_proofs",
                          "type": 358,
                          "typeName": "BoundedVec<FileKeyWithProof<T>, T::MaxBatchConfirmStorageRequests,>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Used by a BSP to confirm they are storing data of a storage request."
                      ]
                    },
                    {
                      "name": "bsp_request_stop_storing",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "can_serve",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "inclusion_forest_proof",
                          "type": 143,
                          "typeName": "ForestProof<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Executed by a BSP to request to stop storing a file.",
                        "",
                        "In the event when a storage request no longer exists for the data the BSP no longer stores,",
                        "it is required that the BSP still has access to the metadata of the initial storage request.",
                        "If they do not, they will at least need that metadata to reconstruct the File ID and from wherever",
                        "the BSP gets that data is up to it. One example could be from the assigned MSP.",
                        "This metadata is necessary since it is needed to reconstruct the leaf node key in the storage",
                        "provider's Merkle Forest."
                      ]
                    },
                    {
                      "name": "bsp_confirm_stop_storing",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "inclusion_forest_proof",
                          "type": 143,
                          "typeName": "ForestProof<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Executed by a BSP to confirm to stop storing a file.",
                        "",
                        "It has to have previously opened a pending stop storing request using the `bsp_request_stop_storing` extrinsic.",
                        "The minimum amount of blocks between the request and the confirmation is defined by the runtime, such that the",
                        "BSP can't immediately stop storing a file it has previously lost when receiving a challenge for it."
                      ]
                    },
                    {
                      "name": "stop_storing_for_insolvent_user",
                      "fields": [
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "inclusion_forest_proof",
                          "type": 143,
                          "typeName": "ForestProof<T>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Executed by a SP to stop storing a file from an insolvent user.",
                        "",
                        "This is used when a user has become insolvent and the SP needs to stop storing the files of that user, since",
                        "it won't be getting paid for it anymore.",
                        "The validations are similar to the ones in the `bsp_request_stop_storing` and `bsp_confirm_stop_storing` extrinsics, but the SP doesn't need to",
                        "wait for a minimum amount of blocks to confirm to stop storing the file nor it has to be a BSP."
                      ]
                    },
                    {
                      "name": "delete_file",
                      "fields": [
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "location",
                          "type": 137,
                          "typeName": "FileLocation<T>"
                        },
                        {
                          "name": "size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "fingerprint",
                          "type": 13,
                          "typeName": "Fingerprint<T>"
                        },
                        {
                          "name": "maybe_inclusion_forest_proof",
                          "type": 359,
                          "typeName": "Option<ForestProof<T>>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "pending_file_deletion_request_submit_proof",
                      "fields": [
                        {
                          "name": "user",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "file_key",
                          "type": 13,
                          "typeName": "MerkleHash<T>"
                        },
                        {
                          "name": "file_size",
                          "type": 12,
                          "typeName": "StorageData<T>"
                        },
                        {
                          "name": "bucket_id",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "forest_proof",
                          "type": 143,
                          "typeName": "ForestProof<T>"
                        }
                      ],
                      "index": 16
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "BucketMoveRequestResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Accepted",
                      "index": 0
                    },
                    {
                      "name": "Rejected",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "ReplicationTarget"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Basic",
                      "index": 0
                    },
                    {
                      "name": "Standard",
                      "index": 1
                    },
                    {
                      "name": "HighSecurity",
                      "index": 2
                    },
                    {
                      "name": "SuperHighSecurity",
                      "index": 3
                    },
                    {
                      "name": "UltraHighSecurity",
                      "index": 4
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "ReplicationTargetType<T>"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "def": {
                "sequence": {
                  "type": 351
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "StorageRequestMspBucketResponse"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bucket_id",
                      "type": 13,
                      "typeName": "BucketIdFor<T>"
                    },
                    {
                      "name": "accept",
                      "type": 352,
                      "typeName": "Option<StorageRequestMspAcceptedFileKeys<T>>"
                    },
                    {
                      "name": "reject",
                      "type": 356,
                      "typeName": "Vec<RejectedStorageRequest<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 353
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 353
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "StorageRequestMspAcceptedFileKeys"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "file_keys_and_proofs",
                      "type": 354,
                      "typeName": "Vec<FileKeyWithProof<T>>"
                    },
                    {
                      "name": "forest_proof",
                      "type": 143,
                      "typeName": "ForestProof<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "def": {
                "sequence": {
                  "type": 355
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "FileKeyWithProof"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "file_key",
                      "type": 13,
                      "typeName": "MerkleHash<T>"
                    },
                    {
                      "name": "proof",
                      "type": 147,
                      "typeName": "KeyProof<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "def": {
                "sequence": {
                  "type": 357
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "RejectedStorageRequest"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "file_key",
                      "type": 13,
                      "typeName": "MerkleHash<T>"
                    },
                    {
                      "name": "reason",
                      "type": 139,
                      "typeName": "RejectedStorageRequestReason"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 355
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 354,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 143
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 143
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "challenge",
                      "fields": [
                        {
                          "name": "key",
                          "type": 13,
                          "typeName": "KeyFor<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Introduce a new challenge.",
                        "",
                        "This function allows anyone to add a new challenge to the `ChallengesQueue`.",
                        "The challenge will be dispatched in the coming blocks.",
                        "Users are charged a small fee for submitting a challenge, which",
                        "goes to the Treasury."
                      ]
                    },
                    {
                      "name": "submit_proof",
                      "fields": [
                        {
                          "name": "proof",
                          "type": 142,
                          "typeName": "Proof<T>"
                        },
                        {
                          "name": "provider",
                          "type": 136,
                          "typeName": "Option<ProviderIdFor<T>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "For a Provider to submit a proof.",
                        "",
                        "Checks that `provider` is a registered Provider. If none",
                        "is provided, the proof submitter is considered to be the Provider.",
                        "Relies on a Providers pallet to get the root for the Provider.",
                        "Validates that the proof corresponds to a challenge that was made in the past,",
                        "by checking the [`TickToChallengesSeed`] StorageMap. The challenge tick that the",
                        "Provider should be submitting a proof for is retrieved from [`ProviderToProofSubmissionRecord`],",
                        "and it was calculated based on the last tick they submitted a proof for, and the challenge",
                        "period for that Provider, at the time of the previous proof submission or when it was",
                        "marked as slashable.",
                        "",
                        "This extrinsic also checks that there hasn't been a checkpoint challenge round",
                        "in between the last time the Provider submitted a proof for and the tick",
                        "for which the proof is being submitted. If there has been, the Provider is",
                        "expected to include responses to the checkpoint challenges in the proof.",
                        "",
                        "If valid:",
                        "- Pushes forward the Provider in the [`TickToProvidersDeadlines`] StorageMap a number",
                        "of ticks corresponding to the stake of the Provider.",
                        "- Registers the last tick for which the Provider submitted a proof for in",
                        "[`ProviderToProofSubmissionRecord`], as well as the next tick for which the Provider",
                        "should submit a proof for.",
                        "",
                        "Execution of this extrinsic should be refunded if the proof is valid."
                      ]
                    },
                    {
                      "name": "force_initialise_challenge_cycle",
                      "fields": [
                        {
                          "name": "provider",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Initialise a Provider's challenge cycle.",
                        "",
                        "Only callable by sudo.",
                        "",
                        "Sets the last tick the Provider submitted a proof for to the current tick, and sets the",
                        "deadline for submitting a proof to the current tick + the Provider's period + the tolerance."
                      ]
                    },
                    {
                      "name": "set_paused",
                      "fields": [
                        {
                          "name": "paused",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the [`ChallengesTickerPaused`] to `true` or `false`.",
                        "",
                        "Only callable by sudo."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "pallet_randomness",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_babe_randomness",
                      "index": 0,
                      "docs": [
                        "This inherent that must be included (DispatchClass::Mandatory) at each block saves the latest randomness available from the",
                        "relay chain into a variable that can then be used as a seed for commitments that happened during",
                        "the previous relay chain epoch"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "pallet_payment_streams",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_fixed_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "rate",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Dispatchable extrinsic that allows root to add a fixed-rate payment stream from a User to a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "- `rate`: The initial rate of the payment stream.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream does not already exist",
                        "3. Check that the User has enough funds to pay the deposit",
                        "4. Hold the deposit from the User",
                        "5. Update the Payment Streams storage to add the new payment stream",
                        "",
                        "Emits `FixedRatePaymentStreamCreated` event when successful."
                      ]
                    },
                    {
                      "name": "update_fixed_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new_rate",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatchable extrinsic that allows root to update an existing fixed-rate payment stream between a User and a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "- `new_rate`: The new rate of the payment stream.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream exists",
                        "3. Update the Payment Streams storage to update the payment stream",
                        "",
                        "Emits `FixedRatePaymentStreamUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "delete_fixed_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatchable extrinsic that allows root to delete an existing fixed-rate payment stream between a User and a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream exists",
                        "3. Update the Payment Streams storage to remove the payment stream",
                        "",
                        "Emits `FixedRatePaymentStreamDeleted` event when successful."
                      ]
                    },
                    {
                      "name": "create_dynamic_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount_provided",
                          "type": 12,
                          "typeName": "UnitsProvidedFor<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatchable extrinsic that allows root to add a dynamic-rate payment stream from a User to a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "- `amount_provided`: The initial amount provided by the Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream does not already exist",
                        "3. Check that the User has enough funds to pay the deposit",
                        "4. Hold the deposit from the User",
                        "5. Update the Payment Streams storage to add the new payment stream",
                        "",
                        "Emits `DynamicRatePaymentStreamCreated` event when successful."
                      ]
                    },
                    {
                      "name": "update_dynamic_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "new_amount_provided",
                          "type": 12,
                          "typeName": "UnitsProvidedFor<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Dispatchable extrinsic that allows root to update an existing dynamic-rate payment stream between a User and a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "- `new_amount_provided`: The new amount provided by the Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream exists",
                        "3. Update the Payment Streams storage to update the payment stream",
                        "",
                        "Emits `DynamicRatePaymentStreamUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "delete_dynamic_rate_payment_stream",
                      "fields": [
                        {
                          "name": "provider_id",
                          "type": 13,
                          "typeName": "ProviderIdFor<T>"
                        },
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Dispatchable extrinsic that allows root to delete an existing dynamic-rate payment stream between a User and a Provider.",
                        "",
                        "The dispatch origin for this call must be Root (Payment streams should only be added by traits in other pallets,",
                        "this extrinsic is for manual testing).",
                        "",
                        "Parameters:",
                        "- `provider_id`: The Provider ID that the payment stream is for.",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was executed by the root origin",
                        "2. Check that the payment stream exists",
                        "3. Update the Payment Streams storage to remove the payment stream",
                        "",
                        "Emits `DynamicRatePaymentStreamDeleted` event when successful."
                      ]
                    },
                    {
                      "name": "charge_payment_streams",
                      "fields": [
                        {
                          "name": "user_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Dispatchable extrinsic that allows Providers to charge a payment stream from a User.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the Provider that has at least one type of payment stream with the User.",
                        "",
                        "Parameters:",
                        "- `user_account`: The User Account ID that the payment stream is for.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that a payment stream between the signer (Provider) and the User exists",
                        "3. If there is a fixed-rate payment stream:",
                        "   1. Get the rate of the payment stream",
                        "   2. Get the difference between the last charged tick number and the last chargeable tick number of the stream",
                        "   3. Calculate the amount to charge doing `rate * difference`",
                        "   4. Charge the user (if the user does not have enough funds, it gets flagged and a `UserWithoutFunds` event is emitted)",
                        "   5. Update the last charged tick number of the payment stream",
                        "4. If there is a dynamic-rate payment stream:",
                        "   1. Get the amount provided by the Provider   ",
                        "   2. Get the difference between price index when the stream was last charged and the price index at the last chargeable tick",
                        "   3. Calculate the amount to charge doing `amount_provided * difference`",
                        "   4. Charge the user (if the user does not have enough funds, it gets flagged and a `UserWithoutFunds` event is emitted)",
                        "   5. Update the price index when the stream was last charged of the payment stream",
                        "",
                        "Emits a `PaymentStreamCharged` event when successful.",
                        "",
                        "Notes: a Provider could have both a fixed-rate and a dynamic-rate payment stream with a User. If that's the case, this extrinsic",
                        "will try to charge both and the amount charged will be the sum of the amounts charged for each payment stream."
                      ]
                    },
                    {
                      "name": "charge_multiple_users_payment_streams",
                      "fields": [
                        {
                          "name": "user_accounts",
                          "type": 163,
                          "typeName": "BoundedVec<T::AccountId, T::MaxUsersToCharge>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Dispatchable extrinsic that allows Providers to charge multiple User's payment streams.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the Provider that has at least one type of payment stream with each of the Users.",
                        "",
                        "Parameters:",
                        "- `user_accounts`: The array of User Account IDs that have payment streams with the Provider.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the array of Users is not bigger than the maximum allowed.",
                        "3. Execute a for loop for each User in the array of User Account IDs, in which it:",
                        "\ta. Checks that a payment stream between the signer (Provider) and the User exists",
                        "\tb. If there is a fixed-rate payment stream:",
                        "   \t\t1. Get the rate of the payment stream",
                        "   \t\t2. Get the difference between the last charged tick number and the last chargeable tick number of the stream",
                        "   \t\t3. Calculate the amount to charge doing `rate * difference`",
                        "   \t\t4. Charge the user (if the user does not have enough funds, it gets flagged and a `UserWithoutFunds` event is emitted)",
                        "   \t\t5. Update the last charged tick number of the payment stream",
                        "\tc. If there is a dynamic-rate payment stream:",
                        "   \t\t1. Get the amount provided by the Provider   ",
                        "   \t\t2. Get the difference between price index when the stream was last charged and the price index at the last chargeable tick",
                        "   \t\t3. Calculate the amount to charge doing `amount_provided * difference`",
                        "   \t\t4. Charge the user (if the user does not have enough funds, it gets flagged and a `UserWithoutFunds` event is emitted)",
                        "   \t\t5. Update the price index when the stream was last charged of the payment stream",
                        "",
                        "Emits a `PaymentStreamCharged` per User that had to pay and a `UsersCharged` event when successful.",
                        "",
                        "Notes: a Provider could have both a fixed-rate and a dynamic-rate payment stream with a User. If that's the case, this extrinsic",
                        "will try to charge both and the amount charged will be the sum of the amounts charged for each payment stream."
                      ]
                    },
                    {
                      "name": "pay_outstanding_debt",
                      "fields": [
                        {
                          "name": "providers",
                          "type": 133,
                          "typeName": "Vec<ProviderIdFor<T>>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Dispatchable extrinsic that allows a user flagged as without funds to pay the Providers that still have payment streams",
                        "with it, in order to recover as much of its deposits as possible.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the User that has been flagged as without funds.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the user has been flagged as without funds.",
                        "3. Release the user's funds that were held as a deposit for each payment stream to be paid.",
                        "4. Get the payment streams that the user has with the provided list of Providers, and pay them for the services.",
                        "5. Delete the charged payment streams of the user.",
                        "",
                        "Emits a 'UserPaidSomeDebts' event when successful if the user has remaining debts. If the user has successfully paid all its debts,",
                        "it emits a 'UserPaidAllDebts' event.",
                        "",
                        "Notes: this extrinsic iterates over the provided list of Providers, getting the payment streams they have with the user and charging",
                        "them, so the execution could get expensive. It's recommended to provide a list of Providers that the user actually has payment streams with,",
                        "which can be obtained by calling the `get_providers_with_payment_streams_with_user` runtime API.",
                        "There was an idea to limit the amount of Providers that can be received by this extrinsic using a constant in the configuration of this pallet,",
                        "but the correct benchmarking of this extrinsic should be enough to avoid any potential abuse."
                      ]
                    },
                    {
                      "name": "clear_insolvent_flag",
                      "index": 9,
                      "docs": [
                        "Dispatchable extrinsic that allows a user flagged as without funds long ago enough to clear this flag from its account,",
                        "allowing it to begin contracting and paying for services again. It should have previously paid all its outstanding debt.",
                        "",
                        "The dispatch origin for this call must be Signed.",
                        "The origin must be the User that has been flagged as without funds.",
                        "",
                        "This extrinsic will perform the following checks and logic:",
                        "1. Check that the extrinsic was signed and get the signer.",
                        "2. Check that the user has been flagged as without funds.",
                        "3. Check that the cooldown period has passed since the user was flagged as without funds.",
                        "4. Check that there's no remaining outstanding debt.",
                        "5. Unflag the user as without funds.",
                        "",
                        "Emits a 'UserSolvent' event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Dispatchables (extrinsics) exposed by this pallet"
              ]
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_bucket_nfts",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "share_access",
                      "fields": [
                        {
                          "name": "recipient",
                          "type": 292,
                          "typeName": "AccountIdLookupSourceOf<T>"
                        },
                        {
                          "name": "bucket",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "read_access_regex",
                          "type": 364,
                          "typeName": "Option<ReadAccessRegex<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Share access to files within a bucket with another account.",
                        "",
                        "The `read_access_regex` parameter is optional and when set to `None` it means that the recipient will be denied access for any read request within the bucket."
                      ]
                    },
                    {
                      "name": "update_read_access",
                      "fields": [
                        {
                          "name": "bucket",
                          "type": 13,
                          "typeName": "BucketIdFor<T>"
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "read_access_regex",
                          "type": 364,
                          "typeName": "Option<ReadAccessRegex<T>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Update read access for an item."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 166
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 166
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "config",
                          "type": 366,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new collection of non-fungible items from a public origin.",
                        "",
                        "This new collection has no items initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "`CollectionDeposit` funds of sender are reserved.",
                        "",
                        "Parameters:",
                        "- `admin`: The admin of this collection. The admin is the initial address of each",
                        "member of the collection's admin team.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "owner",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "config",
                          "type": 366,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new collection of non-fungible items from a privileged origin.",
                        "",
                        "This new collection has no items initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `owner`: The owner of this collection of items. The owner has full superuser",
                        "  permissions over this item, but may later change and configure the permissions using",
                        "  `transfer_ownership` and `set_team`.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "witness",
                          "type": 374,
                          "typeName": "DestroyWitness"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a collection of fungible items.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "owner of the `collection`.",
                        "",
                        "NOTE: The collection must have 0 items to be destroyed.",
                        "",
                        "- `collection`: The identifier of the collection to be destroyed.",
                        "- `witness`: Information on the items minted in the collection. This must be",
                        "correct.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "Weight: `O(m + c + a)` where:",
                        "- `m = witness.item_metadatas`",
                        "- `c = witness.item_configs`",
                        "- `a = witness.attributes`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "mint_to",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "witness_data",
                          "type": 375,
                          "typeName": "Option<MintWitness<T::ItemId, DepositBalanceOf<T, I>>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint an item of a particular collection.",
                        "",
                        "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: An identifier of the new item.",
                        "- `mint_to`: Account into which the item will be minted.",
                        "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
                        "  item_id from that collection needs to be provided within the witness data object. If",
                        "  the mint price is set, then it should be additionally confirmed in the `witness_data`.",
                        "",
                        "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "mint_to",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "item_config",
                          "type": 377,
                          "typeName": "ItemConfig"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Mint an item of a particular collection from a privileged origin.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "Issuer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: An identifier of the new item.",
                        "- `mint_to`: Account into which the item will be minted.",
                        "- `item_config`: A config of the new item.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Destroy a single item.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
                        "be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item to be burned.",
                        "- `item`: The item to be burned.",
                        "",
                        "Emits `Burned`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "dest",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move an item from the sender account to another.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Owner of the `item`;",
                        "- the approved delegate for the `item` (in this case, the approval is reset).",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item to be transferred.",
                        "- `item`: The item to be transferred.",
                        "- `dest`: The account to receive ownership of the item.",
                        "",
                        "Emits `Transferred`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "redeposit",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "items",
                          "type": 167,
                          "typeName": "Vec<T::ItemId>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Re-evaluate the deposits on some items.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection of the items to be reevaluated.",
                        "- `items`: The items of the collection whose deposits will be reevaluated.",
                        "",
                        "NOTE: This exists as a best-effort function. Any items which are unknown or",
                        "in the case that the owner account does not have reservable funds to pay for a",
                        "deposit increase are ignored. Generally the owner isn't going to call this on items",
                        "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                        "so it's of little consequence.",
                        "",
                        "It will still return an error in the case that the collection is unknown or the signer",
                        "is not permitted to call it.",
                        "",
                        "Weight: `O(items.len())`"
                      ]
                    },
                    {
                      "name": "lock_item_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be changed.",
                        "- `item`: The item to become non-transferable.",
                        "",
                        "Emits `ItemTransferLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "unlock_item_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Re-allow unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be changed.",
                        "- `item`: The item to become transferable.",
                        "",
                        "Emits `ItemTransferUnlocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "lock_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "lock_settings",
                          "type": 367,
                          "typeName": "CollectionSettings"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallows specified settings for the whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection to be locked.",
                        "- `lock_settings`: The settings to be locked.",
                        "",
                        "Note: it's possible to only lock(set) the setting, but not to unset it.",
                        "",
                        "Emits `CollectionLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "new_owner",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose owner should be changed.",
                        "- `owner`: The new Owner of this collection. They must have called",
                        "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "issuer",
                          "type": 378,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        },
                        {
                          "name": "admin",
                          "type": 378,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        },
                        {
                          "name": "freezer",
                          "type": 378,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
                        "after to `Some(account)`.",
                        "",
                        "- `collection`: The collection whose team should be changed.",
                        "- `issuer`: The new Issuer of this collection.",
                        "- `admin`: The new Admin of this collection.",
                        "- `freezer`: The new Freezer of this collection.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_collection_owner",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "owner",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the collection.",
                        "- `owner`: The new Owner of this collection.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_collection_config",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "config",
                          "type": 366,
                          "typeName": "CollectionConfigFor<T, I>"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Change the config of a collection.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the collection.",
                        "- `config`: The new config of this collection.",
                        "",
                        "Emits `CollectionConfigChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "maybe_deadline",
                          "type": 135,
                          "typeName": "Option<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Approve an item to be transferred by a delegated third-party account.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`item`.",
                        "",
                        "- `collection`: The collection of the item to be approved for delegated transfer.",
                        "- `item`: The item to be approved for delegated transfer.",
                        "- `delegate`: The account to delegate permission to transfer the item.",
                        "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
                        "\tnumber of blocks after which the approval will expire",
                        "",
                        "Emits `TransferApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Cancel one of the transfer approvals for a specific item.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approval will be cancelled.",
                        "- `item`: The item of the collection of whose approval will be cancelled.",
                        "- `delegate`: The account that is going to loose their approval.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_all_transfer_approvals",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Cancel all the approvals of a specific item.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approvals will be cleared.",
                        "- `item`: The item of the collection of whose approvals will be cleared.",
                        "",
                        "Emits `AllApprovalsCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "lock_item_properties",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "lock_metadata",
                          "type": 8,
                          "typeName": "bool"
                        },
                        {
                          "name": "lock_attributes",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Disallows changing the metadata or attributes of the item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
                        "of the `collection`.",
                        "",
                        "- `collection`: The collection if the `item`.",
                        "- `item`: An item to be locked.",
                        "- `lock_metadata`: Specifies whether the metadata should be locked.",
                        "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
                        "  should be locked.",
                        "",
                        "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
                        "When the metadata or attributes are locked, it won't be possible the unlock them.",
                        "",
                        "Emits `ItemPropertiesLocked`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 168,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Set an attribute for a collection or item.",
                        "",
                        "Origin must be Signed and must conform to the namespace ruleset:",
                        "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
                        "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
                        "  should be set in that case;",
                        "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
                        "  permission to do so;",
                        "",
                        "The funds of `origin` are reserved according to the formula:",
                        "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_attribute",
                      "fields": [
                        {
                          "name": "set_as",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 168,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        },
                        {
                          "name": "value",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::ValueLimit>"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Force-set an attribute for a collection or item.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "If the attribute already exists and it was set by another account, the deposit",
                        "will be returned to the previous owner.",
                        "",
                        "- `set_as`: An optional owner of the attribute.",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "namespace",
                          "type": 169,
                          "typeName": "AttributeNamespace<T::AccountId>"
                        },
                        {
                          "name": "key",
                          "type": 168,
                          "typeName": "BoundedVec<u8, T::KeyLimit>"
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Clear an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "attribute.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `maybe_item`: The identifier of the item whose metadata to clear.",
                        "- `namespace`: Attribute's namespace.",
                        "- `key`: The key of the attribute.",
                        "",
                        "Emits `AttributeCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_item_attributes",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Approve item's attributes to be changed by a delegated third-party account.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: A collection of the item.",
                        "- `item`: The item that holds attributes.",
                        "- `delegate`: The account to delegate permission to change attributes of the item.",
                        "",
                        "Emits `ItemAttributesApprovalAdded` on success."
                      ]
                    },
                    {
                      "name": "cancel_item_attributes_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "delegate",
                          "type": 292,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "witness",
                          "type": 379,
                          "typeName": "CancelAttributesApprovalWitness"
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Cancel the previously provided approval to change item's attributes.",
                        "All the previously set attributes by the `delegate` will be removed.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: Collection that the item is contained within.",
                        "- `item`: The item that holds attributes.",
                        "- `delegate`: The previously approved account to remove.",
                        "",
                        "Emits `ItemAttributesApprovalRemoved` on success."
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "data",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Set the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `item`: The identifier of the item whose metadata to set.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "",
                        "Emits `ItemMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Clear the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                        "`collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `item`: The identifier of the item whose metadata to clear.",
                        "",
                        "Emits `ItemMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "data",
                          "type": 166,
                          "typeName": "BoundedVec<u8, T::StringLimit>"
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "Set the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                        "the `collection`.",
                        "",
                        "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the item whose metadata to update.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "",
                        "Emits `CollectionMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        }
                      ],
                      "index": 27,
                      "docs": [
                        "Clear the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                        "the `collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose metadata to clear.",
                        "",
                        "Emits `CollectionMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_accept_ownership",
                      "fields": [
                        {
                          "name": "maybe_collection",
                          "type": 135,
                          "typeName": "Option<T::CollectionId>"
                        }
                      ],
                      "index": 28,
                      "docs": [
                        "Set (or reset) the acceptance of ownership for a particular account.",
                        "",
                        "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                        "provider reference.",
                        "",
                        "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                        "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                        "  ownership transferal.",
                        "",
                        "Emits `OwnershipAcceptanceChanged`."
                      ]
                    },
                    {
                      "name": "set_collection_max_supply",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 29,
                      "docs": [
                        "Set the maximum number of items a collection could have.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `max_supply`: The maximum number of items a collection could have.",
                        "",
                        "Emits `CollectionMaxSupplySet` event when successful."
                      ]
                    },
                    {
                      "name": "update_mint_settings",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "mint_settings",
                          "type": 369,
                          "typeName": "MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>"
                        }
                      ],
                      "index": 30,
                      "docs": [
                        "Update mint settings.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
                        "of the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `mint_settings`: The new mint settings.",
                        "",
                        "Emits `CollectionMintSettingsUpdated` event when successful."
                      ]
                    },
                    {
                      "name": "set_price",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "price",
                          "type": 371,
                          "typeName": "Option<ItemPrice<T, I>>"
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 378,
                          "typeName": "Option<AccountIdLookupOf<T>>"
                        }
                      ],
                      "index": 31,
                      "docs": [
                        "Set (or reset) the price for an item.",
                        "",
                        "Origin must be Signed and must be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item to set the price for.",
                        "- `price`: The price for the item. Pass `None`, to reset the price.",
                        "- `buyer`: Restricts the buy operation to a specific account.",
                        "",
                        "Emits `ItemPriceSet` on success if the price is not `None`.",
                        "Emits `ItemPriceRemoved` on success if the price is `None`."
                      ]
                    },
                    {
                      "name": "buy_item",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "bid_price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>"
                        }
                      ],
                      "index": 32,
                      "docs": [
                        "Allows to buy an item if it's up for sale.",
                        "",
                        "Origin must be Signed and must not be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item the sender wants to buy.",
                        "- `bid_price`: The price the sender is willing to pay.",
                        "",
                        "Emits `ItemBought` on success."
                      ]
                    },
                    {
                      "name": "pay_tips",
                      "fields": [
                        {
                          "name": "tips",
                          "type": 380,
                          "typeName": "BoundedVec<ItemTipOf<T, I>, T::MaxTips>"
                        }
                      ],
                      "index": 33,
                      "docs": [
                        "Allows to pay the tips.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `tips`: Tips array.",
                        "",
                        "Emits `TipSent` on every tip transfer."
                      ]
                    },
                    {
                      "name": "create_swap",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "desired_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "maybe_desired_item",
                          "type": 135,
                          "typeName": "Option<T::ItemId>"
                        },
                        {
                          "name": "maybe_price",
                          "type": 170,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        },
                        {
                          "name": "duration",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 34,
                      "docs": [
                        "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
                        "`desired_item` from origin to target on the current blockchain.",
                        "The target can execute the swap during the specified `duration` of blocks (if set).",
                        "Additionally, the price could be set for the desired `item`.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item an owner wants to give.",
                        "- `desired_collection`: The collection of the desired item.",
                        "- `desired_item`: The desired item an owner wants to receive.",
                        "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
                        "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
                        "\tafter which the swap will expire.",
                        "",
                        "Emits `SwapCreated` on success."
                      ]
                    },
                    {
                      "name": "cancel_swap",
                      "fields": [
                        {
                          "name": "offered_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "offered_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        }
                      ],
                      "index": 35,
                      "docs": [
                        "Cancel an atomic swap.",
                        "",
                        "Origin must be Signed.",
                        "Origin must be an owner of the `item` if the deadline hasn't expired.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item an owner wants to give.",
                        "",
                        "Emits `SwapCancelled` on success."
                      ]
                    },
                    {
                      "name": "claim_swap",
                      "fields": [
                        {
                          "name": "send_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "send_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "receive_collection",
                          "type": 4,
                          "typeName": "T::CollectionId"
                        },
                        {
                          "name": "receive_item",
                          "type": 4,
                          "typeName": "T::ItemId"
                        },
                        {
                          "name": "witness_price",
                          "type": 170,
                          "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>"
                        }
                      ],
                      "index": 36,
                      "docs": [
                        "Claim an atomic swap.",
                        "This method executes a pending swap, that was created by a counterpart before.",
                        "",
                        "Origin must be Signed and must be an owner of the `item`.",
                        "",
                        "- `send_collection`: The collection of the item to be sent.",
                        "- `send_item`: The item to be sent.",
                        "- `receive_collection`: The collection of the item to be received.",
                        "- `receive_item`: The item to be received.",
                        "- `witness_price`: A price that was previously agreed on.",
                        "",
                        "Emits `SwapClaimed` on success."
                      ]
                    },
                    {
                      "name": "mint_pre_signed",
                      "fields": [
                        {
                          "name": "mint_data",
                          "type": 383,
                          "typeName": "Box<PreSignedMintOf<T, I>>"
                        },
                        {
                          "name": "signature",
                          "type": 384,
                          "typeName": "T::OffchainSignature"
                        },
                        {
                          "name": "signer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 37,
                      "docs": [
                        "Mint an item by providing the pre-signed approval.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `mint_data`: The pre-signed approval that consists of the information about the item,",
                        "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
                        "  number.",
                        "- `signature`: The signature of the `data` object.",
                        "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
                        "",
                        "Emits `Issued` on success.",
                        "Emits `AttributeSet` if the attributes were provided.",
                        "Emits `ItemMetadataSet` if the metadata was not empty."
                      ]
                    },
                    {
                      "name": "set_attributes_pre_signed",
                      "fields": [
                        {
                          "name": "data",
                          "type": 387,
                          "typeName": "PreSignedAttributesOf<T, I>"
                        },
                        {
                          "name": "signature",
                          "type": 384,
                          "typeName": "T::OffchainSignature"
                        },
                        {
                          "name": "signer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 38,
                      "docs": [
                        "Set attributes for an item by providing the pre-signed approval.",
                        "",
                        "Origin must be Signed and must be an owner of the `data.item`.",
                        "",
                        "- `data`: The pre-signed approval that consists of the information about the item,",
                        "  attributes to update and until what block number.",
                        "- `signature`: The signature of the `data` object.",
                        "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
                        "  `CollectionOwner` namespace.",
                        "",
                        "Emits `AttributeSet` for each provided attribute.",
                        "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
                        "Emits `PreSignedAttributesSet` on success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionConfig"
              ],
              "params": [
                {
                  "name": "Price",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "settings",
                      "type": 367,
                      "typeName": "CollectionSettings"
                    },
                    {
                      "name": "max_supply",
                      "type": 135,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "mint_settings",
                      "type": 369,
                      "typeName": "MintSettings<Price, BlockNumber, CollectionId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 368
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "CollectionSetting"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionSetting"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransferableItems",
                      "index": 1
                    },
                    {
                      "name": "UnlockedMetadata",
                      "index": 2
                    },
                    {
                      "name": "UnlockedAttributes",
                      "index": 4
                    },
                    {
                      "name": "UnlockedMaxSupply",
                      "index": 8
                    },
                    {
                      "name": "DepositRequired",
                      "index": 16
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintSettings"
              ],
              "params": [
                {
                  "name": "Price",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mint_type",
                      "type": 370,
                      "typeName": "MintType<CollectionId>"
                    },
                    {
                      "name": "price",
                      "type": 371,
                      "typeName": "Option<Price>"
                    },
                    {
                      "name": "start_block",
                      "type": 135,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "end_block",
                      "type": 135,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "default_item_settings",
                      "type": 372,
                      "typeName": "ItemSettings"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintType"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Issuer",
                      "index": 0
                    },
                    {
                      "name": "Public",
                      "index": 1
                    },
                    {
                      "name": "HolderOf",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "CollectionId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 373
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "ItemSetting"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemSetting"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Transferable",
                      "index": 1
                    },
                    {
                      "name": "UnlockedMetadata",
                      "index": 2
                    },
                    {
                      "name": "UnlockedAttributes",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "DestroyWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "item_metadatas",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_configs",
                      "type": 51,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 51,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 376
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 376
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "MintWitness"
              ],
              "params": [
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owned_item",
                      "type": 135,
                      "typeName": "Option<ItemId>"
                    },
                    {
                      "name": "mint_price",
                      "type": 371,
                      "typeName": "Option<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemConfig"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "settings",
                      "type": 372,
                      "typeName": "ItemSettings"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 292
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 292
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CancelAttributesApprovalWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_attributes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 381
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 382,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemTip"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Amount",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "receiver",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Amount"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "def": {
                "sequence": {
                  "type": 381
                }
              }
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PreSignedMint"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deadline",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "attributes",
                      "type": 217,
                      "typeName": "Vec<(Vec<u8>, Vec<u8>)>"
                    },
                    {
                      "name": "metadata",
                      "type": 14,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "only_account",
                      "type": 39,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    },
                    {
                      "name": "mint_price",
                      "type": 371,
                      "typeName": "Option<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 385,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 385,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 386,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 386,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PreSignedAttributes"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deadline",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "item",
                      "type": 4,
                      "typeName": "ItemId"
                    },
                    {
                      "name": "attributes",
                      "type": 217,
                      "typeName": "Vec<(Vec<u8>, Vec<u8>)>"
                    },
                    {
                      "name": "namespace",
                      "type": 169,
                      "typeName": "AttributeNamespace<AccountId>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "pallet_parameters",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_parameter",
                      "fields": [
                        {
                          "name": "key_value",
                          "type": 389,
                          "typeName": "T::RuntimeParameters"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the value of a parameter.",
                        "",
                        "The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be",
                        "deleted by setting them to `None`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "RuntimeParameters"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RuntimeConfig",
                      "fields": [
                        {
                          "type": 390,
                          "typeName": "dynamic_params::runtime_config::Parameters"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "storage_hub_runtime",
                "configs",
                "runtime_params",
                "dynamic_params",
                "runtime_config",
                "Parameters"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SlashAmountPerMaxFileSize",
                      "fields": [
                        {
                          "type": 177,
                          "typeName": "SlashAmountPerMaxFileSize"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "StakeToChallengePeriod",
                      "fields": [
                        {
                          "type": 178,
                          "typeName": "StakeToChallengePeriod"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "CheckpointChallengePeriod",
                      "fields": [
                        {
                          "type": 179,
                          "typeName": "CheckpointChallengePeriod"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MinChallengePeriod",
                      "fields": [
                        {
                          "type": 180,
                          "typeName": "MinChallengePeriod"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "SystemUtilisationLowerThresholdPercentage",
                      "fields": [
                        {
                          "type": 181,
                          "typeName": "SystemUtilisationLowerThresholdPercentage"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "SystemUtilisationUpperThresholdPercentage",
                      "fields": [
                        {
                          "type": 182,
                          "typeName": "SystemUtilisationUpperThresholdPercentage"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "MostlyStablePrice",
                      "fields": [
                        {
                          "type": 183,
                          "typeName": "MostlyStablePrice"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "MaxPrice",
                      "fields": [
                        {
                          "type": 184,
                          "typeName": "MaxPrice"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "MinPrice",
                      "fields": [
                        {
                          "type": 185,
                          "typeName": "MinPrice"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "UpperExponentFactor",
                      "fields": [
                        {
                          "type": 186,
                          "typeName": "UpperExponentFactor"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "LowerExponentFactor",
                      "fields": [
                        {
                          "type": 187,
                          "typeName": "LowerExponentFactor"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<u32>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "ZeroSizeBucketFixedRate",
                      "fields": [
                        {
                          "type": 188,
                          "typeName": "ZeroSizeBucketFixedRate"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "IdealUtilisationRate",
                      "fields": [
                        {
                          "type": 189,
                          "typeName": "IdealUtilisationRate"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DecayRate",
                      "fields": [
                        {
                          "type": 190,
                          "typeName": "DecayRate"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "MinimumTreasuryCut",
                      "fields": [
                        {
                          "type": 191,
                          "typeName": "MinimumTreasuryCut"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "MaximumTreasuryCut",
                      "fields": [
                        {
                          "type": 192,
                          "typeName": "MaximumTreasuryCut"
                        },
                        {
                          "type": 391,
                          "typeName": "Option<Perbill>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "BspStopStoringFilePenalty",
                      "fields": [
                        {
                          "type": 193,
                          "typeName": "BspStopStoringFilePenalty"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "ProviderTopUpTtl",
                      "fields": [
                        {
                          "type": 194,
                          "typeName": "ProviderTopUpTtl"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "BasicReplicationTarget",
                      "fields": [
                        {
                          "type": 195,
                          "typeName": "BasicReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "StandardReplicationTarget",
                      "fields": [
                        {
                          "type": 196,
                          "typeName": "StandardReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "HighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "HighSecurityReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "SuperHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 198,
                          "typeName": "SuperHighSecurityReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "UltraHighSecurityReplicationTarget",
                      "fields": [
                        {
                          "type": 199,
                          "typeName": "UltraHighSecurityReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "MaxReplicationTarget",
                      "fields": [
                        {
                          "type": 200,
                          "typeName": "MaxReplicationTarget"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<ReplicationTargetType>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "TickRangeToMaximumThreshold",
                      "fields": [
                        {
                          "type": 201,
                          "typeName": "TickRangeToMaximumThreshold"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "StorageRequestTtl",
                      "fields": [
                        {
                          "type": 202,
                          "typeName": "StorageRequestTtl"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "MinWaitForStopStoring",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "MinWaitForStopStoring"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "MinSeedPeriod",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "MinSeedPeriod"
                        },
                        {
                          "type": 135,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "StakeToSeedPeriod",
                      "fields": [
                        {
                          "type": 205,
                          "typeName": "StakeToSeedPeriod"
                        },
                        {
                          "type": 371,
                          "typeName": "Option<Balance>"
                        }
                      ],
                      "index": 28
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 209
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 209
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet."
              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 395
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 396,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "CandidateInfo"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "def": {
                "sequence": {
                  "type": 395
                }
              }
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "pallet_collator_selection",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCandidates",
                      "index": 0,
                      "docs": [
                        "The pallet has too many candidates."
                      ]
                    },
                    {
                      "name": "TooFewEligibleCollators",
                      "index": 1,
                      "docs": [
                        "Leaving would result in too few candidates."
                      ]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "index": 2,
                      "docs": [
                        "Account is already a candidate."
                      ]
                    },
                    {
                      "name": "NotCandidate",
                      "index": 3,
                      "docs": [
                        "Account is not a candidate."
                      ]
                    },
                    {
                      "name": "TooManyInvulnerables",
                      "index": 4,
                      "docs": [
                        "There are too many Invulnerables."
                      ]
                    },
                    {
                      "name": "AlreadyInvulnerable",
                      "index": 5,
                      "docs": [
                        "Account is already an Invulnerable."
                      ]
                    },
                    {
                      "name": "NotInvulnerable",
                      "index": 6,
                      "docs": [
                        "Account is not an Invulnerable."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 7,
                      "docs": [
                        "Account has no associated validator ID."
                      ]
                    },
                    {
                      "name": "ValidatorNotRegistered",
                      "index": 8,
                      "docs": [
                        "Validator ID is not yet registered."
                      ]
                    },
                    {
                      "name": "InsertToCandidateListFailed",
                      "index": 9,
                      "docs": [
                        "Could not insert in the candidate list."
                      ]
                    },
                    {
                      "name": "RemoveFromCandidateListFailed",
                      "index": 10,
                      "docs": [
                        "Could not remove from the candidate list."
                      ]
                    },
                    {
                      "name": "DepositTooLow",
                      "index": 11,
                      "docs": [
                        "New deposit amount would be below the minimum candidacy bond."
                      ]
                    },
                    {
                      "name": "UpdateCandidateListFailed",
                      "index": 12,
                      "docs": [
                        "Could not update the candidate list."
                      ]
                    },
                    {
                      "name": "InsufficientBond",
                      "index": 13,
                      "docs": [
                        "Deposit amount is too low to take the target's slot in the candidate list."
                      ]
                    },
                    {
                      "name": "TargetIsNotCandidate",
                      "index": 14,
                      "docs": [
                        "The target account to be replaced in the candidate list is not a candidate."
                      ]
                    },
                    {
                      "name": "IdenticalDeposit",
                      "index": 15,
                      "docs": [
                        "The updated deposit amount is equal to the amount already reserved."
                      ]
                    },
                    {
                      "name": "InvalidUnreserve",
                      "index": 16,
                      "docs": [
                        "Cannot lower candidacy bond while occupying a future collator slot in the list."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 398,
            "type": {
              "def": {
                "sequence": {
                  "type": 399
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "def": {
                "tuple": [
                  0,
                  301
                ]
              }
            }
          },
          {
            "id": 400,
            "type": {
              "def": {
                "tuple": [
                  401,
                  14
                ]
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 18,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 302
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 404,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 404,
            "type": {
              "def": {
                "sequence": {
                  "type": 302
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "def": {
                "tuple": [
                  405,
                  4
                ]
              }
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 122
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 408,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 122
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 409
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "def": {
                "sequence": {
                  "type": 122
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 411
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 413,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundChannelDetails"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 122,
                      "typeName": "ParaId"
                    },
                    {
                      "name": "state",
                      "type": 412,
                      "typeName": "OutboundState"
                    },
                    {
                      "name": "signals_exist",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "first_index",
                      "type": 230,
                      "typeName": "u16"
                    },
                    {
                      "name": "last_index",
                      "type": 230,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "OutboundState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Suspended",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "def": {
                "sequence": {
                  "type": 411
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "def": {
                "tuple": [
                  122,
                  230
                ]
              }
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "QueueConfigData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "suspend_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "drop_threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resume_threshold",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "cumulus_pallet_xcmp_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadQueueConfig",
                      "index": 0,
                      "docs": [
                        "Setting the queue config failed since one of its values was invalid."
                      ]
                    },
                    {
                      "name": "AlreadySuspended",
                      "index": 1,
                      "docs": [
                        "The execution is already suspended."
                      ]
                    },
                    {
                      "name": "AlreadyResumed",
                      "index": 2,
                      "docs": [
                        "The execution is already resumed."
                      ]
                    },
                    {
                      "name": "TooManyActiveOutboundChannels",
                      "index": 3,
                      "docs": [
                        "There are too many active outbound channels."
                      ]
                    },
                    {
                      "name": "TooBig",
                      "index": 4,
                      "docs": [
                        "The message is too big."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [
                        {
                          "name": "responder",
                          "type": 118,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "maybe_match_querier",
                          "type": 419,
                          "typeName": "Option<VersionedLocation>"
                        },
                        {
                          "name": "maybe_notify",
                          "type": 420,
                          "typeName": "Option<(u8, u8)>"
                        },
                        {
                          "name": "timeout",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "VersionNotifier",
                      "fields": [
                        {
                          "name": "origin",
                          "type": 118,
                          "typeName": "VersionedLocation"
                        },
                        {
                          "name": "is_active",
                          "type": 8,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ready",
                      "fields": [
                        {
                          "name": "response",
                          "type": 422,
                          "typeName": "VersionedResponse"
                        },
                        {
                          "name": "at",
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 118
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 118
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 421
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 421
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 421,
            "type": {
              "def": {
                "tuple": [
                  2,
                  2
                ]
              }
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "xcm",
                "VersionedResponse"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V2",
                      "fields": [
                        {
                          "type": 309,
                          "typeName": "v2::Response"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "V3",
                      "fields": [
                        {
                          "type": 321,
                          "typeName": "v3::Response"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "V4",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "v4::Response"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "def": {
                "tuple": [
                  4,
                  118
                ]
              }
            }
          },
          {
            "id": 424,
            "type": {
              "def": {
                "tuple": [
                  12,
                  10,
                  4
                ]
              }
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 426
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 427,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 426,
            "type": {
              "def": {
                "tuple": [
                  118,
                  4
                ]
              }
            }
          },
          {
            "id": 427,
            "type": {
              "def": {
                "sequence": {
                  "type": 426
                }
              }
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MigrateSupportedVersion",
                      "index": 0
                    },
                    {
                      "name": "MigrateVersionNotifiers",
                      "index": 1
                    },
                    {
                      "name": "NotifyCurrentTargets",
                      "fields": [
                        {
                          "type": 160,
                          "typeName": "Option<Vec<u8>>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MigrateAndNotifyOldTargets",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 429,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0,
                  343
                ]
              }
            }
          },
          {
            "id": 430,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "RemoteLockedFungibleRecord"
              ],
              "params": [
                {
                  "name": "ConsumerIdentifier",
                  "type": 38
                },
                {
                  "name": "MaxConsumers",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "owner",
                      "type": 118,
                      "typeName": "VersionedLocation"
                    },
                    {
                      "name": "locker",
                      "type": 118,
                      "typeName": "VersionedLocation"
                    },
                    {
                      "name": "consumers",
                      "type": 431,
                      "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 431,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 432
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 433,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 432,
            "type": {
              "def": {
                "tuple": [
                  38,
                  6
                ]
              }
            }
          },
          {
            "id": 433,
            "type": {
              "def": {
                "sequence": {
                  "type": 432
                }
              }
            }
          },
          {
            "id": 434,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 435
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 436,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 435,
            "type": {
              "def": {
                "tuple": [
                  6,
                  118
                ]
              }
            }
          },
          {
            "id": 436,
            "type": {
              "def": {
                "sequence": {
                  "type": 435
                }
              }
            }
          },
          {
            "id": 437,
            "type": {
              "path": [
                "pallet_xcm",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unreachable",
                      "index": 0,
                      "docs": [
                        "The desired destination was unreachable, generally because there is a no way of routing",
                        "to it."
                      ]
                    },
                    {
                      "name": "SendFailure",
                      "index": 1,
                      "docs": [
                        "There was some other issue (i.e. not to do with routing) in sending the message.",
                        "Perhaps a lack of space for buffering the message."
                      ]
                    },
                    {
                      "name": "Filtered",
                      "index": 2,
                      "docs": [
                        "The message execution fails the filter."
                      ]
                    },
                    {
                      "name": "UnweighableMessage",
                      "index": 3,
                      "docs": [
                        "The message's weight could not be determined."
                      ]
                    },
                    {
                      "name": "DestinationNotInvertible",
                      "index": 4,
                      "docs": [
                        "The destination `Location` provided cannot be inverted."
                      ]
                    },
                    {
                      "name": "Empty",
                      "index": 5,
                      "docs": [
                        "The assets to be sent are empty."
                      ]
                    },
                    {
                      "name": "CannotReanchor",
                      "index": 6,
                      "docs": [
                        "Could not re-anchor the assets to declare the fees for the destination chain."
                      ]
                    },
                    {
                      "name": "TooManyAssets",
                      "index": 7,
                      "docs": [
                        "Too many assets have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "InvalidOrigin",
                      "index": 8,
                      "docs": [
                        "Origin is invalid for sending."
                      ]
                    },
                    {
                      "name": "BadVersion",
                      "index": 9,
                      "docs": [
                        "The version of the `Versioned` value used is not able to be interpreted."
                      ]
                    },
                    {
                      "name": "BadLocation",
                      "index": 10,
                      "docs": [
                        "The given location could not be used (e.g. because it cannot be expressed in the",
                        "desired version of XCM)."
                      ]
                    },
                    {
                      "name": "NoSubscription",
                      "index": 11,
                      "docs": [
                        "The referenced subscription could not be found."
                      ]
                    },
                    {
                      "name": "AlreadySubscribed",
                      "index": 12,
                      "docs": [
                        "The location is invalid since it already has a subscription from us."
                      ]
                    },
                    {
                      "name": "CannotCheckOutTeleport",
                      "index": 13,
                      "docs": [
                        "Could not check-out the assets for teleportation to the destination chain."
                      ]
                    },
                    {
                      "name": "LowBalance",
                      "index": 14,
                      "docs": [
                        "The owner does not own (all) of the asset that they wish to do the operation on."
                      ]
                    },
                    {
                      "name": "TooManyLocks",
                      "index": 15,
                      "docs": [
                        "The asset owner has too many locks on the asset."
                      ]
                    },
                    {
                      "name": "AccountNotSovereign",
                      "index": 16,
                      "docs": [
                        "The given account is not an identifiable sovereign account for any location."
                      ]
                    },
                    {
                      "name": "FeesNotMet",
                      "index": 17,
                      "docs": [
                        "The operation required fees to be paid which the initiator could not meet."
                      ]
                    },
                    {
                      "name": "LockNotFound",
                      "index": 18,
                      "docs": [
                        "A remote lock with the corresponding data could not be found."
                      ]
                    },
                    {
                      "name": "InUse",
                      "index": 19,
                      "docs": [
                        "The unlock operation cannot succeed because there are still consumers of the lock."
                      ]
                    },
                    {
                      "name": "InvalidAssetUnknownReserve",
                      "index": 21,
                      "docs": [
                        "Invalid asset, reserve chain could not be determined for it."
                      ]
                    },
                    {
                      "name": "InvalidAssetUnsupportedReserve",
                      "index": 22,
                      "docs": [
                        "Invalid asset, do not support remote asset reserves with different fees reserves."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 23,
                      "docs": [
                        "Too many assets with different reserve locations have been attempted for transfer."
                      ]
                    },
                    {
                      "name": "LocalExecutionIncomplete",
                      "index": 24,
                      "docs": [
                        "Local XCM execution incomplete."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 438,
            "type": {
              "path": [
                "pallet_message_queue",
                "BookState"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 121
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "begin",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "count",
                      "type": 4,
                      "typeName": "PageIndex"
                    },
                    {
                      "name": "ready_neighbours",
                      "type": 439,
                      "typeName": "Option<Neighbours<MessageOrigin>>"
                    },
                    {
                      "name": "message_count",
                      "type": 12,
                      "typeName": "u64"
                    },
                    {
                      "name": "size",
                      "type": 12,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 439,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 440
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 440
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 440,
            "type": {
              "path": [
                "pallet_message_queue",
                "Neighbours"
              ],
              "params": [
                {
                  "name": "MessageOrigin",
                  "type": 121
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "prev",
                      "type": 121,
                      "typeName": "MessageOrigin"
                    },
                    {
                      "name": "next",
                      "type": 121,
                      "typeName": "MessageOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 441,
            "type": {
              "def": {
                "tuple": [
                  121,
                  4
                ]
              }
            }
          },
          {
            "id": 442,
            "type": {
              "path": [
                "pallet_message_queue",
                "Page"
              ],
              "params": [
                {
                  "name": "Size",
                  "type": 4
                },
                {
                  "name": "HeapSize",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "remaining",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "remaining_size",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first_index",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "first",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "last",
                      "type": 4,
                      "typeName": "Size"
                    },
                    {
                      "name": "heap",
                      "type": 443,
                      "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 443,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 444,
            "type": {
              "path": [
                "pallet_message_queue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotReapable",
                      "index": 0,
                      "docs": [
                        "Page is not reapable because it has items remaining to be processed and is not old",
                        "enough."
                      ]
                    },
                    {
                      "name": "NoPage",
                      "index": 1,
                      "docs": [
                        "Page to be reaped does not exist."
                      ]
                    },
                    {
                      "name": "NoMessage",
                      "index": 2,
                      "docs": [
                        "The referenced message could not be found."
                      ]
                    },
                    {
                      "name": "AlreadyProcessed",
                      "index": 3,
                      "docs": [
                        "The message was already processed and cannot be processed again."
                      ]
                    },
                    {
                      "name": "Queued",
                      "index": 4,
                      "docs": [
                        "The message is queued for future execution."
                      ]
                    },
                    {
                      "name": "InsufficientWeight",
                      "index": 5,
                      "docs": [
                        "There is temporarily not enough weight to continue servicing messages."
                      ]
                    },
                    {
                      "name": "TemporarilyUnprocessable",
                      "index": 6,
                      "docs": [
                        "This message is temporarily unprocessable.",
                        "",
                        "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                        "retrying."
                      ]
                    },
                    {
                      "name": "QueuePaused",
                      "index": 7,
                      "docs": [
                        "The queue is paused and no message can be executed from it.",
                        "",
                        "This can change at any time and may resolve in the future by re-trying."
                      ]
                    },
                    {
                      "name": "RecursiveDisallowed",
                      "index": 8,
                      "docs": [
                        "Another call is in progress and needs to finish before this call can happen."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 445,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "SignUpRequest"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sp_sign_up_request",
                      "type": 446,
                      "typeName": "SignUpRequestSpParams<T>"
                    },
                    {
                      "name": "at",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 446,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "SignUpRequestSpParams"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BackupStorageProvider",
                      "fields": [
                        {
                          "type": 447,
                          "typeName": "BackupStorageProvider<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "MainStorageProvider",
                      "fields": [
                        {
                          "type": 448,
                          "typeName": "MainStorageProviderSignUpRequest<T>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 447,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "BackupStorageProvider"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "capacity",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "capacity_used",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "multiaddresses",
                      "type": 125,
                      "typeName": "Multiaddresses<T>"
                    },
                    {
                      "name": "root",
                      "type": 13,
                      "typeName": "MerklePatriciaRoot<T>"
                    },
                    {
                      "name": "last_capacity_change",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "owner_account",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "payment_account",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "reputation_weight",
                      "type": 4,
                      "typeName": "ReputationWeightType<T>"
                    },
                    {
                      "name": "sign_up_block",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 448,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "MainStorageProviderSignUpRequest"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "msp_info",
                      "type": 449,
                      "typeName": "MainStorageProvider<T>"
                    },
                    {
                      "name": "value_prop",
                      "type": 129,
                      "typeName": "ValueProposition<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 449,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "MainStorageProvider"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "capacity",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "capacity_used",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "multiaddresses",
                      "type": 125,
                      "typeName": "Multiaddresses<T>"
                    },
                    {
                      "name": "amount_of_buckets",
                      "type": 6,
                      "typeName": "BucketCount<T>"
                    },
                    {
                      "name": "amount_of_value_props",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "last_capacity_change",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "owner_account",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "payment_account",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "sign_up_block",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 450,
            "type": {
              "path": [
                "pallet_storage_providers",
                "types",
                "Bucket"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "root",
                      "type": 13,
                      "typeName": "MerklePatriciaRoot<T>"
                    },
                    {
                      "name": "user_id",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "msp_id",
                      "type": 136,
                      "typeName": "Option<MainStorageProviderId<T>>"
                    },
                    {
                      "name": "private",
                      "type": 8,
                      "typeName": "bool"
                    },
                    {
                      "name": "read_access_group_id",
                      "type": 135,
                      "typeName": "Option<T::ReadAccessGroupId>"
                    },
                    {
                      "name": "size",
                      "type": 12,
                      "typeName": "StorageDataUnit<T>"
                    },
                    {
                      "name": "value_prop_id",
                      "type": 136,
                      "typeName": "Option<ValuePropIdFor<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 451,
            "type": {
              "def": {
                "tuple": [
                  13,
                  13
                ]
              }
            }
          },
          {
            "id": 452,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 131
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 453,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 453,
            "type": {
              "def": {
                "sequence": {
                  "type": 131
                }
              }
            }
          },
          {
            "id": 454,
            "type": {
              "path": [
                "pallet_storage_providers",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyRegistered",
                      "index": 0,
                      "docs": [
                        "Error thrown when a user tries to sign up as a SP but is already registered as a MSP or BSP."
                      ]
                    },
                    {
                      "name": "SignUpNotRequested",
                      "index": 1,
                      "docs": [
                        "Error thrown when a user tries to confirm a sign up that was not requested previously."
                      ]
                    },
                    {
                      "name": "SignUpRequestPending",
                      "index": 2,
                      "docs": [
                        "Error thrown when a user tries to request to sign up when it already has a sign up request pending."
                      ]
                    },
                    {
                      "name": "NoMultiAddress",
                      "index": 3,
                      "docs": [
                        "Error thrown when a user tries to sign up without any multiaddress."
                      ]
                    },
                    {
                      "name": "InvalidMultiAddress",
                      "index": 4,
                      "docs": [
                        "Error thrown when a user tries to sign up as a SP but any of the provided multiaddresses is invalid."
                      ]
                    },
                    {
                      "name": "StorageTooLow",
                      "index": 5,
                      "docs": [
                        "Error thrown when a user tries to sign up or change its capacity to store less storage than the minimum required by the runtime."
                      ]
                    },
                    {
                      "name": "NotEnoughBalance",
                      "index": 6,
                      "docs": [
                        "Error thrown when a user does not have enough balance to pay the deposit that it would incur by signing up as a SP or changing its capacity."
                      ]
                    },
                    {
                      "name": "CannotHoldDeposit",
                      "index": 7,
                      "docs": [
                        "Error thrown when the runtime cannot hold the required deposit from the account to register it as a SP or change its capacity."
                      ]
                    },
                    {
                      "name": "StorageStillInUse",
                      "index": 8,
                      "docs": [
                        "Error thrown when a user tries to sign off as a SP but still has used storage."
                      ]
                    },
                    {
                      "name": "SignOffPeriodNotPassed",
                      "index": 9,
                      "docs": [
                        "Error thrown when a user tries to sign off as a BSP but the sign off period has not passed yet."
                      ]
                    },
                    {
                      "name": "RandomnessNotValidYet",
                      "index": 10,
                      "docs": [
                        "Error thrown when a user tries to confirm a sign up but the randomness is too fresh to be used yet."
                      ]
                    },
                    {
                      "name": "SignUpRequestExpired",
                      "index": 11,
                      "docs": [
                        "Error thrown when a user tries to confirm a sign up but too much time has passed since the request."
                      ]
                    },
                    {
                      "name": "NewCapacityLessThanUsedStorage",
                      "index": 12,
                      "docs": [
                        "Error thrown when a user tries to change its capacity to less than its used storage."
                      ]
                    },
                    {
                      "name": "NewCapacityEqualsCurrentCapacity",
                      "index": 13,
                      "docs": [
                        "Error thrown when a user tries to change its capacity to the same value it already has."
                      ]
                    },
                    {
                      "name": "NewCapacityCantBeZero",
                      "index": 14,
                      "docs": [
                        "Error thrown when a user tries to change its capacity to zero (there are specific extrinsics to sign off as a SP)."
                      ]
                    },
                    {
                      "name": "NotEnoughTimePassed",
                      "index": 15,
                      "docs": [
                        "Error thrown when a SP tries to change its capacity but it has not been enough time since the last time it changed it."
                      ]
                    },
                    {
                      "name": "NewUsedCapacityExceedsStorageCapacity",
                      "index": 16,
                      "docs": [
                        "Error thrown when a SP tries to change its capacity but the new capacity is not enough to store the used storage."
                      ]
                    },
                    {
                      "name": "DepositTooLow",
                      "index": 17,
                      "docs": [
                        "Deposit too low to determine capacity."
                      ]
                    },
                    {
                      "name": "NotRegistered",
                      "index": 18,
                      "docs": [
                        "Error thrown when a user tries to interact as a SP but is not registered as a MSP or BSP."
                      ]
                    },
                    {
                      "name": "NoUserId",
                      "index": 19,
                      "docs": [
                        "Error thrown when trying to get a root from a MSP without passing a User ID."
                      ]
                    },
                    {
                      "name": "NoBucketId",
                      "index": 20,
                      "docs": [
                        "Error thrown when trying to get a root from a MSP without passing a Bucket ID."
                      ]
                    },
                    {
                      "name": "SpRegisteredButDataNotFound",
                      "index": 21,
                      "docs": [
                        "Error thrown when a user has a SP ID assigned to it but the SP data does not exist in storage (Inconsistency error)."
                      ]
                    },
                    {
                      "name": "BucketNotFound",
                      "index": 22,
                      "docs": [
                        "Error thrown when a bucket ID is not found in storage."
                      ]
                    },
                    {
                      "name": "BucketAlreadyExists",
                      "index": 23,
                      "docs": [
                        "Error thrown when a bucket ID already exists in storage."
                      ]
                    },
                    {
                      "name": "BucketNotEmpty",
                      "index": 24,
                      "docs": [
                        "Bucket cannot be deleted because it is not empty."
                      ]
                    },
                    {
                      "name": "BucketsMovedAmountMismatch",
                      "index": 25,
                      "docs": [
                        "Error thrown when, after moving all buckets of a MSP when removing it from the system, the amount doesn't match the expected value."
                      ]
                    },
                    {
                      "name": "AppendBucketToMspFailed",
                      "index": 26,
                      "docs": [
                        "Error thrown when a bucket ID could not be added to the list of buckets of a MSP."
                      ]
                    },
                    {
                      "name": "ProviderNotSlashable",
                      "index": 27,
                      "docs": [
                        "Error thrown when an attempt was made to slash an unslashable Storage Provider."
                      ]
                    },
                    {
                      "name": "TopUpNotRequired",
                      "index": 28,
                      "docs": [
                        "Error thrown when a provider attempts to top up their deposit when not required."
                      ]
                    },
                    {
                      "name": "BucketMustHaveMspForOperation",
                      "index": 29,
                      "docs": [
                        "Error thrown when an operation requires an MSP to be storing the bucket."
                      ]
                    },
                    {
                      "name": "MultiAddressesMaxAmountReached",
                      "index": 30,
                      "docs": [
                        "Error thrown when a Provider tries to add a new MultiAddress to its account but it already has the maximum amount of multiaddresses."
                      ]
                    },
                    {
                      "name": "MultiAddressNotFound",
                      "index": 31,
                      "docs": [
                        "Error thrown when a Provider tries to delete a MultiAddress from its account but it does not have that MultiAddress."
                      ]
                    },
                    {
                      "name": "MultiAddressAlreadyExists",
                      "index": 32,
                      "docs": [
                        "Error thrown when a Provider tries to add a new MultiAddress to its account but it already exists."
                      ]
                    },
                    {
                      "name": "LastMultiAddressCantBeRemoved",
                      "index": 33,
                      "docs": [
                        "Error thrown when a Provider tries to remove the last MultiAddress from its account."
                      ]
                    },
                    {
                      "name": "ValuePropositionNotFound",
                      "index": 34,
                      "docs": [
                        "Error thrown when the value proposition id is not found."
                      ]
                    },
                    {
                      "name": "ValuePropositionAlreadyExists",
                      "index": 35,
                      "docs": [
                        "Error thrown when value proposition under a given id already exists."
                      ]
                    },
                    {
                      "name": "ValuePropositionNotAvailable",
                      "index": 36,
                      "docs": [
                        "Error thrown when a value proposition is not available."
                      ]
                    },
                    {
                      "name": "ValuePropositionsDeletedAmountMismatch",
                      "index": 37,
                      "docs": [
                        "Error thrown when, after deleting all value propositions of a MSP when removing it from the system, the amount doesn't match the expected value."
                      ]
                    },
                    {
                      "name": "FixedRatePaymentStreamNotFound",
                      "index": 38,
                      "docs": [
                        "Error thrown when a fixed payment stream is not found."
                      ]
                    },
                    {
                      "name": "MspAlreadyAssignedToBucket",
                      "index": 39,
                      "docs": [
                        "Error thrown when changing the MSP of a bucket to the same assigned MSP."
                      ]
                    },
                    {
                      "name": "BucketSizeExceedsLimit",
                      "index": 40,
                      "docs": [
                        "Error thrown when a user exceeded the bucket data limit based on the associated value proposition."
                      ]
                    },
                    {
                      "name": "BucketHasNoValueProposition",
                      "index": 41,
                      "docs": [
                        "Error thrown when a bucket has no value proposition."
                      ]
                    },
                    {
                      "name": "MaxBlockNumberReached",
                      "index": 42,
                      "docs": [
                        "Congratulations, you either lived long enough or were born late enough to see this error."
                      ]
                    },
                    {
                      "name": "OperationNotAllowedForInsolventProvider",
                      "index": 43,
                      "docs": [
                        "Operation not allowed for insolvent provider"
                      ]
                    },
                    {
                      "name": "DeleteProviderConditionsNotMet",
                      "index": 44,
                      "docs": [
                        "Failed to delete a provider due to conditions not being met.",
                        "",
                        "Call `can_delete_provider` runtime API to check if the provider can be deleted."
                      ]
                    },
                    {
                      "name": "CannotStopCycleWithNonDefaultRoot",
                      "index": 45,
                      "docs": [
                        "Cannot stop BSP cycles without a default root"
                      ]
                    },
                    {
                      "name": "BspOnlyOperation",
                      "index": 46,
                      "docs": [
                        "An operation dedicated to BSPs only"
                      ]
                    },
                    {
                      "name": "MspOnlyOperation",
                      "index": 47,
                      "docs": [
                        "An operation dedicated to MSPs only"
                      ]
                    },
                    {
                      "name": "InvalidEncodedFileMetadata",
                      "index": 48,
                      "docs": [
                        "Error thrown when failing to decode the metadata from a received trie value that was removed."
                      ]
                    },
                    {
                      "name": "InvalidEncodedAccountId",
                      "index": 49,
                      "docs": [
                        "Error thrown when failing to decode the owner Account ID from the received metadata."
                      ]
                    },
                    {
                      "name": "PaymentStreamNotFound",
                      "index": 50,
                      "docs": [
                        "Error thrown when trying to update a payment stream that does not exist."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The errors that can be thrown by this pallet to inform users about what went wrong"
              ]
            }
          },
          {
            "id": 455,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "StorageRequestMetadata"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "requested_at",
                      "type": 4,
                      "typeName": "TickNumber<T>"
                    },
                    {
                      "name": "expires_at",
                      "type": 4,
                      "typeName": "TickNumber<T>"
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "bucket_id",
                      "type": 13,
                      "typeName": "BucketIdFor<T>"
                    },
                    {
                      "name": "location",
                      "type": 137,
                      "typeName": "FileLocation<T>"
                    },
                    {
                      "name": "fingerprint",
                      "type": 13,
                      "typeName": "Fingerprint<T>"
                    },
                    {
                      "name": "size",
                      "type": 12,
                      "typeName": "StorageData<T>"
                    },
                    {
                      "name": "msp",
                      "type": 456,
                      "typeName": "Option<(ProviderIdFor<T>, bool)>"
                    },
                    {
                      "name": "user_peer_ids",
                      "type": 125,
                      "typeName": "PeerIds<T>"
                    },
                    {
                      "name": "bsps_required",
                      "type": 4,
                      "typeName": "ReplicationTargetType<T>"
                    },
                    {
                      "name": "bsps_confirmed",
                      "type": 4,
                      "typeName": "ReplicationTargetType<T>"
                    },
                    {
                      "name": "bsps_volunteered",
                      "type": 4,
                      "typeName": "ReplicationTargetType<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 456,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 457
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 457
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 457,
            "type": {
              "def": {
                "tuple": [
                  13,
                  8
                ]
              }
            }
          },
          {
            "id": 458,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "StorageRequestBspsMetadata"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "confirmed",
                      "type": 8,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 459,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 133,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 460,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 451
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 461,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 461,
            "type": {
              "def": {
                "sequence": {
                  "type": 451
                }
              }
            }
          },
          {
            "id": 462,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 463
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 464,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 463,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "PendingFileDeletionRequest"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "user",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "file_key",
                      "type": 13,
                      "typeName": "MerkleHash<T>"
                    },
                    {
                      "name": "bucket_id",
                      "type": 13,
                      "typeName": "BucketIdFor<T>"
                    },
                    {
                      "name": "file_size",
                      "type": 12,
                      "typeName": "StorageData<T>"
                    },
                    {
                      "name": "deposit_paid_for_creation",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 464,
            "type": {
              "def": {
                "sequence": {
                  "type": 463
                }
              }
            }
          },
          {
            "id": 465,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "PendingStopStoringRequest"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tick_when_requested",
                      "type": 4,
                      "typeName": "TickNumber<T>"
                    },
                    {
                      "name": "file_owner",
                      "type": 0,
                      "typeName": "T::AccountId"
                    },
                    {
                      "name": "file_size",
                      "type": 12,
                      "typeName": "StorageData<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 466,
            "type": {
              "path": [
                "pallet_file_system",
                "types",
                "MoveBucketRequestMetadata"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "requester",
                      "type": 0,
                      "typeName": "T::AccountId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 467,
            "type": {
              "path": [
                "pallet_file_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StorageRequestAlreadyRegistered",
                      "index": 0,
                      "docs": [
                        "Storage request already registered for the given file."
                      ]
                    },
                    {
                      "name": "StorageRequestNotFound",
                      "index": 1,
                      "docs": [
                        "Storage request not registered for the given file."
                      ]
                    },
                    {
                      "name": "StorageRequestNotRevoked",
                      "index": 2,
                      "docs": [
                        "Operation not allowed while the storage request is not being revoked."
                      ]
                    },
                    {
                      "name": "StorageRequestExists",
                      "index": 3,
                      "docs": [
                        "Operation not allowed while the storage request exists."
                      ]
                    },
                    {
                      "name": "ReplicationTargetCannotBeZero",
                      "index": 4,
                      "docs": [
                        "Replication target cannot be zero."
                      ]
                    },
                    {
                      "name": "ReplicationTargetExceedsMaximum",
                      "index": 5,
                      "docs": [
                        "BSPs required for storage request cannot exceed the maximum allowed."
                      ]
                    },
                    {
                      "name": "MaxReplicationTargetSmallerThanDefault",
                      "index": 6,
                      "docs": [
                        "Max replication target cannot be smaller than default replication target."
                      ]
                    },
                    {
                      "name": "NotABsp",
                      "index": 7,
                      "docs": [
                        "Account is not a BSP."
                      ]
                    },
                    {
                      "name": "NotAMsp",
                      "index": 8,
                      "docs": [
                        "Account is not a MSP."
                      ]
                    },
                    {
                      "name": "NotASp",
                      "index": 9,
                      "docs": [
                        "Account is not a SP."
                      ]
                    },
                    {
                      "name": "BspNotVolunteered",
                      "index": 10,
                      "docs": [
                        "BSP has not volunteered to store the given file."
                      ]
                    },
                    {
                      "name": "BspNotConfirmed",
                      "index": 11,
                      "docs": [
                        "BSP has not confirmed storing the given file."
                      ]
                    },
                    {
                      "name": "BspAlreadyConfirmed",
                      "index": 12,
                      "docs": [
                        "BSP has already confirmed storing the given file."
                      ]
                    },
                    {
                      "name": "StorageRequestBspsRequiredFulfilled",
                      "index": 13,
                      "docs": [
                        "Number of BSPs required for storage request has been reached."
                      ]
                    },
                    {
                      "name": "BspAlreadyVolunteered",
                      "index": 14,
                      "docs": [
                        "BSP already volunteered to store the given file."
                      ]
                    },
                    {
                      "name": "InsufficientAvailableCapacity",
                      "index": 15,
                      "docs": [
                        "SP does not have enough storage capacity to store the file."
                      ]
                    },
                    {
                      "name": "UnexpectedNumberOfRemovedVolunteeredBsps",
                      "index": 16,
                      "docs": [
                        "Number of removed BSPs volunteered from storage request prefix did not match the expected number."
                      ]
                    },
                    {
                      "name": "BspNotEligibleToVolunteer",
                      "index": 17,
                      "docs": [
                        "BSP cannot volunteer at this current tick."
                      ]
                    },
                    {
                      "name": "StorageRequestExpiredNoSlotAvailable",
                      "index": 18,
                      "docs": [
                        "No slot available found in ticks to insert storage request expiration time."
                      ]
                    },
                    {
                      "name": "StorageRequestNotAuthorized",
                      "index": 19,
                      "docs": [
                        "Not authorized to delete the storage request."
                      ]
                    },
                    {
                      "name": "MaxTickNumberReached",
                      "index": 20,
                      "docs": [
                        "Error created in 2024. If you see this, you are well beyond the singularity and should",
                        "probably stop using this pallet."
                      ]
                    },
                    {
                      "name": "FailedToEncodeBsp",
                      "index": 21,
                      "docs": [
                        "Failed to encode BSP id as slice."
                      ]
                    },
                    {
                      "name": "FailedToEncodeFingerprint",
                      "index": 22,
                      "docs": [
                        "Failed to encode fingerprint as slice."
                      ]
                    },
                    {
                      "name": "FailedToDecodeThreshold",
                      "index": 23,
                      "docs": [
                        "Failed to decode threshold."
                      ]
                    },
                    {
                      "name": "AboveThreshold",
                      "index": 24,
                      "docs": [
                        "BSP did not succeed threshold check."
                      ]
                    },
                    {
                      "name": "ThresholdArithmeticError",
                      "index": 25,
                      "docs": [
                        "Arithmetic error in threshold calculation."
                      ]
                    },
                    {
                      "name": "FailedTypeConversion",
                      "index": 26,
                      "docs": [
                        "Failed to convert to primitive type."
                      ]
                    },
                    {
                      "name": "DividedByZero",
                      "index": 27,
                      "docs": [
                        "Divided by 0"
                      ]
                    },
                    {
                      "name": "ImpossibleFailedToGetValue",
                      "index": 28,
                      "docs": [
                        "Failed to get value when just checked it existed."
                      ]
                    },
                    {
                      "name": "BucketIsNotPrivate",
                      "index": 29,
                      "docs": [
                        "Bucket is not private. Call `update_bucket_privacy` to make it private."
                      ]
                    },
                    {
                      "name": "BucketNotFound",
                      "index": 30,
                      "docs": [
                        "Bucket does not exist"
                      ]
                    },
                    {
                      "name": "BucketNotEmpty",
                      "index": 31,
                      "docs": [
                        "Bucket is not empty."
                      ]
                    },
                    {
                      "name": "NotBucketOwner",
                      "index": 32,
                      "docs": [
                        "Operation failed because the account is not the owner of the bucket."
                      ]
                    },
                    {
                      "name": "CollectionNotFound",
                      "index": 33,
                      "docs": [
                        "Collection ID was not found."
                      ]
                    },
                    {
                      "name": "ProviderRootNotFound",
                      "index": 34,
                      "docs": [
                        "Root of the provider not found."
                      ]
                    },
                    {
                      "name": "ExpectedNonInclusionProof",
                      "index": 35,
                      "docs": [
                        "Failed to verify proof: required to provide a proof of non-inclusion."
                      ]
                    },
                    {
                      "name": "ExpectedInclusionProof",
                      "index": 36,
                      "docs": [
                        "Failed to verify proof: required to provide a proof of inclusion."
                      ]
                    },
                    {
                      "name": "InvalidFileKeyMetadata",
                      "index": 37,
                      "docs": [
                        "Metadata does not correspond to expected file key."
                      ]
                    },
                    {
                      "name": "ThresholdBelowAsymptote",
                      "index": 38,
                      "docs": [
                        "BSPs assignment threshold cannot be below asymptote."
                      ]
                    },
                    {
                      "name": "NotFileOwner",
                      "index": 39,
                      "docs": [
                        "Unauthorized operation, signer does not own the file."
                      ]
                    },
                    {
                      "name": "FileKeyAlreadyPendingDeletion",
                      "index": 40,
                      "docs": [
                        "File key already pending deletion."
                      ]
                    },
                    {
                      "name": "MaxUserPendingDeletionRequestsReached",
                      "index": 41,
                      "docs": [
                        "Max number of user pending deletion requests reached."
                      ]
                    },
                    {
                      "name": "MspNotStoringBucket",
                      "index": 42,
                      "docs": [
                        "Unauthorized operation, signer is not an MSP of the bucket id."
                      ]
                    },
                    {
                      "name": "FileKeyNotPendingDeletion",
                      "index": 43,
                      "docs": [
                        "File key not found in pending deletion requests."
                      ]
                    },
                    {
                      "name": "FileSizeCannotBeZero",
                      "index": 44,
                      "docs": [
                        "File size cannot be zero."
                      ]
                    },
                    {
                      "name": "NoGlobalReputationWeightSet",
                      "index": 45,
                      "docs": [
                        "No global reputation weight set."
                      ]
                    },
                    {
                      "name": "NoBspReputationWeightSet",
                      "index": 46,
                      "docs": [
                        "No BSP reputation weight set."
                      ]
                    },
                    {
                      "name": "MaximumThresholdCannotBeZero",
                      "index": 47,
                      "docs": [
                        "Maximum threshold cannot be zero."
                      ]
                    },
                    {
                      "name": "TickRangeToMaximumThresholdCannotBeZero",
                      "index": 48,
                      "docs": [
                        "Tick range to maximum threshold cannot be zero."
                      ]
                    },
                    {
                      "name": "PendingStopStoringRequestNotFound",
                      "index": 49,
                      "docs": [
                        "Pending stop storing request not found."
                      ]
                    },
                    {
                      "name": "MinWaitForStopStoringNotReached",
                      "index": 50,
                      "docs": [
                        "Minimum amount of blocks between the request opening and being able to confirm it not reached."
                      ]
                    },
                    {
                      "name": "PendingStopStoringRequestAlreadyExists",
                      "index": 51,
                      "docs": [
                        "Pending stop storing request already exists."
                      ]
                    },
                    {
                      "name": "UserNotInsolvent",
                      "index": 52,
                      "docs": [
                        "A SP tried to stop storing files from a user that was supposedly insolvent, but the user is not insolvent."
                      ]
                    },
                    {
                      "name": "NotSelectedMsp",
                      "index": 53,
                      "docs": [
                        "The MSP is trying to confirm to store a file from a storage request is not the one selected to store it."
                      ]
                    },
                    {
                      "name": "MspAlreadyConfirmed",
                      "index": 54,
                      "docs": [
                        "The MSP is trying to confirm to store a file from a storage request that it has already confirmed to store."
                      ]
                    },
                    {
                      "name": "RequestWithoutMsp",
                      "index": 55,
                      "docs": [
                        "The MSP is trying to confirm to store a file from a storage request that does not have a MSP assigned."
                      ]
                    },
                    {
                      "name": "MspAlreadyStoringBucket",
                      "index": 56,
                      "docs": [
                        "The MSP is already storing the bucket."
                      ]
                    },
                    {
                      "name": "MoveBucketRequestNotFound",
                      "index": 57,
                      "docs": [
                        "Move bucket request not found in storage."
                      ]
                    },
                    {
                      "name": "BucketIsBeingMoved",
                      "index": 58,
                      "docs": [
                        "Action not allowed while the bucket is being moved."
                      ]
                    },
                    {
                      "name": "BspAlreadyDataServer",
                      "index": 59,
                      "docs": [
                        "BSP is already a data server for the move bucket request."
                      ]
                    },
                    {
                      "name": "BspDataServersExceeded",
                      "index": 60,
                      "docs": [
                        "Too many registered data servers for the move bucket request."
                      ]
                    },
                    {
                      "name": "FileMetadataProcessingQueueFull",
                      "index": 61,
                      "docs": [
                        "The bounded vector that holds file metadata to process it is full but there's still more to process."
                      ]
                    },
                    {
                      "name": "TooManyBatchResponses",
                      "index": 62,
                      "docs": [
                        "Too many batch responses to process."
                      ]
                    },
                    {
                      "name": "TooManyStorageRequestResponses",
                      "index": 63,
                      "docs": [
                        "Too many storage request responses."
                      ]
                    },
                    {
                      "name": "InvalidBucketIdFileKeyPair",
                      "index": 64,
                      "docs": [
                        "Bucket id and file key pair is invalid."
                      ]
                    },
                    {
                      "name": "InconsistentStateKeyAlreadyExists",
                      "index": 65,
                      "docs": [
                        "Key already exists in mapping when it should not."
                      ]
                    },
                    {
                      "name": "FixedRatePaymentStreamNotFound",
                      "index": 66,
                      "docs": [
                        "Failed to fetch the rate for the payment stream."
                      ]
                    },
                    {
                      "name": "DynamicRatePaymentStreamNotFound",
                      "index": 67,
                      "docs": [
                        "Failed to fetch the dynamic-rate payment stream."
                      ]
                    },
                    {
                      "name": "CannotHoldDeposit",
                      "index": 68,
                      "docs": [
                        "Cannot hold the required deposit from the user"
                      ]
                    },
                    {
                      "name": "FailedToQueryEarliestFileVolunteerTick",
                      "index": 69,
                      "docs": [
                        "Failed to query earliest volunteer tick"
                      ]
                    },
                    {
                      "name": "FailedToGetOwnerAccount",
                      "index": 70,
                      "docs": [
                        "Failed to get owner account of ID of provider"
                      ]
                    },
                    {
                      "name": "FailedToGetPaymentAccount",
                      "index": 71,
                      "docs": [
                        "Failed to get the payment account of the provider."
                      ]
                    },
                    {
                      "name": "NoFileKeysToConfirm",
                      "index": 72,
                      "docs": [
                        "No file keys to confirm storing"
                      ]
                    },
                    {
                      "name": "RootNotUpdated",
                      "index": 73,
                      "docs": [
                        "Root was not updated after applying delta"
                      ]
                    },
                    {
                      "name": "NoPrivacyChange",
                      "index": 74,
                      "docs": [
                        "Privacy update results in no change"
                      ]
                    },
                    {
                      "name": "OperationNotAllowedForInsolventProvider",
                      "index": 75,
                      "docs": [
                        "Operations not allowed for insolvent provider"
                      ]
                    },
                    {
                      "name": "OperationNotAllowedWhileBucketIsNotStoredByMsp",
                      "index": 76,
                      "docs": [
                        "Operations not allowed while bucket is not being stored by an MSP"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 468,
            "type": {
              "def": {
                "tuple": [
                  4,
                  13
                ]
              }
            }
          },
          {
            "id": 469,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "types",
                "ProofSubmissionRecord"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "last_tick_proven",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "next_tick_to_submit_proof_for",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 470,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 133,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 471,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 153
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 472,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 473,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 473,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 133
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 474,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 475,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 475,
            "type": {
              "def": {
                "sequence": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 476,
            "type": {
              "path": [
                "pallet_proofs_dealer",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotProvider",
                      "index": 0,
                      "docs": [
                        "General errors",
                        "The proof submitter is not a registered Provider."
                      ]
                    },
                    {
                      "name": "ChallengesQueueOverflow",
                      "index": 1,
                      "docs": [
                        "`challenge` extrinsic errors",
                        "The ChallengesQueue is full. No more manual challenges can be made",
                        "until some of the challenges in the queue are dispatched."
                      ]
                    },
                    {
                      "name": "PriorityChallengesQueueOverflow",
                      "index": 2,
                      "docs": [
                        "The PriorityChallengesQueue is full. No more priority challenges can be made",
                        "until some of the challenges in the queue are dispatched."
                      ]
                    },
                    {
                      "name": "FeeChargeFailed",
                      "index": 3,
                      "docs": [
                        "The fee for submitting a challenge could not be charged."
                      ]
                    },
                    {
                      "name": "EmptyKeyProofs",
                      "index": 4,
                      "docs": [
                        "`submit_proof` extrinsic errors",
                        "There are no key proofs submitted."
                      ]
                    },
                    {
                      "name": "ProviderRootNotFound",
                      "index": 5,
                      "docs": [
                        "The root for the Provider could not be found."
                      ]
                    },
                    {
                      "name": "ZeroRoot",
                      "index": 6,
                      "docs": [
                        "Provider is submitting a proof when they have a zero root.",
                        "Providers with zero roots are not providing any service, so they should not be",
                        "submitting proofs."
                      ]
                    },
                    {
                      "name": "NoRecordOfLastSubmittedProof",
                      "index": 7,
                      "docs": [
                        "Provider is submitting a proof but there is no record of the last tick they",
                        "submitted a proof for.",
                        "Providers who are required to submit proofs should always have a record of the",
                        "last tick they submitted a proof for, otherwise it means they haven't started",
                        "providing service for any user yet."
                      ]
                    },
                    {
                      "name": "ProviderStakeNotFound",
                      "index": 8,
                      "docs": [
                        "The provider stake could not be found."
                      ]
                    },
                    {
                      "name": "ZeroStake",
                      "index": 9,
                      "docs": [
                        "Provider is submitting a proof but their stake is zero."
                      ]
                    },
                    {
                      "name": "StakeCouldNotBeConverted",
                      "index": 10,
                      "docs": [
                        "The staked balance of the Provider could not be converted to `u128`.",
                        "This should not be possible, as the `Balance` type should be an unsigned integer type."
                      ]
                    },
                    {
                      "name": "ChallengesTickNotReached",
                      "index": 11,
                      "docs": [
                        "Provider is submitting a proof for a tick in the future."
                      ]
                    },
                    {
                      "name": "ChallengesTickTooOld",
                      "index": 12,
                      "docs": [
                        "Provider is submitting a proof for a tick before the last tick this pallet registers",
                        "challenges for."
                      ]
                    },
                    {
                      "name": "ChallengesTickTooLate",
                      "index": 13,
                      "docs": [
                        "Provider is submitting a proof for a tick too late, i.e. that the challenges tick",
                        "is greater or equal than `challenges_tick` + `T::ChallengeTicksTolerance::get()`."
                      ]
                    },
                    {
                      "name": "SeedNotFound",
                      "index": 14,
                      "docs": [
                        "The seed for the tick could not be found.",
                        "This should not be possible for a tick within the `ChallengeHistoryLength` range, as",
                        "seeds are generated for all ticks, and stored within this range."
                      ]
                    },
                    {
                      "name": "CheckpointChallengesNotFound",
                      "index": 15,
                      "docs": [
                        "Checkpoint challenges not found in block.",
                        "This should only be possible if `TickToCheckpointChallenges` is dereferenced for a tick",
                        "that is not a checkpoint tick."
                      ]
                    },
                    {
                      "name": "ForestProofVerificationFailed",
                      "index": 16,
                      "docs": [
                        "The forest proof submitted by the Provider is invalid.",
                        "This could be because the proof is not valid for the root, or because the proof is",
                        "not sufficient for the challenges made."
                      ]
                    },
                    {
                      "name": "IncorrectNumberOfKeyProofs",
                      "index": 17,
                      "docs": [
                        "The number of key proofs submitted does not match the number of keys proven in the forest proof."
                      ]
                    },
                    {
                      "name": "KeyProofNotFound",
                      "index": 18,
                      "docs": [
                        "There is at least one key proven in the forest proof, that does not have a corresponding",
                        "key proof."
                      ]
                    },
                    {
                      "name": "KeyProofVerificationFailed",
                      "index": 19,
                      "docs": [
                        "A key proof submitted by the Provider is invalid.",
                        "This could be because the proof is not valid for the root of that key, or because the proof",
                        "is not sufficient for the challenges made."
                      ]
                    },
                    {
                      "name": "FailedToApplyDelta",
                      "index": 20,
                      "docs": [
                        "Failed to apply delta to the forest proof partial trie."
                      ]
                    },
                    {
                      "name": "UnexpectedNumberOfRemoveMutations",
                      "index": 21,
                      "docs": [
                        "After successfully applying delta for a set of mutations, the number of mutated keys is",
                        "not the same as the number of mutations expected to have been applied."
                      ]
                    },
                    {
                      "name": "FailedToUpdateProviderAfterKeyRemoval",
                      "index": 22,
                      "docs": [
                        "Failed to update the provider after a key removal mutation."
                      ]
                    },
                    {
                      "name": "TooManyValidProofSubmitters",
                      "index": 23,
                      "docs": [
                        "The limit of Providers that can submit a proof in a single tick has been reached."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 477,
            "type": {
              "def": {
                "tuple": [
                  13,
                  4
                ]
              }
            }
          },
          {
            "id": 478,
            "type": {
              "def": {
                "tuple": [
                  13,
                  0
                ]
              }
            }
          },
          {
            "id": 479,
            "type": {
              "path": [
                "pallet_payment_streams",
                "types",
                "FixedRatePaymentStream"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "rate",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "last_charged_tick",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "user_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "out_of_funds_tick",
                      "type": 135,
                      "typeName": "Option<BlockNumberFor<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 480,
            "type": {
              "path": [
                "pallet_payment_streams",
                "types",
                "DynamicRatePaymentStream"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount_provided",
                      "type": 12,
                      "typeName": "UnitsProvidedFor<T>"
                    },
                    {
                      "name": "price_index_when_last_charged",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "user_deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    },
                    {
                      "name": "out_of_funds_tick",
                      "type": 135,
                      "typeName": "Option<BlockNumberFor<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 481,
            "type": {
              "path": [
                "pallet_payment_streams",
                "types",
                "ProviderLastChargeableInfo"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "last_chargeable_tick",
                      "type": 4,
                      "typeName": "BlockNumberFor<T>"
                    },
                    {
                      "name": "price_index",
                      "type": 6,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 482,
            "type": {
              "path": [
                "pallet_payment_streams",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PaymentStreamAlreadyExists",
                      "index": 0,
                      "docs": [
                        "Error thrown when a user of this pallet tries to add a payment stream that already exists."
                      ]
                    },
                    {
                      "name": "PaymentStreamNotFound",
                      "index": 1,
                      "docs": [
                        "Error thrown when a user of this pallet tries to update, remove or charge a payment stream that does not exist."
                      ]
                    },
                    {
                      "name": "NotAProvider",
                      "index": 2,
                      "docs": [
                        "Error thrown when a user tries to charge a payment stream and it's not a registered Provider"
                      ]
                    },
                    {
                      "name": "ProviderInconsistencyError",
                      "index": 3,
                      "docs": [
                        "Error thrown when failing to get the payment account of a registered Provider"
                      ]
                    },
                    {
                      "name": "CannotHoldDeposit",
                      "index": 4,
                      "docs": [
                        "Error thrown when the system can't hold funds from the User as a deposit for creating a new payment stream"
                      ]
                    },
                    {
                      "name": "UpdateRateToSameRate",
                      "index": 5,
                      "docs": [
                        "Error thrown when trying to update the rate of a fixed-rate payment stream to the same rate as before"
                      ]
                    },
                    {
                      "name": "UpdateAmountToSameAmount",
                      "index": 6,
                      "docs": [
                        "Error thrown when trying to update the amount provided of a dynamic-rate payment stream to the same amount as before"
                      ]
                    },
                    {
                      "name": "RateCantBeZero",
                      "index": 7,
                      "docs": [
                        "Error thrown when trying to create a new fixed-rate payment stream with rate 0 or update the rate of an existing one to 0 (should use remove_fixed_rate_payment_stream instead)"
                      ]
                    },
                    {
                      "name": "AmountProvidedCantBeZero",
                      "index": 8,
                      "docs": [
                        "Error thrown when trying to create a new dynamic-rate payment stream with amount provided 0 or update the amount provided of an existing one to 0 (should use remove_dynamic_rate_payment_stream instead)"
                      ]
                    },
                    {
                      "name": "LastChargedGreaterThanLastChargeable",
                      "index": 9,
                      "docs": [
                        "Error thrown when the tick number of when the payment stream was last charged is greater than the tick number of the last chargeable tick"
                      ]
                    },
                    {
                      "name": "InvalidLastChargeableBlockNumber",
                      "index": 10,
                      "docs": [
                        "Error thrown when the new last chargeable tick number that is trying to be set is greater than the current tick number or smaller than the previous last chargeable tick number"
                      ]
                    },
                    {
                      "name": "InvalidLastChargeablePriceIndex",
                      "index": 11,
                      "docs": [
                        "Error thrown when the new last chargeable price index that is trying to be set is greater than the current price index or smaller than the previous last chargeable price index"
                      ]
                    },
                    {
                      "name": "ChargeOverflow",
                      "index": 12,
                      "docs": [
                        "Error thrown when charging a payment stream would result in an overflow of the balance type"
                      ]
                    },
                    {
                      "name": "UserWithoutFunds",
                      "index": 13,
                      "docs": [
                        "Error thrown when trying to operate when the User has been flagged for not having enough funds."
                      ]
                    },
                    {
                      "name": "UserNotFlaggedAsWithoutFunds",
                      "index": 14,
                      "docs": [
                        "Error thrown when a user that has not been flagged as without funds tries to use the extrinsic to pay its outstanding debt"
                      ]
                    },
                    {
                      "name": "CooldownPeriodNotPassed",
                      "index": 15,
                      "docs": [
                        "Error thrown when a user tries to clear the flag of being without funds before the cooldown period has passed"
                      ]
                    },
                    {
                      "name": "UserHasRemainingDebt",
                      "index": 16,
                      "docs": [
                        "Error thrown when a user tries to clear the flag of being without funds before paying all its remaining debt"
                      ]
                    },
                    {
                      "name": "ProviderInsolvent",
                      "index": 17,
                      "docs": [
                        "Error thrown when a charge is attempted when the provider is marked as insolvent"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The errors that can be thrown by this pallet to inform users about what went wrong"
              ]
            }
          },
          {
            "id": 483,
            "type": {
              "path": [
                "pallet_bucket_nfts",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BucketIsNotPrivate",
                      "index": 0,
                      "docs": [
                        "Bucket is not private. Call `update_bucket_privacy` from the file system pallet to make it private."
                      ]
                    },
                    {
                      "name": "NotBucketOwner",
                      "index": 1,
                      "docs": [
                        "Account is not the owner of the bucket."
                      ]
                    },
                    {
                      "name": "NoCorrespondingCollection",
                      "index": 2,
                      "docs": [
                        "No collection corresponding to the bucket. Call `update_bucket_privacy` from the file system pallet to make it private."
                      ]
                    },
                    {
                      "name": "ConvertBytesToBoundedVec",
                      "index": 3,
                      "docs": [
                        "Failed to convert bytes to `BoundedVec`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 484,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "owner_deposit",
                      "type": 6,
                      "typeName": "DepositBalance"
                    },
                    {
                      "name": "items",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_metadatas",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "item_configs",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "attributes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 485,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 486,
            "type": {
              "def": {
                "tuple": [
                  0,
                  4
                ]
              }
            }
          },
          {
            "id": 487,
            "type": {
              "def": {
                "tuple": [
                  4,
                  0
                ]
              }
            }
          },
          {
            "id": 488,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 489
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "CollectionRole"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 489,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionRole"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Issuer",
                      "index": 1
                    },
                    {
                      "name": "Freezer",
                      "index": 2
                    },
                    {
                      "name": "Admin",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 490,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Deposit",
                  "type": 491
                },
                {
                  "name": "Approvals",
                  "type": 492
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "approvals",
                      "type": 492,
                      "typeName": "Approvals"
                    },
                    {
                      "name": "deposit",
                      "type": 491,
                      "typeName": "Deposit"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 491,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 492,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 135
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 493,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 493,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 0
                },
                {
                  "name": "V",
                  "type": 135
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 494
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 494,
            "type": {
              "def": {
                "sequence": {
                  "type": 495
                }
              }
            }
          },
          {
            "id": 495,
            "type": {
              "def": {
                "tuple": [
                  0,
                  135
                ]
              }
            }
          },
          {
            "id": 496,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "CollectionMetadata"
              ],
              "params": [
                {
                  "name": "Deposit",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Deposit"
                    },
                    {
                      "name": "data",
                      "type": 166,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 497,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemMetadata"
              ],
              "params": [
                {
                  "name": "Deposit",
                  "type": 498
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 498,
                      "typeName": "Deposit"
                    },
                    {
                      "name": "data",
                      "type": 166,
                      "typeName": "BoundedVec<u8, StringLimit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 498,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "ItemMetadataDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 39,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 499,
            "type": {
              "def": {
                "tuple": [
                  4,
                  135,
                  169,
                  168
                ]
              }
            }
          },
          {
            "id": 500,
            "type": {
              "def": {
                "tuple": [
                  166,
                  501
                ]
              }
            }
          },
          {
            "id": 501,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "AttributeDeposit"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 39,
                      "typeName": "Option<AccountId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "DepositBalance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 502,
            "type": {
              "def": {
                "tuple": [
                  6,
                  39
                ]
              }
            }
          },
          {
            "id": 503,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_set",
                "BoundedBTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 504,
                      "typeName": "BTreeSet<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 504,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 505,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PendingSwap"
              ],
              "params": [
                {
                  "name": "CollectionId",
                  "type": 4
                },
                {
                  "name": "ItemId",
                  "type": 4
                },
                {
                  "name": "ItemPriceWithDirection",
                  "type": 171
                },
                {
                  "name": "Deadline",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "desired_collection",
                      "type": 4,
                      "typeName": "CollectionId"
                    },
                    {
                      "name": "desired_item",
                      "type": 135,
                      "typeName": "Option<ItemId>"
                    },
                    {
                      "name": "price",
                      "type": 170,
                      "typeName": "Option<ItemPriceWithDirection>"
                    },
                    {
                      "name": "deadline",
                      "type": 4,
                      "typeName": "Deadline"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 506,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 507
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "PalletFeature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 507,
            "type": {
              "path": [
                "pallet_nfts",
                "types",
                "PalletFeature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Trading",
                      "index": 1
                    },
                    {
                      "name": "Attributes",
                      "index": 2
                    },
                    {
                      "name": "Approvals",
                      "index": 4
                    },
                    {
                      "name": "Swaps",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 508,
            "type": {
              "path": [
                "pallet_nfts",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "index": 0,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "UnknownCollection",
                      "index": 1,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "index": 2,
                      "docs": [
                        "The item ID has already been used for an item."
                      ]
                    },
                    {
                      "name": "ApprovalExpired",
                      "index": 3,
                      "docs": [
                        "The approval had a deadline that expired, so the approval isn't valid anymore."
                      ]
                    },
                    {
                      "name": "WrongOwner",
                      "index": 4,
                      "docs": [
                        "The owner turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "index": 5,
                      "docs": [
                        "The witness data given does not match the current state of the chain."
                      ]
                    },
                    {
                      "name": "CollectionIdInUse",
                      "index": 6,
                      "docs": [
                        "Collection ID is already taken."
                      ]
                    },
                    {
                      "name": "ItemsNonTransferable",
                      "index": 7,
                      "docs": [
                        "Items within that collection are non-transferable."
                      ]
                    },
                    {
                      "name": "NotDelegate",
                      "index": 8,
                      "docs": [
                        "The provided account is not a delegate."
                      ]
                    },
                    {
                      "name": "WrongDelegate",
                      "index": 9,
                      "docs": [
                        "The delegate turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "Unaccepted",
                      "index": 11,
                      "docs": [
                        "The named owner has not signed ownership acceptance of the collection."
                      ]
                    },
                    {
                      "name": "ItemLocked",
                      "index": 12,
                      "docs": [
                        "The item is locked (non-transferable)."
                      ]
                    },
                    {
                      "name": "LockedItemAttributes",
                      "index": 13,
                      "docs": [
                        "Item's attributes are locked."
                      ]
                    },
                    {
                      "name": "LockedCollectionAttributes",
                      "index": 14,
                      "docs": [
                        "Collection's attributes are locked."
                      ]
                    },
                    {
                      "name": "LockedItemMetadata",
                      "index": 15,
                      "docs": [
                        "Item's metadata is locked."
                      ]
                    },
                    {
                      "name": "LockedCollectionMetadata",
                      "index": 16,
                      "docs": [
                        "Collection's metadata is locked."
                      ]
                    },
                    {
                      "name": "MaxSupplyReached",
                      "index": 17,
                      "docs": [
                        "All items have been minted."
                      ]
                    },
                    {
                      "name": "MaxSupplyLocked",
                      "index": 18,
                      "docs": [
                        "The max supply is locked and can't be changed."
                      ]
                    },
                    {
                      "name": "MaxSupplyTooSmall",
                      "index": 19,
                      "docs": [
                        "The provided max supply is less than the number of items a collection already has."
                      ]
                    },
                    {
                      "name": "UnknownItem",
                      "index": 20,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "UnknownSwap",
                      "index": 21,
                      "docs": [
                        "Swap doesn't exist."
                      ]
                    },
                    {
                      "name": "MetadataNotFound",
                      "index": 22,
                      "docs": [
                        "The given item has no metadata set."
                      ]
                    },
                    {
                      "name": "AttributeNotFound",
                      "index": 23,
                      "docs": [
                        "The provided attribute can't be found."
                      ]
                    },
                    {
                      "name": "NotForSale",
                      "index": 24,
                      "docs": [
                        "Item is not for sale."
                      ]
                    },
                    {
                      "name": "BidTooLow",
                      "index": 25,
                      "docs": [
                        "The provided bid is too low."
                      ]
                    },
                    {
                      "name": "ReachedApprovalLimit",
                      "index": 26,
                      "docs": [
                        "The item has reached its approval limit."
                      ]
                    },
                    {
                      "name": "DeadlineExpired",
                      "index": 27,
                      "docs": [
                        "The deadline has already expired."
                      ]
                    },
                    {
                      "name": "WrongDuration",
                      "index": 28,
                      "docs": [
                        "The duration provided should be less than or equal to `MaxDeadlineDuration`."
                      ]
                    },
                    {
                      "name": "MethodDisabled",
                      "index": 29,
                      "docs": [
                        "The method is disabled by system settings."
                      ]
                    },
                    {
                      "name": "WrongSetting",
                      "index": 30,
                      "docs": [
                        "The provided setting can't be set."
                      ]
                    },
                    {
                      "name": "InconsistentItemConfig",
                      "index": 31,
                      "docs": [
                        "Item's config already exists and should be equal to the provided one."
                      ]
                    },
                    {
                      "name": "NoConfig",
                      "index": 32,
                      "docs": [
                        "Config for a collection or an item can't be found."
                      ]
                    },
                    {
                      "name": "RolesNotCleared",
                      "index": 33,
                      "docs": [
                        "Some roles were not cleared."
                      ]
                    },
                    {
                      "name": "MintNotStarted",
                      "index": 34,
                      "docs": [
                        "Mint has not started yet."
                      ]
                    },
                    {
                      "name": "MintEnded",
                      "index": 35,
                      "docs": [
                        "Mint has already ended."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "index": 36,
                      "docs": [
                        "The provided Item was already used for claiming."
                      ]
                    },
                    {
                      "name": "IncorrectData",
                      "index": 37,
                      "docs": [
                        "The provided data is incorrect."
                      ]
                    },
                    {
                      "name": "WrongOrigin",
                      "index": 38,
                      "docs": [
                        "The extrinsic was sent by the wrong origin."
                      ]
                    },
                    {
                      "name": "WrongSignature",
                      "index": 39,
                      "docs": [
                        "The provided signature is incorrect."
                      ]
                    },
                    {
                      "name": "IncorrectMetadata",
                      "index": 40,
                      "docs": [
                        "The provided metadata might be too long."
                      ]
                    },
                    {
                      "name": "MaxAttributesLimitReached",
                      "index": 41,
                      "docs": [
                        "Can't set more attributes per one call."
                      ]
                    },
                    {
                      "name": "WrongNamespace",
                      "index": 42,
                      "docs": [
                        "The provided namespace isn't supported in this call."
                      ]
                    },
                    {
                      "name": "CollectionNotEmpty",
                      "index": 43,
                      "docs": [
                        "Can't delete non-empty collections."
                      ]
                    },
                    {
                      "name": "WitnessRequired",
                      "index": 44,
                      "docs": [
                        "The witness data should be provided."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 509,
            "type": {
              "def": {
                "tuple": [
                  510,
                  511,
                  512,
                  513,
                  514,
                  516,
                  517,
                  518,
                  519,
                  520
                ]
              }
            }
          },
          {
            "id": 510,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 511,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 512,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 513,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 514,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 515,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 515,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 516,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "T::Nonce"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 517,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 518,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 55,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 519,
            "type": {
              "path": [
                "cumulus_primitives_storage_weight_reclaim",
                "StorageWeightReclaim"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 520,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "CheckMetadataHash"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "mode",
                      "type": 521,
                      "typeName": "Mode"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 521,
            "type": {
              "path": [
                "frame_metadata_hash_extension",
                "Mode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Disabled",
                      "index": 0
                    },
                    {
                      "name": "Enabled",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 522,
            "type": {
              "path": [
                "storage_hub_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 523,
            "type": {
              "path": [
                "storage_hub_runtime",
                "RuntimeError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 231,
                          "typeName": "frame_system::Error<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ParachainSystem",
                      "fields": [
                        {
                          "type": 271,
                          "typeName": "cumulus_pallet_parachain_system::Error<Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 295,
                          "typeName": "pallet_balances::Error<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 392,
                          "typeName": "pallet_sudo::Error<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "CollatorSelection",
                      "fields": [
                        {
                          "type": 397,
                          "typeName": "pallet_collator_selection::Error<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 402,
                          "typeName": "pallet_session::Error<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "XcmpQueue",
                      "fields": [
                        {
                          "type": 417,
                          "typeName": "cumulus_pallet_xcmp_queue::Error<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "PolkadotXcm",
                      "fields": [
                        {
                          "type": 437,
                          "typeName": "pallet_xcm::Error<Runtime>"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "MessageQueue",
                      "fields": [
                        {
                          "type": 444,
                          "typeName": "pallet_message_queue::Error<Runtime>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Providers",
                      "fields": [
                        {
                          "type": 454,
                          "typeName": "pallet_storage_providers::Error<Runtime>"
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "FileSystem",
                      "fields": [
                        {
                          "type": 467,
                          "typeName": "pallet_file_system::Error<Runtime>"
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "ProofsDealer",
                      "fields": [
                        {
                          "type": 476,
                          "typeName": "pallet_proofs_dealer::Error<Runtime>"
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "PaymentStreams",
                      "fields": [
                        {
                          "type": 482,
                          "typeName": "pallet_payment_streams::Error<Runtime>"
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "BucketNfts",
                      "fields": [
                        {
                          "type": 483,
                          "typeName": "pallet_bucket_nfts::Error<Runtime>"
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Nfts",
                      "fields": [
                        {
                          "type": 508,
                          "typeName": "pallet_nfts::Error<Runtime>"
                        }
                      ],
                      "index": 50
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "InherentsApplied",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether all inherents have been applied."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 14
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 19
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 211
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 213
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 210
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 215
                },
                "default": [
                  0
                ],
                "docs": [
                  " `Some` if a code upgrade has been authorized."
                ]
              }
            ]
          },
          "calls": {
            "ty": 216
          },
          "event": {
            "ty": 22
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 219,
              "value": [
                7,
                0,
                242,
                5,
                42,
                1,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                2,
                0,
                64,
                1,
                2,
                101,
                205,
                29,
                0,
                1,
                11,
                192,
                86,
                13,
                239,
                69,
                1,
                2,
                0,
                224,
                0,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                2,
                0,
                240,
                0,
                1,
                0,
                0,
                2,
                101,
                205,
                29,
                0,
                1,
                11,
                192,
                222,
                95,
                89,
                186,
                1,
                2,
                0,
                48,
                1,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                2,
                0,
                64,
                1,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                2,
                0,
                80,
                0,
                2,
                101,
                205,
                29,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 223,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 225,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 226,
              "value": [
                76,
                115,
                116,
                111,
                114,
                97,
                103,
                101,
                45,
                104,
                117,
                98,
                45,
                114,
                117,
                110,
                116,
                105,
                109,
                101,
                76,
                115,
                116,
                111,
                114,
                97,
                103,
                101,
                45,
                104,
                117,
                98,
                45,
                114,
                117,
                110,
                116,
                105,
                109,
                101,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                80,
                215,
                189,
                216,
                162,
                114,
                202,
                13,
                101,
                1,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                5,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                243,
                255,
                20,
                213,
                171,
                82,
                112,
                89,
                3,
                0,
                0,
                0,
                111,
                245,
                46,
                232,
                88,
                230,
                197,
                189,
                1,
                0,
                0,
                0,
                145,
                177,
                200,
                177,
                99,
                40,
                235,
                146,
                1,
                0,
                0,
                0,
                159,
                251,
                80,
                90,
                167,
                56,
                214,
                156,
                1,
                0,
                0,
                0,
                234,
                147,
                227,
                241,
                111,
                61,
                105,
                98,
                2,
                0,
                0,
                0,
                251,
                197,
                119,
                185,
                215,
                71,
                239,
                214,
                1,
                0,
                0,
                0,
                185,
                231,
                113,
                122,
                206,
                91,
                69,
                205,
                1,
                0,
                0,
                0,
                16,
                120,
                215,
                172,
                36,
                160,
                123,
                14,
                1,
                0,
                0,
                0,
                11,
                231,
                32,
                137,
                84,
                199,
                198,
                201,
                1,
                0,
                0,
                0,
                150,
                102,
                4,
                255,
                231,
                142,
                176,
                146,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1
              ],
              "docs": [
                " Get the chain's in-code version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 230,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 231
          },
          "index": 0,
          "docs": []
        },
        {
          "name": "ParachainSystem",
          "storage": {
            "prefix": "ParachainSystem",
            "entries": [
              {
                "name": "UnincludedSegment",
                "modifier": "Default",
                "ty": {
                  "Plain": 232
                },
                "default": [
                  0
                ],
                "docs": [
                  " Latest included block descendants the runtime accepted. In other words, these are",
                  " ancestors of the currently executing block which have not been included in the observed",
                  " relay-chain state.",
                  "",
                  " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                  " in the pallet."
                ]
              },
              {
                "name": "AggregatedUnincludedSegment",
                "modifier": "Optional",
                "ty": {
                  "Plain": 241
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                  " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                  " respect to relay chain constraints."
                ]
              },
              {
                "name": "PendingValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " In case of a scheduled upgrade, this storage field contains the validation code to be",
                  " applied.",
                  "",
                  " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                  " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                  " with the new validation code. This concludes the upgrade process."
                ]
              },
              {
                "name": "NewValidationCode",
                "modifier": "Optional",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " Validation code that is set by the parachain and is to be communicated to collator and",
                  " consequently the relay-chain.",
                  "",
                  " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                  " the value."
                ]
              },
              {
                "name": "ValidationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 242
                },
                "default": [
                  0
                ],
                "docs": [
                  " The [`PersistedValidationData`] set for this block.",
                  " This value is expected to be set only once per block and it's never stored",
                  " in the trie."
                ]
              },
              {
                "name": "DidSetValidationCode",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Were the validation data set to notify the relay chain?"
                ]
              },
              {
                "name": "LastRelayChainBlockNumber",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block number associated with the last parachain block.",
                  "",
                  " This is updated in `on_finalize`."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": "Default",
                "ty": {
                  "Plain": 244
                },
                "default": [
                  0
                ],
                "docs": [
                  " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                  " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                  " candidate will be invalid.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "UpgradeGoAhead",
                "modifier": "Default",
                "ty": {
                  "Plain": 239
                },
                "default": [
                  0
                ],
                "docs": [
                  " Optional upgrade go-ahead signal from the relay-chain.",
                  "",
                  " This storage item is a mirror of the corresponding value for the current parachain from the",
                  " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                  " set after the inherent."
                ]
              },
              {
                "name": "RelayStateProof",
                "modifier": "Optional",
                "ty": {
                  "Plain": 246
                },
                "default": [
                  0
                ],
                "docs": [
                  " The state proof for the last relay parent block.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "RelevantMessagingState",
                "modifier": "Optional",
                "ty": {
                  "Plain": 248
                },
                "default": [
                  0
                ],
                "docs": [
                  " The snapshot of some state related to messaging relevant to the current parachain as per",
                  " the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "HostConfiguration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 253
                },
                "default": [
                  0
                ],
                "docs": [
                  " The parachain host configuration that was obtained from the relay parent.",
                  "",
                  " This field is meant to be updated each block with the validation data inherent. Therefore,",
                  " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                  "",
                  " This data is also absent from the genesis."
                ]
              },
              {
                "name": "LastDmqMqcHead",
                "modifier": "Default",
                "ty": {
                  "Plain": 255
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last downward message queue chain head we have observed.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "LastHrmpMqcHeads",
                "modifier": "Default",
                "ty": {
                  "Plain": 256
                },
                "default": [
                  0
                ],
                "docs": [
                  " The message queue chain heads we have observed per each channel incoming channel.",
                  "",
                  " This value is loaded before and saved after processing inbound downward messages carried",
                  " by the system inherent."
                ]
              },
              {
                "name": "ProcessedDownwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of downward messages processed in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpWatermark",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " HRMP watermark that was set in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "HrmpOutboundMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 259
                },
                "default": [
                  0
                ],
                "docs": [
                  " HRMP messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "UpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 144
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that were sent in a block.",
                  "",
                  " This will be cleared in `on_initialize` of each new block."
                ]
              },
              {
                "name": "PendingUpwardMessages",
                "modifier": "Default",
                "ty": {
                  "Plain": 144
                },
                "default": [
                  0
                ],
                "docs": [
                  " Upward messages that are still pending and not yet send to the relay chain."
                ]
              },
              {
                "name": "UpwardDeliveryFeeFactor",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The factor to multiply the base delivery fee by for UMP."
                ]
              },
              {
                "name": "AnnouncedHrmpMessagesPerCandidate",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                  " announcing the weight of `on_initialize` and `on_finalize`."
                ]
              },
              {
                "name": "ReservedXcmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "ReservedDmpWeightOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": [
                  " The weight we reserve at the beginning of the block for processing DMP messages. This",
                  " overrides the amount set in the Config trait."
                ]
              },
              {
                "name": "CustomValidationHeadData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " A custom head data that should be returned as result of `validate_block`.",
                  "",
                  " See `Pallet::set_custom_validation_head_data` for more information."
                ]
              }
            ]
          },
          "calls": {
            "ty": 262
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "SelfParaId",
              "ty": 122,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Returns the parachain ID we are running with."
              ]
            }
          ],
          "error": {
            "ty": 271
          },
          "index": 1,
          "docs": []
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the timestamp has been updated in this block.",
                  "",
                  " This value is updated to `true` upon successful submission of a timestamp by a node.",
                  " It is then checked at the end of each block execution in the `on_finalize` hook."
                ]
              }
            ]
          },
          "calls": {
            "ty": 272
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 12,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks.",
                "",
                " Be aware that this is different to the *expected* period that the block production",
                " apparatus provides. Your chosen consensus system will generally work with this to",
                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                " period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 2,
          "docs": []
        },
        {
          "name": "ParachainInfo",
          "storage": {
            "prefix": "ParachainInfo",
            "entries": [
              {
                "name": "ParachainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 122
                },
                "default": [
                  100,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 273
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 3,
          "docs": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 274
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                  "",
                  " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 278
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances.",
                  "",
                  " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 281
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 288
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 291
          },
          "event": {
            "ty": 33
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": {
            "ty": 295
          },
          "index": 10,
          "docs": []
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 296
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 35
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 11,
          "docs": []
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 297
          },
          "event": {
            "ty": 36
          },
          "constants": [],
          "error": {
            "ty": 392
          },
          "index": 15,
          "docs": []
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 20,
          "docs": []
        },
        {
          "name": "CollatorSelection",
          "storage": {
            "prefix": "CollatorSelection",
            "entries": [
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "ty": {
                  "Plain": 393
                },
                "default": [
                  0
                ],
                "docs": [
                  " The invulnerable, permissioned collators. This list must be sorted."
                ]
              },
              {
                "name": "CandidateList",
                "modifier": "Default",
                "ty": {
                  "Plain": 394
                },
                "default": [
                  0
                ],
                "docs": [
                  " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
                  " mutually exclusive.",
                  "",
                  " This list is sorted in ascending order by deposit and when the deposits are equal, the least",
                  " recently updated is considered greater."
                ]
              },
              {
                "name": "LastAuthoredBlock",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Last block authored by collator."
                ]
              },
              {
                "name": "DesiredCandidates",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Desired number of candidates.",
                  "",
                  " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
                ]
              },
              {
                "name": "CandidacyBond",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Fixed amount to deposit to become a collator.",
                  "",
                  " When a collator calls `leave_intent` they immediately receive the deposit back."
                ]
              }
            ]
          },
          "calls": {
            "ty": 299
          },
          "event": {
            "ty": 40
          },
          "constants": [],
          "error": {
            "ty": 397
          },
          "index": 21,
          "docs": []
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 41
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 398
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 167
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 301
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 400,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 300
          },
          "event": {
            "ty": 42
          },
          "constants": [],
          "error": {
            "ty": 402
          },
          "index": 22,
          "docs": []
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 403
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 405
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "SlotDuration",
              "ty": 12,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The slot duration Aura should run with, expressed in milliseconds.",
                " The effective value of this type should not change while the chain is running.",
                "",
                " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
              ]
            }
          ],
          "error": null,
          "index": 23,
          "docs": []
        },
        {
          "name": "AuraExt",
          "storage": {
            "prefix": "AuraExt",
            "entries": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "ty": {
                  "Plain": 403
                },
                "default": [
                  0
                ],
                "docs": [
                  " Serves as cache for the authorities.",
                  "",
                  " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                  " but we require the old authorities to verify the seal when validating a PoV. This will",
                  " always be updated to the latest AuRa authorities in `on_finalize`."
                ]
              },
              {
                "name": "SlotInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 406
                },
                "default": [
                  0
                ],
                "docs": [
                  " Current slot paired with a number of authored blocks.",
                  "",
                  " Updated on each block initialization."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 24,
          "docs": []
        },
        {
          "name": "XcmpQueue",
          "storage": {
            "prefix": "XcmpQueue",
            "entries": [
              {
                "name": "InboundXcmpSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 407
                },
                "default": [
                  0
                ],
                "docs": [
                  " The suspended inbound XCMP channels. All others are not suspended.",
                  "",
                  " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                  " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                  " within the block and therefore only included once in the proof size.",
                  "",
                  " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                  " will be smaller."
                ]
              },
              {
                "name": "OutboundXcmpStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 410
                },
                "default": [
                  0
                ],
                "docs": [
                  " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                  " and last outbound message. If the two indices are equal, then it indicates an empty",
                  " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                  " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                  " case of the need to send a high-priority signal message this block.",
                  " The bool is true if there is a signal message waiting to be sent."
                ]
              },
              {
                "name": "OutboundXcmpMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 414,
                    "value": 415
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The messages outbound in a given XCMP channel."
                ]
              },
              {
                "name": "SignalMessages",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 122,
                    "value": 415
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any signal messages waiting to be sent."
                ]
              },
              {
                "name": "QueueConfig",
                "modifier": "Default",
                "ty": {
                  "Plain": 416
                },
                "default": [
                  32,
                  0,
                  0,
                  0,
                  48,
                  0,
                  0,
                  0,
                  8,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The configuration which controls the dynamics of the outbound queue."
                ]
              },
              {
                "name": "QueueSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
                ]
              },
              {
                "name": "DeliveryFeeFactor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 122,
                    "value": 261
                  }
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The factor to multiply the base delivery fee by."
                ]
              }
            ]
          },
          "calls": {
            "ty": 303
          },
          "event": {
            "ty": 43
          },
          "constants": [
            {
              "name": "MaxInboundSuspended",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
                "",
                " Any further channel suspensions will fail and messages may get dropped without further",
                " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
                " [`InboundXcmpSuspended`] still applies at that scale."
              ]
            },
            {
              "name": "MaxActiveOutboundChannels",
              "ty": 4,
              "value": [
                128,
                0,
                0,
                0
              ],
              "docs": [
                " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
                "",
                " If this is reached, then no further messages can be sent to channels that do not yet",
                " have a message queued. This should be set to the expected maximum of outbound channels",
                " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
                " since otherwise the congestion control protocol will not work as intended and messages",
                " may be dropped. This value increases the PoV and should therefore not be picked too",
                " high. Governance needs to pay attention to not open more channels than this value."
              ]
            },
            {
              "name": "MaxPageSize",
              "ty": 4,
              "value": [
                0,
                0,
                1,
                0
              ],
              "docs": [
                " The maximal page size for HRMP message pages.",
                "",
                " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
                " benchmarking. The limit for the size of a message is slightly below this, since some",
                " overhead is incurred for encoding the format."
              ]
            }
          ],
          "error": {
            "ty": 417
          },
          "index": 30,
          "docs": []
        },
        {
          "name": "PolkadotXcm",
          "storage": {
            "prefix": "PolkadotXcm",
            "entries": [
              {
                "name": "QueryCounter",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 418
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 13,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 423,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 423,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 423,
                    "value": 424
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 425
                },
                "default": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": "Optional",
                "ty": {
                  "Plain": 428
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 429,
                    "value": 430
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 434
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Global suspension state of the XCM executor."
                ]
              },
              {
                "name": "ShouldRecordXcm",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                  " Only one XCM program will be recorded at a time.",
                  " This is meant to be used in runtime APIs, and it's advised it stays false",
                  " for all other use cases, so as to not degrade regular performance.",
                  "",
                  " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                  " implementation in the XCM executor configuration."
                ]
              },
              {
                "name": "RecordedXcm",
                "modifier": "Optional",
                "ty": {
                  "Plain": 65
                },
                "default": [
                  0
                ],
                "docs": [
                  " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                  " will be stored here.",
                  " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                  "",
                  " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                  " implementation in the XCM executor configuration."
                ]
              }
            ]
          },
          "calls": {
            "ty": 304
          },
          "event": {
            "ty": 44
          },
          "constants": [],
          "error": {
            "ty": 437
          },
          "index": 31,
          "docs": []
        },
        {
          "name": "CumulusXcm",
          "storage": null,
          "calls": {
            "ty": 344
          },
          "event": {
            "ty": 119
          },
          "constants": [],
          "error": null,
          "index": 32,
          "docs": []
        },
        {
          "name": "MessageQueue",
          "storage": {
            "prefix": "MessageQueue",
            "entries": [
              {
                "name": "BookStateFor",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 121,
                    "value": 438
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The index of the first and last (non-empty) pages."
                ]
              },
              {
                "name": "ServiceHead",
                "modifier": "Optional",
                "ty": {
                  "Plain": 121
                },
                "default": [
                  0
                ],
                "docs": [
                  " The origin at which we should begin servicing."
                ]
              },
              {
                "name": "Pages",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 441,
                    "value": 442
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The map of page indices to pages."
                ]
              }
            ]
          },
          "calls": {
            "ty": 345
          },
          "event": {
            "ty": 120
          },
          "constants": [
            {
              "name": "HeapSize",
              "ty": 4,
              "value": [
                0,
                156,
                1,
                0
              ],
              "docs": [
                " The size of the page; this implies the maximum message size which can be sent.",
                "",
                " A good value depends on the expected message sizes, their weights, the weight that is",
                " available for processing them and the maximal needed message size. The maximal message",
                " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
              ]
            },
            {
              "name": "MaxStale",
              "ty": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                " can happen. Once there are more stale pages than this, then historical pages may be",
                " dropped, even if they contain unprocessed overweight messages."
              ]
            },
            {
              "name": "ServiceWeight",
              "ty": 222,
              "value": [
                1,
                7,
                0,
                88,
                64,
                251,
                162,
                2,
                0,
                112,
                0
              ],
              "docs": [
                " The amount of weight (if any) which should be provided to the message queue for",
                " servicing enqueued items `on_initialize`.",
                "",
                " This may be legitimately `None` in the case that you will call",
                " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
                " it run in `on_idle`."
              ]
            },
            {
              "name": "IdleMaxServiceWeight",
              "ty": 222,
              "value": [
                0
              ],
              "docs": [
                " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
                " should be provided to the message queue for servicing enqueued items `on_idle`.",
                " Useful for parachains to process messages at the same block they are received.",
                "",
                " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
              ]
            }
          ],
          "error": {
            "ty": 444
          },
          "index": 33,
          "docs": []
        },
        {
          "name": "Providers",
          "storage": {
            "prefix": "Providers",
            "entries": [
              {
                "name": "SignUpRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 445
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from an AccountId that requested to sign up to a tuple of the metadata with type of the request, and the block",
                  " number when the request was made.",
                  "",
                  " This is used for the two-step process of registering: when a user requests to register as a SP (either MSP or BSP),",
                  " that request with the metadata and the deposit held is stored here. When the user confirms the sign up, the",
                  " request is removed from this storage and the user is registered as a SP.",
                  "",
                  " This storage is updated in:",
                  " - [request_msp_sign_up](crate::dispatchables::request_msp_sign_up) and [request_bsp_sign_up](crate::dispatchables::request_bsp_sign_up), which add a new entry to the map.",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up) and [cancel_sign_up](crate::dispatchables::cancel_sign_up), which remove an existing entry from the map."
                ]
              },
              {
                "name": "AccountIdToMainStorageProviderId",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from an AccountId to a MainStorageProviderId.",
                  "",
                  " This is used to get a Main Storage Provider's unique identifier needed to access its metadata.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds a new entry to the map if the account to confirm is a Main Storage Provider.",
                  " - [msp_sign_off](crate::dispatchables::msp_sign_off), which removes the corresponding entry from the map."
                ]
              },
              {
                "name": "MainStorageProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 449
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from a MainStorageProviderId to a MainStorageProvider.",
                  "",
                  " This is used to get a Main Storage Provider's metadata.",
                  " It returns `None` if the Main Storage Provider ID does not correspond to any registered Main Storage Provider.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds a new entry to the map if the account to confirm is a Main Storage Provider.",
                  " - [msp_sign_off](crate::dispatchables::msp_sign_off), which removes the corresponding entry from the map.",
                  " - [change_capacity](crate::dispatchables::change_capacity), which changes the entry's `capacity`."
                ]
              },
              {
                "name": "Buckets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 450
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from a BucketId to that bucket's metadata.",
                  "",
                  " This is used to get a bucket's metadata, such as root, user ID, and MSP ID.",
                  " It returns `None` if the Bucket ID does not correspond to any registered bucket.",
                  "",
                  " This storage is updated in:",
                  " - [add_bucket](shp_traits::MutateProvidersInterface::add_bucket), which adds a new entry to the map.",
                  " - [change_root_bucket](shp_traits::MutateProvidersInterface::change_root_bucket), which changes the corresponding bucket's root.",
                  " - [remove_root_bucket](shp_traits::MutateProvidersInterface::remove_root_bucket), which removes the entry of the corresponding bucket."
                ]
              },
              {
                "name": "MainStorageProviderIdsToBuckets",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The double mapping from a MainStorageProviderId to a BucketIds.",
                  "",
                  " This is used to efficiently retrieve the list of buckets that a Main Storage Provider is currently storing.",
                  "",
                  " This storage is updated in:",
                  " - [add_bucket](shp_traits::MutateProvidersInterface::add_bucket)",
                  " - [remove_root_bucket](shp_traits::MutateProvidersInterface::remove_root_bucket)"
                ]
              },
              {
                "name": "AccountIdToBackupStorageProviderId",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from an AccountId to a BackupStorageProviderId.",
                  "",
                  " This is used to get a Backup Storage Provider's unique identifier needed to access its metadata.",
                  "",
                  " This storage is updated in:",
                  "",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds a new entry to the map if the account to confirm is a Backup Storage Provider.",
                  " - [bsp_sign_off](crate::dispatchables::bsp_sign_off), which removes the corresponding entry from the map."
                ]
              },
              {
                "name": "BackupStorageProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 447
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from a BackupStorageProviderId to a BackupStorageProvider.",
                  "",
                  " This is used to get a Backup Storage Provider's metadata.",
                  " It returns `None` if the Backup Storage Provider ID does not correspond to any registered Backup Storage Provider.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds a new entry to the map if the account to confirm is a Backup Storage Provider.",
                  " - [bsp_sign_off](crate::dispatchables::bsp_sign_off), which removes the corresponding entry from the map.",
                  " - [change_capacity](crate::dispatchables::change_capacity), which changes the entry's `capacity`."
                ]
              },
              {
                "name": "MspCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount of Main Storage Providers that are currently registered in the runtime.",
                  "",
                  " This is used to keep track of the total amount of MSPs in the system.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds one to this storage if the account to confirm is a Main Storage Provider.",
                  " - [msp_sign_off](crate::dispatchables::msp_sign_off), which subtracts one from this storage."
                ]
              },
              {
                "name": "BspCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount of Backup Storage Providers that are currently registered in the runtime.",
                  "",
                  " This is used to keep track of the total amount of BSPs in the system.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds one to this storage if the account to confirm is a Backup Storage Provider.",
                  " - [bsp_sign_off](crate::dispatchables::bsp_sign_off), which subtracts one from this storage."
                ]
              },
              {
                "name": "TotalBspsCapacity",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total amount of storage capacity all BSPs have.",
                  "",
                  " This is used to keep track of the total amount of storage capacity all BSPs have in the system, which is also the",
                  " total amount of storage capacity that can be used by users if we factor in the replication factor.",
                  "",
                  " This storage is updated in:",
                  " - [confirm_sign_up](crate::dispatchables::confirm_sign_up), which adds the capacity of the registered Storage Provider to this storage if the account to confirm is a Backup Storage Provider.",
                  " - [bsp_sign_off](crate::dispatchables::bsp_sign_off), which subtracts the capacity of the Backup Storage Provider to sign off from this storage."
                ]
              },
              {
                "name": "UsedBspsCapacity",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total amount of storage capacity of BSPs that is currently in use.",
                  "",
                  " This is used to keep track of the total amount of storage capacity that is currently in use by users, which is useful for",
                  " system metrics and also to calculate the current price of storage."
                ]
              },
              {
                "name": "GlobalBspsReputationWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total global reputation weight of all BSPs."
                ]
              },
              {
                "name": "MainStorageProviderIdsToValuePropositions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 129
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Double mapping from a [`MainStorageProviderId`] to [`ValueProposition`]s.",
                  "",
                  " These are applied at the bucket level. Propositions are the price per [`Config::StorageDataUnit`] per block and the",
                  " limit of data that can be stored in the bucket."
                ]
              },
              {
                "name": "AwaitingTopUpFromProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 131,
                    "value": 132
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage providers currently awaited for to top up their deposit (providers whom have been slashed and as",
                  " a result have a capacity deficit, i.e. their capacity is below their used capacity).",
                  "",
                  " This is primarily used to lookup providers and restrict certain operations while they are in this state.",
                  "",
                  " Providers can optionally call the `top_up_deposit` during the grace period to top up their held deposit to cover the capacity deficit.",
                  " As a result, their provider account would be cleared from this storage.",
                  "",
                  " The `on_idle` hook will process every provider in this storage and mark them as insolvent.",
                  " If a provider is marked as insolvent, the network (e.g users, other providers) can call `issue_storage_request`",
                  " with a replication target of 1 to fill a slot with another BSP if the provider who was marked as insolvent is in fact a BSP.",
                  " If it was an MSP, the user can decide to move their buckets to another MSP or delete their buckets (as they normally can)."
                ]
              },
              {
                "name": "ProviderTopUpExpirations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 452
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map of Storage Hub tick numbers to expired provider top up expired items.",
                  "",
                  " Processed in the `on_idle` hook.",
                  "",
                  " Provider top up expiration items are ignored and cleared if the provider is not found in the [`AwaitingTopUpFromProviders`] storage.",
                  " Providers are removed from [`AwaitingTopUpFromProviders`] storage when they have successfully topped up their deposit.",
                  " If they are still part of the [`AwaitingTopUpFromProviders`] storage after the expiration period, they are marked as insolvent."
                ]
              },
              {
                "name": "NextAvailableProviderTopUpExpirationShTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pointer to the earliest available Storage Hub tick to insert a new provider top up expiration item.",
                  "",
                  " This should always be greater or equal than `current_sh_tick` + [`Config::ProviderTopUpTtl`]."
                ]
              },
              {
                "name": "NextStartingShTickToCleanUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pointer to the starting Storage Hub tick number to clean up expired items.",
                  "",
                  " If this Storage Hub tick is behind the one, the cleanup algorithm in `on_idle` will",
                  " attempt to advance this tick pointer as close to or up to the current one. This",
                  " will execute provided that there is enough remaining weight to do so."
                ]
              },
              {
                "name": "InsolventProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 131,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map of insolvent providers who have failed to top up their deposit before the end of the expiration.",
                  "",
                  " Providers are marked insolvent by the `on_idle` hook."
                ]
              }
            ]
          },
          "calls": {
            "ty": 346
          },
          "event": {
            "ty": 124
          },
          "constants": [
            {
              "name": "Treasury",
              "ty": 0,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The Treasury AccountId.",
                " The account to which:",
                " - The fees for submitting a challenge are transferred.",
                " - The slashed funds are transferred."
              ]
            },
            {
              "name": "SpMinDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that an account has to deposit to become a storage provider."
              ]
            },
            {
              "name": "SpMinCapacity",
              "ty": 12,
              "value": [
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount that a BSP receives as allocation of storage capacity when it deposits SpMinDeposit."
              ]
            },
            {
              "name": "DepositPerData",
              "ty": 6,
              "value": [
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The slope of the collateral vs storage capacity curve. In other terms, how many tokens a Storage Provider should add as collateral to increase its storage capacity in one unit of StorageDataUnit."
              ]
            },
            {
              "name": "MaxFileSize",
              "ty": 12,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " The estimated maximum size of an unknown file.",
                "",
                " Used primarily to slash a Storage Provider when it fails to provide a chunk of data for an unknown file size."
              ]
            },
            {
              "name": "MaxMultiAddressSize",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum size of a multiaddress."
              ]
            },
            {
              "name": "MaxMultiAddressAmount",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of multiaddresses that a Storage Provider can have."
              ]
            },
            {
              "name": "MaxProtocols",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of protocols the MSP can support (at least within the runtime)."
              ]
            },
            {
              "name": "BucketDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount that an account has to deposit to create a bucket."
              ]
            },
            {
              "name": "BucketNameLimit",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Type that represents the byte limit of a bucket name."
              ]
            },
            {
              "name": "MaxBlocksForRandomness",
              "ty": 4,
              "value": [
                176,
                4,
                0,
                0
              ],
              "docs": [
                " The maximum amount of blocks after which a sign up request expires so the randomness cannot be chosen"
              ]
            },
            {
              "name": "MinBlocksBetweenCapacityChanges",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount of blocks between capacity changes for a SP"
              ]
            },
            {
              "name": "DefaultMerkleRoot",
              "ty": 13,
              "value": [
                3,
                23,
                10,
                46,
                117,
                151,
                183,
                183,
                227,
                216,
                76,
                5,
                57,
                29,
                19,
                154,
                98,
                177,
                87,
                231,
                135,
                134,
                216,
                192,
                130,
                242,
                157,
                207,
                76,
                17,
                19,
                20
              ],
              "docs": [
                " The default value of the root of the Merkle Patricia Trie of the runtime"
              ]
            },
            {
              "name": "SlashAmountPerMaxFileSize",
              "ty": 6,
              "value": [
                0,
                64,
                229,
                156,
                48,
                18,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The slash factor deducted from a Storage Provider's deposit for every single storage proof they fail to provide."
              ]
            },
            {
              "name": "StartingReputationWeight",
              "ty": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Starting reputation weight for a newly registered BSP."
              ]
            },
            {
              "name": "BspSignUpLockPeriod",
              "ty": 4,
              "value": [
                128,
                198,
                19,
                0
              ],
              "docs": [
                " The amount of blocks that a BSP must wait before being able to sign off, after being signed up.",
                "",
                " This is to prevent BSPs from signing up and off too quickly, thus making it harder for an attacker",
                " to suddenly have a large portion of the total number of BSPs. The reason for this, is that the",
                " attacker would have to lock up a large amount of funds for this period of time."
              ]
            },
            {
              "name": "MaxCommitmentSize",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "ZeroSizeBucketFixedRate",
              "ty": 6,
              "value": [
                80,
                195,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " 0-size bucket fixed rate payment stream (i.e. the amount charged as a base",
                " fee for a bucket that doesn't have any files yet)"
              ]
            },
            {
              "name": "ProviderTopUpTtl",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " Time-to-live for a provider to top up their deposit to cover a capacity deficit.",
                "",
                " This TTL is used to determine at what point to insert the expiration item in the",
                " [`ProviderTopUpExpirations`] storage which is processed in the `on_idle` hook at",
                " the time when the tick has been reached."
              ]
            },
            {
              "name": "MaxExpiredItemsInBlock",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of expired items (per type) to clean up in a single block."
              ]
            }
          ],
          "error": {
            "ty": 454
          },
          "index": 40,
          "docs": []
        },
        {
          "name": "FileSystem",
          "storage": {
            "prefix": "FileSystem",
            "entries": [
              {
                "name": "StorageRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 455
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageRequestBsps",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 458
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A double map from file key to the BSP IDs of the BSPs that volunteered to store the file to whether that BSP has confirmed storing it.",
                  "",
                  " Any BSP under a file key prefix is considered to be a volunteer and can be removed at any time.",
                  " Once a BSP submits a valid proof via the `bsp_confirm_storing` extrinsic, the `confirmed` field in [`StorageRequestBspsMetadata`] will be set to `true`.",
                  "",
                  " When a storage request is expired or removed, the corresponding file key prefix in this map is removed."
                ]
              },
              {
                "name": "BucketsWithStorageRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bookkeeping of the buckets containing open storage requests."
                ]
              },
              {
                "name": "StorageRequestExpirations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 459
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map of ticks to expired storage requests."
                ]
              },
              {
                "name": "MoveBucketRequestExpirations",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 460
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map of ticks to expired move bucket requests."
                ]
              },
              {
                "name": "NextAvailableStorageRequestExpirationTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pointer to the earliest available tick to insert a new storage request expiration.",
                  "",
                  " This should always be greater or equal than current tick + [`Config::StorageRequestTtl`]."
                ]
              },
              {
                "name": "NextAvailableMoveBucketRequestExpirationTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pointer to the earliest available tick to insert a new move bucket request expiration.",
                  "",
                  " This should always be greater or equal than current tick + [`Config::MoveBucketRequestTtl`]."
                ]
              },
              {
                "name": "NextStartingTickToCleanUp",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A pointer to the starting tick to clean up expired items.",
                  "",
                  " If this tick is behind the current tick number, the cleanup algorithm in `on_idle` will",
                  " attempt to advance this tick pointer as close to or up to the current tick number. This",
                  " will execute provided that there is enough remaining weight to do so."
                ]
              },
              {
                "name": "PendingFileDeletionRequests",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 462
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending file deletion requests.",
                  "",
                  " A mapping from a user Account ID to a list of pending file deletion requests (which have the file information)."
                ]
              },
              {
                "name": "MspsAmountOfPendingFileDeletionRequests",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Mapping from MSPs to the amount of pending file deletion requests they have.",
                  "",
                  " This is used to keep track of the amount of pending file deletion requests each MSP has, so that MSPs are removed",
                  " from the privileged providers list if they have at least one, and are added back if they have none.",
                  " This is to ensure that MSPs are correctly incentivised to submit the required proofs for file deletions."
                ]
              },
              {
                "name": "PendingStopStoringRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 465
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending file stop storing requests.",
                  "",
                  " A double mapping from BSP IDs to a list of file keys pending stop storing requests to the block in which those requests were opened,",
                  " the proven size of the file and the owner of the file.",
                  " The block number is used to avoid BSPs being able to stop storing files immediately which would allow them to avoid challenges",
                  " of missing files. The size is to be able to decrease their used capacity when they confirm to stop storing the file.",
                  " The owner is to be able to update the payment stream between the user and the BSP."
                ]
              },
              {
                "name": "PendingMoveBucketRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 451,
                    "value": 466
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending move bucket requests.",
                  "",
                  " A double mapping from MSP IDs to a list of bucket IDs which they can accept or decline to take over.",
                  " The value is the user who requested the move."
                ]
              },
              {
                "name": "PendingBucketsToMove",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 38
                  }
                },
                "default": [],
                "docs": [
                  " Bookkeeping of buckets that are pending to be moved to a new MSP."
                ]
              }
            ]
          },
          "calls": {
            "ty": 347
          },
          "event": {
            "ty": 134
          },
          "constants": [
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The treasury account of the runtime, where a fraction of each payment goes."
              ]
            },
            {
              "name": "BspStopStoringFilePenalty",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Penalty payed by a BSP when they forcefully stop storing a file."
              ]
            },
            {
              "name": "FileDeletionRequestDeposit",
              "ty": 6,
              "value": [
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit paid by a user to create a new file deletion request.",
                "",
                " This deposit gets returned to the user when the MSP submits an inclusion proof of the file to",
                " confirm its deletion, but gets sent to the MSP if the MSP did not actually had the file and",
                " sends a non-inclusion proof instead. This is done to prevent users being able to spam MSPs",
                " with malicious file deletion requests."
              ]
            },
            {
              "name": "MaxBatchConfirmStorageRequests",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum batch of storage requests that can be confirmed at once when calling `bsp_confirm_storing`."
              ]
            },
            {
              "name": "MaxFilePathSize",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " Maximum byte size of a file path."
              ]
            },
            {
              "name": "MaxPeerIdSize",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum byte size of a peer id."
              ]
            },
            {
              "name": "MaxNumberOfPeerIds",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of peer ids for a storage request."
              ]
            },
            {
              "name": "MaxDataServerMultiAddresses",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of multiaddresses for a storage request."
              ]
            },
            {
              "name": "MaxExpiredItemsInTick",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of expired items (per type) to clean up in a single tick."
              ]
            },
            {
              "name": "StorageRequestTtl",
              "ty": 4,
              "value": [
                120,
                15,
                0,
                0
              ],
              "docs": [
                " Time-to-live for a storage request."
              ]
            },
            {
              "name": "MoveBucketRequestTtl",
              "ty": 4,
              "value": [
                40,
                0,
                0,
                0
              ],
              "docs": [
                " Time-to-live for a move bucket request, after which the request is considered expired."
              ]
            },
            {
              "name": "MaxUserPendingDeletionRequests",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of file deletion requests a user can have pending."
              ]
            },
            {
              "name": "MaxUserPendingMoveBucketRequests",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of move bucket requests a user can have pending."
              ]
            },
            {
              "name": "MinWaitForStopStoring",
              "ty": 4,
              "value": [
                28,
                13,
                0,
                0
              ],
              "docs": [
                " Number of ticks required to pass between a BSP requesting to stop storing a file and it being able to confirm to stop storing it."
              ]
            },
            {
              "name": "StorageRequestCreationDeposit",
              "ty": 6,
              "value": [
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Deposit held from the User when creating a new storage request"
              ]
            },
            {
              "name": "BasicReplicationTarget",
              "ty": 4,
              "value": [
                7,
                0,
                0,
                0
              ],
              "docs": [
                " Basic security replication target for a new storage request.",
                "",
                " This should be high enough so that it gives users a ~1% chance of their file",
                " being controlled by a single malicious entity under certain network conditions.",
                "",
                " For more details, see [crate::types::ReplicationTarget]."
              ]
            },
            {
              "name": "StandardReplicationTarget",
              "ty": 4,
              "value": [
                12,
                0,
                0,
                0
              ],
              "docs": [
                " Standard security replication target for a new storage request.",
                "",
                " This should be high enough so that it gives users a ~0.1% chance of their file",
                " being controlled by a single malicious entity under certain network conditions.",
                "",
                " For more details, see [crate::types::ReplicationTarget]."
              ]
            },
            {
              "name": "HighSecurityReplicationTarget",
              "ty": 4,
              "value": [
                17,
                0,
                0,
                0
              ],
              "docs": [
                " High security replication target for a new storage request.",
                "",
                " This should be high enough so that it gives users a ~0.01% chance of their file",
                " being controlled by a single malicious entity under certain network conditions.",
                "",
                " For more details, see [crate::types::ReplicationTarget]."
              ]
            },
            {
              "name": "SuperHighSecurityReplicationTarget",
              "ty": 4,
              "value": [
                22,
                0,
                0,
                0
              ],
              "docs": [
                " Super high security replication target for a new storage request.",
                "",
                " This should be high enough so that it gives users a ~0.001% chance of their file",
                " being controlled by a single malicious entity under certain network conditions.",
                "",
                " For more details, see [crate::types::ReplicationTarget]."
              ]
            },
            {
              "name": "UltraHighSecurityReplicationTarget",
              "ty": 4,
              "value": [
                26,
                0,
                0,
                0
              ],
              "docs": [
                " Ultra high security replication target for a new storage request.",
                "",
                " This should be high enough so that it gives users a ~0.0001% chance of their file",
                " being controlled by a single malicious entity under certain network conditions.",
                "",
                " For more details, see [crate::types::ReplicationTarget]."
              ]
            },
            {
              "name": "MaxReplicationTarget",
              "ty": 4,
              "value": [
                39,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum replication target that a user can select for a new storage request."
              ]
            },
            {
              "name": "TickRangeToMaximumThreshold",
              "ty": 4,
              "value": [
                16,
                14,
                0,
                0
              ],
              "docs": [
                " The amount of ticks that have to pass for the threshold to volunteer for a specific storage request",
                " to arrive at its maximum value."
              ]
            }
          ],
          "error": {
            "ty": 467
          },
          "index": 41,
          "docs": []
        },
        {
          "name": "ProofsDealer",
          "storage": {
            "prefix": "ProofsDealer",
            "entries": [
              {
                "name": "TickToChallengesSeed",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from challenges tick to a random seed used for generating the challenges in that tick.",
                  "",
                  " This is used to keep track of the challenges' seed in the past.",
                  " This mapping goes back only [`ChallengeHistoryLengthFor`] blocks. Previous challenges are removed."
                ]
              },
              {
                "name": "TickToCheckpointChallenges",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 152
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from challenges tick to a vector of custom challenged keys for that tick.",
                  "",
                  " This is used to keep track of the challenges that have been made in the past, specifically",
                  " in the checkpoint challenge rounds.",
                  " The vector is bounded by [`MaxCustomChallengesPerBlockFor`].",
                  " This mapping goes back only [`ChallengeHistoryLengthFor`] ticks. Previous challenges are removed."
                ]
              },
              {
                "name": "LastCheckpointTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The challenge tick of the last checkpoint challenge round.",
                  "",
                  " This is used to determine when to include the challenges from the [`ChallengesQueue`] and",
                  " [`PriorityChallengesQueue`] in the [`TickToCheckpointChallenges`] StorageMap. These checkpoint",
                  " challenge rounds have to be answered by ALL Providers, and this is enforced by the",
                  " `submit_proof` extrinsic."
                ]
              },
              {
                "name": "TickToProvidersDeadlines",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 468,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from challenge tick to a vector of challenged Providers for that tick.",
                  "",
                  " This is used to keep track of the Providers that have been challenged, and should",
                  " submit a proof by the time of the [`ChallengesTicker`] reaches the number used as",
                  " key in the mapping. Providers who do submit a proof are removed from their respective",
                  " entry and pushed forward to the next tick in which they should submit a proof.",
                  " Those who are still in the entry by the time the tick is reached are considered to",
                  " have failed to submit a proof and subject to slashing."
                ]
              },
              {
                "name": "ProviderToProofSubmissionRecord",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 469
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from a Provider to its [`ProofSubmissionRecord`], which stores the last tick",
                  " the Provider submitted a proof for, and the next tick the Provider should submit a proof for.",
                  "",
                  " Normally the difference between these two ticks is equal to the Provider's challenge period,",
                  " but if the Provider's period is changed, this change only affects the next cycle. In other words,",
                  " for one cycle, `next_tick_to_submit_proof_for - last_tick_proven ≠ provider_challenge_period`.",
                  "",
                  " If a Provider submits a proof successfully, both fields are updated.",
                  "",
                  " If the Provider fails to submit a proof in time and is slashed, only `next_tick_to_submit_proof_for`",
                  " is updated."
                ]
              },
              {
                "name": "ChallengesQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 470
                },
                "default": [
                  0
                ],
                "docs": [
                  " A queue of keys that have been challenged manually.",
                  "",
                  " The elements in this queue will be challenged in the coming blocks,",
                  " always ensuring that the maximum number of challenges per block is not exceeded.",
                  " A `BoundedVec` is used because the `parity_scale_codec::MaxEncodedLen` trait",
                  " is required, but using a `VecDeque` would be more efficient as this is a FIFO queue."
                ]
              },
              {
                "name": "PriorityChallengesQueue",
                "modifier": "Default",
                "ty": {
                  "Plain": 471
                },
                "default": [
                  0
                ],
                "docs": [
                  " A priority queue of keys that have been challenged manually.",
                  "",
                  " The difference between this and `ChallengesQueue` is that the challenges",
                  " in this queue are given priority over the others. So this queue should be",
                  " emptied before any of the challenges in the `ChallengesQueue` are dispatched.",
                  " This queue should not be accessible to the public.",
                  " The elements in this queue will be challenged in the coming blocks,",
                  " always ensuring that the maximum number of challenges per block is not exceeded.",
                  " A `BoundedVec` is used because the `parity_scale_codec::MaxEncodedLen` trait",
                  " is required, but using a `VecDeque` would be more efficient as this is a FIFO queue."
                ]
              },
              {
                "name": "ChallengesTicker",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A counter of blocks in which challenges were distributed.",
                  "",
                  " This counter is not necessarily the same as the block number, as challenges are",
                  " distributed in the `on_poll` hook, which happens at the beginning of every block,",
                  " so long as the block is not part of a [Multi-Block-Migration](https://github.com/paritytech/polkadot-sdk/pull/1781) (MBM).",
                  " During MBMsm, the block number increases, but [`ChallengesTicker`] does not."
                ]
              },
              {
                "name": "SlashableProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ValidProofSubmittersLastTicks",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 472
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from tick to Providers, which is set if the Provider submitted a valid proof in that tick.",
                  "",
                  " This is used to keep track of the Providers that have submitted proofs in the last few",
                  " ticks, where availability only up to the last [`Config::TargetTicksStorageOfSubmitters`] ticks is guaranteed.",
                  " This storage is then made available for other pallets to use through the `ProofSubmittersInterface`."
                ]
              },
              {
                "name": "LastDeletedTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A value that represents the last tick that was deleted from the [`ValidProofSubmittersLastTicks`] StorageMap.",
                  "",
                  " This is used to know which tick to delete from the [`ValidProofSubmittersLastTicks`] StorageMap when the",
                  " `on_idle` hook is called."
                ]
              },
              {
                "name": "ChallengesTickerPaused",
                "modifier": "Optional",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " A boolean that represents whether the [`ChallengesTicker`] is paused.",
                  "",
                  " By default, this is `false`, meaning that the [`ChallengesTicker`] is incremented every time `on_poll` is called.",
                  " This can be set to `true` which would pause the [`ChallengesTicker`], preventing `do_new_challenges_round` from",
                  " being executed. Therefore:",
                  " - No new random challenges would be emitted and added to [`TickToChallengesSeed`].",
                  " - No new checkpoint challenges would be emitted and added to [`TickToCheckpointChallenges`].",
                  " - Deadlines for proof submissions are indefinitely postponed."
                ]
              },
              {
                "name": "PastBlocksWeight",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from block number to the weight used in that block.",
                  "",
                  " This is used to check if the network is presumably under a spam attack.",
                  " It is cleared for blocks older than `current_block` - ([`Config::BlockFullnessPeriod`] + 1)."
                ]
              },
              {
                "name": "PastBlocksStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 474
                },
                "default": [
                  0
                ],
                "docs": [
                  " The vector holding whether the last [`Config::BlockFullnessPeriod`] blocks were full or not.",
                  "",
                  " Each element in the vector represents a block, and is `true` if the block was full, and `false` otherwise.",
                  " Note: Ideally we would use a `BitVec` to reduce storage, but since there's no bounded `BitVec` implementation",
                  " we use a BoundedVec<bool> instead. This uses 7 more bits of storage per element."
                ]
              },
              {
                "name": "TickToCheckForSlashableProviders",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The tick to check and see if Providers failed to submit proofs before their deadline.",
                  "",
                  " In a normal situation, this should always be equal to [`ChallengesTicker`].",
                  " However, in the unlikely scenario where a large number of Providers fail to submit proofs (larger",
                  " than [`Config::MaxSlashableProvidersPerTick`]), and all of them had the same deadline, not all of",
                  " them will be marked as slashable. Only the first [`Config::MaxSlashableProvidersPerTick`] will be.",
                  " In that case, this stored tick will lag behind [`ChallengesTicker`].",
                  "",
                  " It is expected that this tick should catch up to [`ChallengesTicker`], as blocks with less",
                  " slashable Providers follow."
                ]
              }
            ]
          },
          "calls": {
            "ty": 360
          },
          "event": {
            "ty": 141
          },
          "constants": [
            {
              "name": "RandomChallengesPerBlock",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The number of random challenges that are generated per block, using the random seed",
                " generated for that block."
              ]
            },
            {
              "name": "MaxCustomChallengesPerBlock",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of custom challenges that can be made in a single checkpoint block."
              ]
            },
            {
              "name": "ChallengeHistoryLength",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The number of ticks that challenges history is kept for.",
                " After this many ticks, challenges are removed from [`TickToChallengesSeed`] StorageMap.",
                " A \"tick\" is usually one block, but some blocks may be skipped due to migrations."
              ]
            },
            {
              "name": "ChallengesQueueLength",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The length of the `ChallengesQueue` StorageValue.",
                " This is to limit the size of the queue, and therefore the number of",
                " manual challenges that can be made."
              ]
            },
            {
              "name": "CheckpointChallengePeriod",
              "ty": 4,
              "value": [
                235,
                11,
                0,
                0
              ],
              "docs": [
                " The number of blocks in between a checkpoint challenges round (i.e. with custom challenges).",
                " This is used to determine when to include the challenges from the `ChallengesQueue` and",
                " `PriorityChallengesQueue` in the `BlockToChallenges` StorageMap. These checkpoint challenge",
                " rounds have to be answered by ALL Providers, and this is enforced by the `submit_proof`",
                " extrinsic.",
                "",
                " WARNING: This period needs to be equal or larger than the challenge period of the smallest",
                " Provider in the network. If the smallest Provider has a challenge period of 10 ticks (blocks),",
                " then the checkpoint challenge period needs to be at least 10 ticks."
              ]
            },
            {
              "name": "StakeToChallengePeriod",
              "ty": 6,
              "value": [
                0,
                0,
                158,
                24,
                105,
                208,
                41,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The ratio to convert staked balance to block period.",
                " This is used to determine the period in which a Provider should submit a proof, based on",
                " their stake. The period is calculated as `StakeToChallengePeriod / stake`, saturating at [`Config::MinChallengePeriod`]."
              ]
            },
            {
              "name": "MinChallengePeriod",
              "ty": 4,
              "value": [
                30,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period in which a Provider can be challenged, regardless of their stake."
              ]
            },
            {
              "name": "ChallengeTicksTolerance",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The tolerance in number of ticks (almost equivalent to blocks, but skipping MBM) that",
                " a Provider has to submit a proof, counting from the tick the challenge is emitted for",
                " that Provider.",
                "",
                " For example, if a Provider is supposed to submit a proof for tick `n`, and the tolerance",
                " is set to `t`, then the Provider has to submit a proof for challenges in tick `n`, before",
                " `n + t`."
              ]
            },
            {
              "name": "ChallengesFee",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The fee charged for submitting a challenge.",
                " This fee goes to the Treasury, and is used to prevent spam. Registered Providers are",
                " exempt from this fee."
              ]
            },
            {
              "name": "TargetTicksStorageOfSubmitters",
              "ty": 4,
              "value": [
                3,
                0,
                0,
                0
              ],
              "docs": [
                " The target number of ticks for which to store the submitters that submitted valid proofs in them,",
                " stored in the `ValidProofSubmittersLastTicks` StorageMap. That storage will be trimmed down to this number",
                " of ticks in the `on_idle` hook of this pallet, to avoid bloating the state."
              ]
            },
            {
              "name": "MaxSubmittersPerTick",
              "ty": 4,
              "value": [
                244,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of Providers that can submit a proof in a single block.",
                " Although this can be seen as an arbitrary limit, if set to the already existing",
                " implicit limit that is \"how many `submit_proof` extrinsics fit in the weight of",
                " a block, this wouldn't add any additional artificial limit."
              ]
            },
            {
              "name": "Treasury",
              "ty": 0,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The Treasury AccountId.",
                " The account to which:",
                " - The fees for submitting a challenge are transferred.",
                " - The slashed funds are transferred."
              ]
            },
            {
              "name": "BlockFullnessPeriod",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The period of blocks for which the block fullness is checked.",
                "",
                " This is the amount of blocks from the past, for which the block fullness has been checked",
                " and is stored. Blocks older than `current_block` - [`Config::BlockFullnessPeriod`] are",
                " cleared from storage.",
                "",
                " This constant should be equal or smaller than the [`Config::ChallengeTicksTolerance`] constant,",
                " if the goal is to prevent spamming attacks that would prevent honest Providers from submitting",
                " their proofs in time."
              ]
            },
            {
              "name": "BlockFullnessHeadroom",
              "ty": 10,
              "value": [
                7,
                43,
                9,
                10,
                58,
                1,
                38,
                69,
                1,
                0
              ],
              "docs": [
                " The minimum unused weight that a block must have to be considered _not_ full.",
                "",
                " This is used as part of the criteria for checking if the network is presumably under a spam attack.",
                " For example, this can be set to the benchmarked weight of a `submit_proof` extrinsic, which would",
                " mean that a block is not considered full if a `submit_proof` extrinsic could have still fit in it."
              ]
            },
            {
              "name": "MinNotFullBlocksRatio",
              "ty": 209,
              "value": [
                0,
                101,
                205,
                29
              ],
              "docs": [
                " The minimum ratio (or percentage if you will) of blocks that must be considered _not_ full,",
                " from the total number of [`Config::BlockFullnessPeriod`] blocks taken into account.",
                "",
                " If less than this percentage of blocks are not full, the networks is considered to be presumably",
                " under a spam attack.",
                " This can also be thought of as the maximum ratio of misbehaving collators tolerated. For example,",
                " if this is set to `Perbill::from_percent(50)`, then if more than half of the last [`Config::BlockFullnessPeriod`]",
                " blocks are not full, then one of those blocks surely was produced by an honest collator, meaning",
                " that there was at least one truly _not_ full block in the last [`Config::BlockFullnessPeriod`] blocks."
              ]
            },
            {
              "name": "MaxSlashableProvidersPerTick",
              "ty": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of Providers that can be slashed per tick.",
                "",
                " Providers are marked as slashable if they are found in the [`TickToProvidersDeadlines`] StorageMap",
                " for the current challenges tick. It is expected that most of the times, there will be little to",
                " no Providers in the [`TickToProvidersDeadlines`] StorageMap for the current challenges tick. That",
                " is because Providers are expected to submit proofs in time. However, in the extreme scenario where",
                " a large number of Providers are missing the proof submissions, this configuration is used to keep",
                " the execution of the `on_poll` hook bounded."
              ]
            }
          ],
          "error": {
            "ty": 476
          },
          "index": 42,
          "docs": []
        },
        {
          "name": "Randomness",
          "storage": {
            "prefix": "Randomness",
            "entries": [
              {
                "name": "LatestOneEpochAgoRandomness",
                "modifier": "Optional",
                "ty": {
                  "Plain": 477
                },
                "default": [
                  0
                ],
                "docs": [
                  " Latest random seed obtained from the one epoch ago randomness from BABE, and the latest block that it can process randomness requests from"
                ]
              },
              {
                "name": "LatestParentBlockRandomness",
                "modifier": "Optional",
                "ty": {
                  "Plain": 477
                },
                "default": [
                  0
                ],
                "docs": [
                  " Latest random seed obtained from the parent block randomness from BABE, and the latest block that it can process randomness requests from"
                ]
              },
              {
                "name": "RelayEpoch",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current relay epoch"
                ]
              },
              {
                "name": "LastRelayBlockAndParaBlockValidForNextEpoch",
                "modifier": "Default",
                "ty": {
                  "Plain": 212
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The relay chain block (and anchored parachain block) to use when epoch changes"
                ]
              },
              {
                "name": "InherentIncluded",
                "modifier": "Optional",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Ensures the mandatory inherent was included in the block"
                ]
              }
            ]
          },
          "calls": {
            "ty": 361
          },
          "event": {
            "ty": 161
          },
          "constants": [],
          "error": null,
          "index": 43,
          "docs": []
        },
        {
          "name": "PaymentStreams",
          "storage": {
            "prefix": "PaymentStreams",
            "entries": [
              {
                "name": "OnPollTicker",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A counter of blocks for which Providers can charge their streams.",
                  "",
                  " This counter is not necessarily the same as the block number, as the last chargeable info of Providers",
                  " (and the global price index) are updated in the `on_poll` hook, which happens at the beginning of every block,",
                  " so long as the block is not part of a [Multi-Block-Migration](https://github.com/paritytech/polkadot-sdk/pull/1781) (MBM).",
                  " During MBMs, the block number increases, but `OnPollTicker` does not."
                ]
              },
              {
                "name": "FixedRatePaymentStreams",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 478,
                    "value": 479
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The double mapping from a Provider, to its provided Users, to their fixed-rate payment streams.",
                  "",
                  " This is used to store and manage fixed-rate payment streams between Users and Providers.",
                  "",
                  " This storage is updated in:",
                  " - [create_fixed_rate_payment_stream](crate::dispatchables::create_fixed_rate_payment_stream), which adds a new entry to the map.",
                  " - [delete_fixed_rate_payment_stream](crate::dispatchables::delete_fixed_rate_payment_stream), which removes the corresponding entry from the map.",
                  " - [update_fixed_rate_payment_stream](crate::dispatchables::update_fixed_rate_payment_stream), which updates the entry's `rate`.",
                  " - [charge_payment_streams](crate::dispatchables::charge_payment_streams), which updates the entry's `last_charged_tick`."
                ]
              },
              {
                "name": "DynamicRatePaymentStreams",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 478,
                    "value": 480
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The double mapping from a Provider, to its provided Users, to their dynamic-rate payment streams.",
                  "",
                  " This is used to store and manage dynamic-rate payment streams between Users and Providers.",
                  "",
                  " This storage is updated in:",
                  " - [create_dynamic_rate_payment_stream](crate::dispatchables::create_dynamic_rate_payment_stream), which adds a new entry to the map.",
                  " - [delete_dynamic_rate_payment_stream](crate::dispatchables::delete_dynamic_rate_payment_stream), which removes the corresponding entry from the map.",
                  " - [update_dynamic_rate_payment_stream](crate::dispatchables::update_dynamic_rate_payment_stream), which updates the entry's `amount_provided`.",
                  " - [charge_payment_streams](crate::dispatchables::charge_payment_streams), which updates the entry's `price_index_when_last_charged`."
                ]
              },
              {
                "name": "LastChargeableInfo",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 481
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The mapping from a Provider to its last chargeable price index (for dynamic-rate payment streams) and last chargeable tick (for fixed-rate payment streams).",
                  "",
                  " This is used to keep track of the last chargeable price index and tick number for each Provider, so this pallet can charge the payment streams correctly.",
                  "",
                  " This storage is updated in:",
                  " - [update_last_chargeable_info](crate::PaymentManager::update_last_chargeable_info), which updates the entry's `last_chargeable_tick` and `price_index`."
                ]
              },
              {
                "name": "LastSubmittersTickRegistered",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last tick that was processed by this pallet from the Proof Submitters interface.",
                  "",
                  " This is used to keep track of the last tick processed by this pallet from the pallet that implements the from the ProvidersProofSubmitters interface.",
                  " This is done to know the last tick for which this pallet has registered the Providers that submitted a valid proof and updated their last chargeable info.",
                  " In the next `on_poll` hook execution, this pallet will update the last chargeable info of the Providers that submitted a valid proof in the tick that",
                  " follows the one saved in this storage element."
                ]
              },
              {
                "name": "UsersWithoutFunds",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The mapping from a user to if it has been flagged for not having enough funds to pay for its requested services.",
                  "",
                  " This is used to flag users that do not have enough funds to pay for their requested services, so other Providers",
                  " can stop providing services to them.",
                  "",
                  " This storage is updated in:",
                  " - [charge_payment_streams](crate::dispatchables::charge_payment_streams), which emits a `UserWithoutFunds` event and sets the user's entry in this map",
                  " to that moment's tick number if it does not have enough funds.",
                  " - [clear_insolvent_flag](crate::utils::clear_insolvent_flag), which clears the user's entry in this map if the cooldown period has passed and the user has paid all its outstanding debt."
                ]
              },
              {
                "name": "RegisteredUsers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The mapping from a user to if it has been registered to the network and the amount of payment streams it has.",
                  "",
                  " Since users have to provide a deposit to be able to open each payment stream, this is used to keep track of the amount of payment streams",
                  " that a user has and it is also useful to check if a user has registered to the network.",
                  "",
                  " This storage is updated in:",
                  " - [create_fixed_rate_payment_stream](crate::dispatchables::create_fixed_rate_payment_stream), which holds the deposit of the user and adds one to this storage.",
                  " - [create_dynamic_rate_payment_stream](crate::dispatchables::create_dynamic_rate_payment_stream), which holds the deposit of the user and adds one to this storage.",
                  " - [remove_fixed_rate_payment_stream](crate::dispatchables::remove_fixed_rate_payment_stream), which removes one from this storage and releases the deposit.",
                  " - [remove_dynamic_rate_payment_stream](crate::dispatchables::remove_dynamic_rate_payment_stream), which removes one from this storage and releases the deposit."
                ]
              },
              {
                "name": "CurrentPricePerGigaUnitPerTick",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current price per gigaunit per tick of the provided service, used to calculate the amount to charge for dynamic-rate payment streams.",
                  "",
                  " This can be updated each tick by the system manager.",
                  "",
                  " It is in giga-units to allow for a more granular price per unit considering the limitations in decimal places that the Balance type might have."
                ]
              },
              {
                "name": "AccumulatedPriceIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The accumulated price index since genesis, used to calculate the amount to charge for dynamic-rate payment streams.",
                  "",
                  " This is equivalent to what it would have cost to provide one unit of the provided service since the beginning of the network.",
                  " We use this to calculate the amount to charge for dynamic-rate payment streams, by checking out the difference between the index",
                  " when the payment stream was last charged, and the index at the last chargeable tick.",
                  "",
                  " This storage is updated in:",
                  " - [do_update_price_index](crate::utils::do_update_price_index), which updates the accumulated price index, adding to it the current price."
                ]
              },
              {
                "name": "PrivilegedProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 13,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Privileged Providers.",
                  "",
                  " Privileged Providers are those who are allowed to charge up to the current tick in",
                  " fixed rate payment streams, regardless of their [`LastChargeableInfo`]."
                ]
              }
            ]
          },
          "calls": {
            "ty": 362
          },
          "event": {
            "ty": 162
          },
          "constants": [
            {
              "name": "BaseDeposit",
              "ty": 6,
              "value": [
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base deposit for a new payment stream. The actual deposit will be this constant + the deposit calculated using the `NewStreamDeposit` constant."
              ]
            },
            {
              "name": "NewStreamDeposit",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The number of ticks that correspond to the deposit that a User has to pay to open a payment stream.",
                " This means that, from the balance of the User for which the payment stream is being created, the amount",
                " `NewStreamDeposit * rate + BaseDeposit` will be held as a deposit.",
                " In the case of dynamic-rate payment streams, `rate` will be `amount_provided_in_giga_units * price_per_giga_unit_per_tick`, where `price_per_giga_unit_per_tick` is",
                " obtained from the `CurrentPricePerGigaUnitPerTick` storage."
              ]
            },
            {
              "name": "UserWithoutFundsCooldown",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The number of ticks that a user will have to wait after it has been flagged as without funds to be able to clear that flag",
                " and be able to pay for services again. If there's any outstanding debt when the flag is cleared, it will be paid."
              ]
            },
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The treasury account of the runtime, where a fraction of each payment goes."
              ]
            },
            {
              "name": "MaxUsersToCharge",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of Users that a Provider can charge in a single extrinsic execution.",
                " This is used to prevent a Provider from charging too many Users in a single block, which could lead to a DoS attack."
              ]
            }
          ],
          "error": {
            "ty": 482
          },
          "index": 44,
          "docs": []
        },
        {
          "name": "BucketNfts",
          "storage": null,
          "calls": {
            "ty": 363
          },
          "event": {
            "ty": 164
          },
          "constants": [],
          "error": {
            "ty": 483
          },
          "index": 45,
          "docs": []
        },
        {
          "name": "Nfts",
          "storage": {
            "prefix": "Nfts",
            "entries": [
              {
                "name": "Collection",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 484
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Details of a collection."
                ]
              },
              {
                "name": "OwnershipAcceptance",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collection, if any, of which an account is willing to take ownership."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 485,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items held by any given account; set out this way so that items owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "CollectionAccount",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 486,
                    "value": 38
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The collections owned by any given account; set out this way so that collections owned by",
                  " a single account can be enumerated."
                ]
              },
              {
                "name": "CollectionRoleOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 487,
                    "value": 488
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items in existence and their ownership details.",
                  " Stores collection roles as per account."
                ]
              },
              {
                "name": "Item",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 490
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The items in existence and their ownership details."
                ]
              },
              {
                "name": "CollectionMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 496
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of a collection."
                ]
              },
              {
                "name": "ItemMetadataOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 497
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Metadata of an item."
                ]
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 499,
                    "value": 500
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Attributes of a collection."
                ]
              },
              {
                "name": "ItemPriceOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 502
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A price of an item."
                ]
              },
              {
                "name": "ItemAttributesApprovalsOf",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 503
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Item attribute approvals."
                ]
              },
              {
                "name": "NextCollectionId",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `CollectionId` that is going to be used for the next collection.",
                  " This gets incremented whenever a new collection is created."
                ]
              },
              {
                "name": "PendingSwapOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 505
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Handles all the pending swaps."
                ]
              },
              {
                "name": "CollectionConfigOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 366
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Config of a collection."
                ]
              },
              {
                "name": "ItemConfigOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 212,
                    "value": 377
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Config of an item."
                ]
              }
            ]
          },
          "calls": {
            "ty": 365
          },
          "event": {
            "ty": 165
          },
          "constants": [
            {
              "name": "CollectionDeposit",
              "ty": 6,
              "value": [
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for collection."
              ]
            },
            {
              "name": "ItemDeposit",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved for an item."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your item."
              ]
            },
            {
              "name": "AttributeDepositBase",
              "ty": 6,
              "value": [
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The basic amount of funds that must be reserved when adding an attribute to an item."
              ]
            },
            {
              "name": "DepositPerByte",
              "ty": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The additional funds that must be reserved for the number of bytes store in metadata,",
                " either \"normal\" metadata or attribute metadata."
              ]
            },
            {
              "name": "StringLimit",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum length of data stored on-chain."
              ]
            },
            {
              "name": "KeyLimit",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute key."
              ]
            },
            {
              "name": "ValueLimit",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum length of an attribute value."
              ]
            },
            {
              "name": "ApprovalsLimit",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum approvals an item could have."
              ]
            },
            {
              "name": "ItemAttributesApprovalsLimit",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum attributes approvals an item could have."
              ]
            },
            {
              "name": "MaxTips",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of tips a user could send."
              ]
            },
            {
              "name": "MaxDeadlineDuration",
              "ty": 4,
              "value": [
                0,
                26,
                79,
                0
              ],
              "docs": [
                " The max duration in blocks for deadlines."
              ]
            },
            {
              "name": "MaxAttributesPerCall",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The max number of attributes a user could set per call."
              ]
            },
            {
              "name": "Features",
              "ty": 506,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Disables some of pallet's features."
              ]
            }
          ],
          "error": {
            "ty": 508
          },
          "index": 50,
          "docs": []
        },
        {
          "name": "Parameters",
          "storage": {
            "prefix": "Parameters",
            "entries": [
              {
                "name": "Parameters",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 175,
                    "value": 207
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stored parameters."
                ]
              }
            ]
          },
          "calls": {
            "ty": 388
          },
          "event": {
            "ty": 174
          },
          "constants": [],
          "error": null,
          "index": 51,
          "docs": []
        }
      ],
      "extrinsic": {
        "version": 4,
        "address_ty": 292,
        "call_ty": 298,
        "signature_ty": 384,
        "extra_ty": 509,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 510,
            "additional_signed": 38
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 511,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 512,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 513,
            "additional_signed": 13
          },
          {
            "identifier": "CheckMortality",
            "ty": 514,
            "additional_signed": 13
          },
          {
            "identifier": "CheckNonce",
            "ty": 516,
            "additional_signed": 38
          },
          {
            "identifier": "CheckWeight",
            "ty": 517,
            "additional_signed": 38
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 518,
            "additional_signed": 38
          },
          {
            "identifier": "StorageWeightReclaim",
            "ty": 519,
            "additional_signed": 38
          },
          {
            "identifier": "CheckMetadataHash",
            "ty": 520,
            "additional_signed": 32
          }
        ]
      },
      "ty": 522,
      "apis": [],
      "outer_enums": {
        "call_enum_ty": 298,
        "event_enum_ty": 21,
        "error_enum_ty": 523
      },
      "custom": {
        "map": {}
      }
    }
  }
]