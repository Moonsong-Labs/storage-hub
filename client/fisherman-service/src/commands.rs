use async_trait::async_trait;
use thiserror::Error;

use shc_actors_derive::actor_command;
use shc_actors_framework::actor::ActorHandle;
use shc_common::traits::StorageEnableRuntime;
use shc_common::types::BlockNumber;
use sp_core::H256;

use crate::{events::FileDeletionTarget, handler::FishermanService, FileKeyChange};

/// Errors that can occur in the fisherman service
#[derive(Error, Debug)]
pub enum FishermanServiceError {
    #[error("Database error: {0}")]
    Database(#[from] diesel::result::Error),
    #[error("Blockchain client error: {0}")]
    Client(String),
    #[error("Events retrieval error: {0}")]
    EventsRetrieval(#[from] shc_common::blockchain_utils::EventsRetrievalError),
    #[error("Storage not found")]
    StorageNotFound,
    #[error("Decoding error: {0}")]
    DecodingError(String),
}

/// Commands that can be sent to the FishermanService actor
#[actor_command(
    service = FishermanService<Runtime: StorageEnableRuntime>,
    default_mode = "ImmediateResponse",
    default_error_type = FishermanServiceError,
)]
pub enum FishermanServiceCommand<Runtime: StorageEnableRuntime> {
    /// Get file key changes since a specific block for a given provider
    #[command(success_type = Vec<FileKeyChange>)]
    GetFileKeyChangesSinceBlock {
        /// The starting block (exclusive) - changes will be tracked from this block + 1
        from_block: BlockNumber<Runtime>,
        /// The provider to track changes for (BSP ID or Bucket ID)
        provider: FileDeletionTarget<Runtime>,
    },
    /// Query incomplete storage request metadata for a file key
    #[command(success_type = pallet_file_system_runtime_api::IncompleteStorageRequestMetadataResponse<
        Runtime::AccountId,
        shc_common::types::BucketId<Runtime>,
        shc_common::types::StorageDataUnit<Runtime>,
        Runtime::Hash,
        shc_common::types::BackupStorageProviderId<Runtime>,
    >)]
    QueryIncompleteStorageRequest {
        /// The file key to query
        file_key: H256,
    },
}

/// Interface trait for interacting with the FishermanService actor.
///
/// This trait is automatically generated by the `actor_command` macro and provides
/// async methods corresponding to each command variant.
#[async_trait]
pub trait FishermanServiceCommandInterfaceExt<Runtime: StorageEnableRuntime>:
    FishermanServiceCommandInterface<Runtime>
{
    // Extension methods can be added here in the future if needed
}

/// Default implementation of the extension trait
#[async_trait]
impl<Runtime: StorageEnableRuntime> FishermanServiceCommandInterfaceExt<Runtime>
    for ActorHandle<FishermanService<Runtime>>
{
    // Extension method implementations would go here
}
