# Storage Hub: Optimized Parachain CI/CD Workflow
#
# This workflow uses a unified approach to eliminate duplication:
# 1. Single preparation job handles all setup (binary, Docker, dependencies)
# 2. Unified test matrix runs all test types in parallel
# 3. Uses GitHub Container Registry for efficient Docker image sharing
# 4. Implements proper pnpm caching to speed up builds

name: Storage Hub Parachain CI/CD

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: moonsonglabs
  IMAGE_NAME: storage-hub

permissions:
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node_changed: ${{ steps.node_check.outputs.changed }}
      image_tag: ${{ steps.set_tag.outputs.tag }}
      test_image: ${{ steps.set_tag.outputs.test_image }}
    env:
      SKIP_BUILD_LABEL_PRESENT: ${{ contains(github.event.pull_request.labels.*.name, 'skip-node-build') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if Parachain Node needs rebuild
        id: node_check
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha || github.event.before }}"
          HEAD_SHA="${{ github.sha }}"

          if [[ "${{ env.SKIP_BUILD_LABEL_PRESENT }}" != "true" ]] && git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^(client|node|pallets|runtime)/|^Cargo\.toml$'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Set image tags
        id: set_tag
        run: |
          if [[ "${{ env.SKIP_BUILD_LABEL_PRESENT }}" == "true" || "${{ steps.node_check.outputs.changed }}" == 'false' ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=sha-$(git log -1 --format='%H' | cut -c1-8)" >> $GITHUB_OUTPUT
          fi
          echo "test_image=moonsonglabs/storage-hub:test-${{ github.sha }}" >> $GITHUB_OUTPUT

  build:
    needs: [setup]
    if: needs.setup.outputs.node_changed == 'true'
    runs-on: ubuntu-latest
    env:
      SCCACHE_GHA_ENABLED: 'true'
      RUSTC_WRAPPER: 'sccache'
      CARGO_INCREMENTAL: '0'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: actions-rust-lang/setup-rust-toolchain@v1.8
        with:
          cache: false

      - uses: rui314/setup-mold@v1

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build parachain node
        run: cargo build --release

      - name: Prepare Docker build context
        run: |
          mkdir -p build
          cp target/release/storage-hub-node build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/storage-hub-node.Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            moonsonglabs/storage-hub:${{ needs.setup.outputs.image_tag }}
            moonsonglabs/storage-hub:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  prepare:
    needs: [setup, build]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/workflow-templates/setup-pnpm
        with:
          node_version: 23

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Get node binary
        run: |
          mkdir -p target/release/
          if [[ "${{ needs.setup.outputs.node_changed }}" == "true" ]]; then
            # Pull the newly built image
            docker pull moonsonglabs/storage-hub:${{ needs.setup.outputs.image_tag }}
            docker create --name temp_storage_hub moonsonglabs/storage-hub:${{ needs.setup.outputs.image_tag }}
          else
            # Use latest image
            docker pull moonsonglabs/storage-hub:latest
            docker create --name temp_storage_hub moonsonglabs/storage-hub:latest
          fi
          docker cp temp_storage_hub:/usr/local/bin/storage-hub-node target/release/storage-hub-node
          docker rm temp_storage_hub

      - name: Prepare test environment
        run: |
          chmod +x target/release/storage-hub-node
          chmod -R 777 docker/dev-keystores
          cd test
          pnpm install

      - name: Build and push test Docker image
        run: |
          cd test
          pnpm docker:build
          docker tag moonsonglabs/storage-hub:latest ${{ needs.setup.outputs.test_image }}
          docker push ${{ needs.setup.outputs.test_image }}

      - name: Generate TypeScript types
        run: |
          cd test
          pnpm typegen

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            test/node_modules
            api-augment
            types-bundle
          key: test-deps-${{ runner.os }}-${{ hashFiles('test/pnpm-lock.yaml', 'api-augment/**', 'types-bundle/**') }}

  tests:
    needs: [setup, prepare]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test_type:
          - { name: "dev-node", pattern: "./suites/solo-node/**/**.test.ts", shards: 2, diesel: false }
          - { name: "full-net", pattern: "./suites/integration/msp/**.test.ts", shards: 4, diesel: true }
          - { name: "bsp-net", pattern: "./suites/integration/bsp/**.test.ts", shards: 5, diesel: false }
          - { name: "user-net", pattern: "./suites/integration/user/**.test.ts", shards: 2, diesel: true }
          - { name: "fisherman", pattern: "./suites/integration/fisherman/**.test.ts", shards: 1, diesel: true }
        shard: [1, 2, 3, 4, 5]
        exclude:
          - { test_type: { shards: 1 }, shard: 2 }
          - { test_type: { shards: 1 }, shard: 3 }
          - { test_type: { shards: 1 }, shard: 4 }
          - { test_type: { shards: 1 }, shard: 5 }
          - { test_type: { shards: 2 }, shard: 3 }
          - { test_type: { shards: 2 }, shard: 4 }
          - { test_type: { shards: 2 }, shard: 5 }
          - { test_type: { shards: 4 }, shard: 5 }

    name: "Test ${{ matrix.test_type.name }} (shard ${{ matrix.shard }}/${{ matrix.test_type.shards }})"

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/workflow-templates/setup-pnpm
        with:
          node_version: 23

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Restore test dependencies
        uses: actions/cache@v4
        with:
          path: |
            test/node_modules
            api-augment
            types-bundle
          key: test-deps-${{ runner.os }}-${{ hashFiles('test/pnpm-lock.yaml', 'api-augment/**', 'types-bundle/**') }}

      - name: Pull test Docker image
        run: |
          docker pull ${{ needs.setup.outputs.test_image }}
          docker tag ${{ needs.setup.outputs.test_image }} moonsonglabs/storage-hub:latest

      - name: Install diesel CLI
        if: matrix.test_type.diesel
        uses: taiki-e/install-action@v2
        with:
          tool: diesel_cli

      - name: Run tests
        id: run_tests
        run: |
          cd test
          pnpm install --frozen-lockfile
          node --import tsx \
              --test \
              --test-reporter=@reporters/github \
              --test-reporter-destination=stdout \
              --test-reporter=spec \
              --test-reporter-destination=stdout \
              --test-concurrency=1 \
              --test-shard=${{ matrix.shard }}/${{ matrix.test_type.shards }} \
              ${{ matrix.test_type.pattern }}

      - name: Collect test logs on failure
        if: failure() && steps.run_tests.outcome == 'failure'
        uses: ./.github/actions/collect-logs
        with:
          artifact-name: ${{ matrix.test_type.name }}-logs-shard-${{ matrix.shard }}
          logs-dir-pattern: 'bsp-logs-*'

  network-tests:
    needs: [setup, build]
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        test_type:
          - { name: "zombienet-simple", command: "pnpm zombienet test --provider native configs/simpleNative.zndsl" }
          - { name: "zombienet-full", command: "pnpm zombie:run:full:native & sleep 60 && pnpm zombie:setup:native && pnpm test:full" }

    name: "Network Test: ${{ matrix.test_type.name }}"

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/workflow-templates/setup-pnpm

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Get node binary
        run: |
          mkdir -p target/release/
          if [[ "${{ needs.setup.outputs.node_changed }}" == "true" ]]; then
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image_tag }}
            docker create --name temp_storage_hub ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.image_tag }}
          else
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker create --name temp_storage_hub ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fi
          docker cp temp_storage_hub:/usr/local/bin/storage-hub-node target/release/storage-hub-node
          docker rm temp_storage_hub

      - name: Prepare environment
        run: |
          chmod +x target/release/storage-hub-node
          chmod -R 777 docker/dev-keystores
          cd test
          pnpm install

      - name: Download Polkadot for Zombienet
        if: matrix.test_type.name == 'zombienet-simple'
        run: |
          cd test
          pnpm tsx scripts/downloadPolkadot.ts stable2412

      - name: Run network test
        run: |
          cd test
          ${{ matrix.test_type.command }}

  typegen-check:
    needs: [prepare]
    runs-on: ubuntu-latest
    name: "Check TypeScript bindings"
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/workflow-templates/setup-pnpm
        with:
          node_version: 22

      - name: Restore test dependencies
        uses: actions/cache@v4
        with:
          path: |
            test/node_modules
            api-augment
            types-bundle
          key: test-deps-${{ runner.os }}-${{ hashFiles('test/pnpm-lock.yaml', 'api-augment/**', 'types-bundle/**') }}

      - name: Check for changes
        run: |
          cd api-augment
          if [ -n "$(git status --porcelain .)" ]; then
            echo "Typegen produced changes. Please run 'pnpm typegen' locally and commit the changes."
            git status
            git diff
            exit 1
          else
            echo "TypeScript bindings are up to date"
          fi