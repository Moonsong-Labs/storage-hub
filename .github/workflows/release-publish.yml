name: Publish on Release

on:
  release:
    types: [published]

jobs:
  docker-backend:
    name: Build & Push Backend Docker Image
    runs-on: blacksmith-16vcpu-ubuntu-2404
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Docker tags
        id: prep
        run: |
          DOCKER_IMAGE=moonsonglabs/storage-hub-msp-backend
          TAG=${GITHUB_REF_NAME}
          MINOR_TAG=v${TAG#v}
          MINOR_TAG=${MINOR_TAG%.*}
          TAGS="${DOCKER_IMAGE}:${TAG}\n${DOCKER_IMAGE}:${MINOR_TAG}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Blacksmith Builder
        uses: useblacksmith/setup-docker-builder@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build Docker image and push it to Docker Hub
        uses: useblacksmith/build-push-action@v2
        with:
          context: .
          file: ./docker/storage-hub-msp-backend.Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}-msp-backend
            org.opencontainers.image.description=Storage Hub MSP Backend
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  npm-packages:
    name: Publish npm packages (sdk, api-augment, types-bundle)
    runs-on: blacksmith-16vcpu-ubuntu-2404
    env:
      NODE_AUTH_TOKEN: ${{ secrets.SH_SDK_PUBLISH_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm & cache
        uses: ./.github/workflow-templates/setup-pnpm

      - name: Setup Rust toolchain (for wasm)
        uses: actions-rust-lang/setup-rust-toolchain@v1.8
        with:
          target: wasm32-unknown-unknown
          cache: false

      - name: Cache wasm-pack
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/wasm-pack
          key: wasm-pack-v0.12.1

      - name: Install wasm-pack
        run: curl -sSf https://rustwasm.github.io/wasm-pack/installer/init.sh | sh

      - name: Extract version from tag
        id: vars
        run: |
          TAG=${GITHUB_REF_NAME}
          VERSION=${TAG#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build core
        working-directory: sdk/core
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Build msp-client
        working-directory: sdk/msp-client
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Set SDK versions (no commit)
        working-directory: sdk
        run: |
          jq --arg v "${{ steps.vars.outputs.version }}" '.version=$v' core/package.json > core/package.json.tmp && mv core/package.json.tmp core/package.json
          jq --arg v "${{ steps.vars.outputs.version }}" '.version=$v' msp-client/package.json > msp-client/package.json.tmp && mv msp-client/package.json.tmp msp-client/package.json

      - name: Pack and publish core
        working-directory: sdk/core
        run: |
          pnpm pack
          pnpm publish --access public --no-git-checks

      - name: Pack and publish msp-client
        working-directory: sdk/msp-client
        run: |
          pnpm pack
          pnpm publish --access public --no-git-checks

      - name: Prepare and publish types-bundle
        working-directory: types-bundle
        run: |
          jq --arg v "${{ steps.vars.outputs.version }}" '.version=$v' package.json > package.json.tmp && mv package.json.tmp package.json
          pnpm install --frozen-lockfile || true
          pnpm run build || true
          pnpm publish --access public --no-git-checks

      - name: Prepare and publish api-augment
        working-directory: api-augment
        run: |
          jq --arg v "${{ steps.vars.outputs.version }}" '.version=$v' package.json > package.json.tmp && mv package.json.tmp package.json
          pnpm install --frozen-lockfile || true
          pnpm run build || true
          pnpm publish --access public --no-git-checks
