name: Build and Test

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      pull_request:
        description: set to pull_request number to execute on external pr
        required: false

jobs:
  set-tags:
    runs-on: ubuntu-latest
    outputs:
      sha8: ${{ steps.get-sha.outputs.sha8 }}
    steps:
      - uses: actions/checkout@v4
      - name: Get Sha
        id: get-sha
        run: |
          echo "sha8=$(git log -1 --format='%H' | cut -c1-8)" >> $GITHUB_OUTPUT

  build_image:
    needs: set-tags
    name: "Build node image"
    runs-on: ubuntu-latest
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_INCREMENTAL: "0"
    steps:
      - uses: actions/checkout@v4
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4
      - uses: actions-rust-lang/setup-rust-toolchain@v1.8
        with:
          components: rust-src
          target: wasm32-unknown-unknown
      - uses: rui314/setup-mold@v1
      - uses: oven-sh/setup-bun@v1
      - uses: arduino/setup-protoc@v3
      - name: Build All
        run: cargo build --release
      - name: Check Built By Mold
        run: readelf -p .comment target/release/storage-hub-node
      - name: Prepare artefacts
        run: |
          mkdir -p runtimes
          mkdir -p build
          cp target/release/storage-hub-node build/
          cp target/release/wbuild/storage*/storage*_runtime.compact.compressed.wasm runtimes/
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=moonsonglabs/storage-hub
          TAGS="${DOCKER_IMAGE}:sha-${{ needs.set-tags.outputs.sha8 }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:master
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          file: ./docker/storage-hub-node.Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

  zombie_test:
    needs: [build_image, set-tags]
    name: "Test Simple Network"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: test
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Pull Docker image
        run: docker pull moonsonglabs/storage-hub:sha-${{ needs.set-tags.outputs.sha8 }}
      - name: Start local k8 cluster
        uses: medyagh/setup-minikube@latest
        with:
          cache: true
          driver: docker
          cpus: 4
          memory: 12000

      - name: Setup Zombienet
        run: |
          wget https://github.com/paritytech/zombienet/releases/download/v1.3.95/zombienet-linux-x64 -O zombienet
          chmod +x zombienet
          mkdir -p tmp
          mv zombienet tmp/
      - name: Run Zombienet Test!
        run: tmp/zombienet test configs/simple.zndsl
